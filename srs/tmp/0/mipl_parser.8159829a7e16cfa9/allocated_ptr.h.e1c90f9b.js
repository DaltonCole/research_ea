var data = {lines:[
{"lineNum":"    1","line":"// Guarded Allocation -*- C++ -*-"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 2014-2017 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This file is part of the GNU ISO C++ Library.  This library is free"},
{"lineNum":"    6","line":"// software; you can redistribute it and/or modify it under the"},
{"lineNum":"    7","line":"// terms of the GNU General Public License as published by the"},
{"lineNum":"    8","line":"// Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    9","line":"// any later version."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// This library is distributed in the hope that it will be useful,"},
{"lineNum":"   12","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   13","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   14","line":"// GNU General Public License for more details."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   17","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   18","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   21","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   22","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   23","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/** @file bits/allocated_ptr.h"},
{"lineNum":"   26","line":" *  This is an internal header file, included by other library headers."},
{"lineNum":"   27","line":" *  Do not attempt to use it directly. @headername{memory}"},
{"lineNum":"   28","line":" */"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"#ifndef _ALLOCATED_PTR_H"},
{"lineNum":"   31","line":"#define _ALLOCATED_PTR_H 1"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"#if __cplusplus < 201103L"},
{"lineNum":"   34","line":"# include <bits/c++0xwarning.h>"},
{"lineNum":"   35","line":"#else"},
{"lineNum":"   36","line":"# include <type_traits>"},
{"lineNum":"   37","line":"# include <bits/ptr_traits.h>"},
{"lineNum":"   38","line":"# include <bits/alloc_traits.h>"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   41","line":"{"},
{"lineNum":"   42","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"  /// Non-standard RAII type for managing pointers obtained from allocators."},
{"lineNum":"   45","line":"  template<typename _Alloc>"},
{"lineNum":"   46","line":"    struct __allocated_ptr"},
{"lineNum":"   47","line":"    {"},
{"lineNum":"   48","line":"      using pointer = typename allocator_traits<_Alloc>::pointer;"},
{"lineNum":"   49","line":"      using value_type = typename allocator_traits<_Alloc>::value_type;"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"      /// Take ownership of __ptr"},
{"lineNum":"   52","line":"      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept","class":"lineCov","hits":"1","order":"1110","possible_hits":"1",},
{"lineNum":"   53","line":"      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)","class":"lineCov","hits":"1","order":"1111","possible_hits":"1",},
{"lineNum":"   54","line":"      { }","class":"linePartCov","hits":"1","order":"1114","possible_hits":"2",},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"      /// Convert __ptr to allocator\'s pointer type and take ownership of it"},
{"lineNum":"   57","line":"      template<typename _Ptr,"},
{"lineNum":"   58","line":"\t       typename _Req = _Require<is_same<_Ptr, value_type*>>>"},
{"lineNum":"   59","line":"      __allocated_ptr(_Alloc& __a, _Ptr __ptr)"},
{"lineNum":"   60","line":"      : _M_alloc(std::__addressof(__a)),"},
{"lineNum":"   61","line":"\t_M_ptr(pointer_traits<pointer>::pointer_to(*__ptr))"},
{"lineNum":"   62","line":"      { }"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"      /// Transfer ownership of the owned pointer"},
{"lineNum":"   65","line":"      __allocated_ptr(__allocated_ptr&& __gd) noexcept"},
{"lineNum":"   66","line":"      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)"},
{"lineNum":"   67","line":"      { __gd._M_ptr = nullptr; }"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"      /// Deallocate the owned pointer"},
{"lineNum":"   70","line":"      ~__allocated_ptr()","class":"lineCov","hits":"1","order":"1122","possible_hits":"1",},
{"lineNum":"   71","line":"      {"},
{"lineNum":"   72","line":"\tif (_M_ptr != nullptr)","class":"lineCov","hits":"1","order":"1123","possible_hits":"1",},
{"lineNum":"   73","line":"\t  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"      }","class":"linePartCov","hits":"1","order":"1124","possible_hits":"2",},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"      /// Release ownership of the owned pointer"},
{"lineNum":"   77","line":"      __allocated_ptr&"},
{"lineNum":"   78","line":"      operator=(std::nullptr_t) noexcept","class":"lineCov","hits":"1","order":"1117","possible_hits":"1",},
{"lineNum":"   79","line":"      {"},
{"lineNum":"   80","line":"\t_M_ptr = nullptr;","class":"lineCov","hits":"1","order":"1118","possible_hits":"1",},
{"lineNum":"   81","line":"\treturn *this;","class":"lineCov","hits":"1","order":"1119","possible_hits":"1",},
{"lineNum":"   82","line":"      }","class":"linePartCov","hits":"1","order":"1120","possible_hits":"2",},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"      /// Get the address that the owned pointer refers to."},
{"lineNum":"   85","line":"      value_type* get() { return _S_raw_ptr(_M_ptr); }"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    private:"},
{"lineNum":"   88","line":"      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"      template<typename _Ptr>"},
{"lineNum":"   91","line":"\tstatic auto"},
{"lineNum":"   92","line":"\t_S_raw_ptr(_Ptr __ptr) -> decltype(_S_raw_ptr(__ptr.operator->()))"},
{"lineNum":"   93","line":"\t{ return _S_raw_ptr(__ptr.operator->()); }"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"      _Alloc* _M_alloc;"},
{"lineNum":"   96","line":"      pointer _M_ptr;"},
{"lineNum":"   97","line":"    };"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"  /// Allocate space for a single object using __a"},
{"lineNum":"  100","line":"  template<typename _Alloc>"},
{"lineNum":"  101","line":"    __allocated_ptr<_Alloc>"},
{"lineNum":"  102","line":"    __allocate_guarded(_Alloc& __a)"},
{"lineNum":"  103","line":"    {"},
{"lineNum":"  104","line":"      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };"},
{"lineNum":"  105","line":"    }"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":"  108","line":"} // namespace std"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"#endif"},
{"lineNum":"  111","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "mipl_parser", "date" : "2018-11-28 14:11:04", "instrumented" : 11, "covered" : 10,};
var merged_data = [];
