var data = {lines:[
{"lineNum":"    1","line":"// Allocators -*- C++ -*-"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 2001-2017 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This file is part of the GNU ISO C++ Library.  This library is free"},
{"lineNum":"    6","line":"// software; you can redistribute it and/or modify it under the"},
{"lineNum":"    7","line":"// terms of the GNU General Public License as published by the"},
{"lineNum":"    8","line":"// Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    9","line":"// any later version."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// This library is distributed in the hope that it will be useful,"},
{"lineNum":"   12","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   13","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   14","line":"// GNU General Public License for more details."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   17","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   18","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   21","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   22","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   23","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/*"},
{"lineNum":"   26","line":" * Copyright (c) 1996-1997"},
{"lineNum":"   27","line":" * Silicon Graphics Computer Systems, Inc."},
{"lineNum":"   28","line":" *"},
{"lineNum":"   29","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   30","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   31","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   32","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   33","line":" * in supporting documentation.  Silicon Graphics makes no"},
{"lineNum":"   34","line":" * representations about the suitability of this software for any"},
{"lineNum":"   35","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   36","line":" */"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"/** @file bits/allocator.h"},
{"lineNum":"   39","line":" *  This is an internal header file, included by other library headers."},
{"lineNum":"   40","line":" *  Do not attempt to use it directly. @headername{memory}"},
{"lineNum":"   41","line":" */"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"#ifndef _ALLOCATOR_H"},
{"lineNum":"   44","line":"#define _ALLOCATOR_H 1"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"#include <bits/c++allocator.h> // Define the base class to std::allocator."},
{"lineNum":"   47","line":"#include <bits/memoryfwd.h>"},
{"lineNum":"   48","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   49","line":"#include <type_traits>"},
{"lineNum":"   50","line":"#endif"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"#define __cpp_lib_incomplete_container_elements 201505"},
{"lineNum":"   53","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   54","line":"# define __cpp_lib_allocator_is_always_equal 201411"},
{"lineNum":"   55","line":"#endif"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   58","line":"{"},
{"lineNum":"   59","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"  /**"},
{"lineNum":"   62","line":"   *  @addtogroup allocators"},
{"lineNum":"   63","line":"   *  @{"},
{"lineNum":"   64","line":"   */"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"  /// allocator<void> specialization."},
{"lineNum":"   67","line":"  template<>"},
{"lineNum":"   68","line":"    class allocator<void>"},
{"lineNum":"   69","line":"    {"},
{"lineNum":"   70","line":"    public:"},
{"lineNum":"   71","line":"      typedef size_t      size_type;"},
{"lineNum":"   72","line":"      typedef ptrdiff_t   difference_type;"},
{"lineNum":"   73","line":"      typedef void*       pointer;"},
{"lineNum":"   74","line":"      typedef const void* const_pointer;"},
{"lineNum":"   75","line":"      typedef void        value_type;"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"      template<typename _Tp1>"},
{"lineNum":"   78","line":"\tstruct rebind"},
{"lineNum":"   79","line":"\t{ typedef allocator<_Tp1> other; };"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   82","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"   83","line":"      // 2103. std::allocator propagate_on_container_move_assignment"},
{"lineNum":"   84","line":"      typedef true_type propagate_on_container_move_assignment;"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"      typedef true_type is_always_equal;"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"      template<typename _Up, typename... _Args>"},
{"lineNum":"   89","line":"\tvoid"},
{"lineNum":"   90","line":"\tconstruct(_Up* __p, _Args&&... __args)"},
{"lineNum":"   91","line":"\t{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"      template<typename _Up>"},
{"lineNum":"   94","line":"\tvoid"},
{"lineNum":"   95","line":"\tdestroy(_Up* __p) { __p->~_Up(); }"},
{"lineNum":"   96","line":"#endif"},
{"lineNum":"   97","line":"    };"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"  /**"},
{"lineNum":"  100","line":"   * @brief  The @a standard allocator, as per [20.4]."},
{"lineNum":"  101","line":"   *"},
{"lineNum":"  102","line":"   *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator"},
{"lineNum":"  103","line":"   *  for further details."},
{"lineNum":"  104","line":"   *"},
{"lineNum":"  105","line":"   *  @tparam  _Tp  Type of allocated object."},
{"lineNum":"  106","line":"   */"},
{"lineNum":"  107","line":"  template<typename _Tp>"},
{"lineNum":"  108","line":"    class allocator: public __allocator_base<_Tp>"},
{"lineNum":"  109","line":"    {"},
{"lineNum":"  110","line":"   public:"},
{"lineNum":"  111","line":"      typedef size_t     size_type;"},
{"lineNum":"  112","line":"      typedef ptrdiff_t  difference_type;"},
{"lineNum":"  113","line":"      typedef _Tp*       pointer;"},
{"lineNum":"  114","line":"      typedef const _Tp* const_pointer;"},
{"lineNum":"  115","line":"      typedef _Tp&       reference;"},
{"lineNum":"  116","line":"      typedef const _Tp& const_reference;"},
{"lineNum":"  117","line":"      typedef _Tp        value_type;"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"      template<typename _Tp1>"},
{"lineNum":"  120","line":"\tstruct rebind"},
{"lineNum":"  121","line":"\t{ typedef allocator<_Tp1> other; };"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  124","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  125","line":"      // 2103. std::allocator propagate_on_container_move_assignment"},
{"lineNum":"  126","line":"      typedef true_type propagate_on_container_move_assignment;"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"      typedef true_type is_always_equal;"},
{"lineNum":"  129","line":"#endif"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"      allocator() throw() { }","class":"linePartCov","hits":"6","order":"176","possible_hits":"9",},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"      allocator(const allocator& __a) throw()","class":"lineCov","hits":"1","order":"771","possible_hits":"1",},
{"lineNum":"  134","line":"      : __allocator_base<_Tp>(__a) { }","class":"linePartCov","hits":"1","order":"772","possible_hits":"2",},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"      template<typename _Tp1>"},
{"lineNum":"  137","line":"\tallocator(const allocator<_Tp1>&) throw() { }","class":"linePartCov","hits":"2","order":"199","possible_hits":"3",},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"      ~allocator() throw() { }","class":"linePartCov","hits":"8","order":"255","possible_hits":"12",},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"      // Inherit everything else."},
{"lineNum":"  142","line":"    };"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"  template<typename _T1, typename _T2>"},
{"lineNum":"  145","line":"    inline bool"},
{"lineNum":"  146","line":"    operator==(const allocator<_T1>&, const allocator<_T2>&)"},
{"lineNum":"  147","line":"    _GLIBCXX_USE_NOEXCEPT"},
{"lineNum":"  148","line":"    { return true; }"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"  template<typename _Tp>"},
{"lineNum":"  151","line":"    inline bool"},
{"lineNum":"  152","line":"    operator==(const allocator<_Tp>&, const allocator<_Tp>&)"},
{"lineNum":"  153","line":"    _GLIBCXX_USE_NOEXCEPT"},
{"lineNum":"  154","line":"    { return true; }"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"  template<typename _T1, typename _T2>"},
{"lineNum":"  157","line":"    inline bool"},
{"lineNum":"  158","line":"    operator!=(const allocator<_T1>&, const allocator<_T2>&)"},
{"lineNum":"  159","line":"    _GLIBCXX_USE_NOEXCEPT"},
{"lineNum":"  160","line":"    { return false; }"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"  template<typename _Tp>"},
{"lineNum":"  163","line":"    inline bool"},
{"lineNum":"  164","line":"    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)"},
{"lineNum":"  165","line":"    _GLIBCXX_USE_NOEXCEPT"},
{"lineNum":"  166","line":"    { return false; }"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"  /// @} group allocator"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"  // Inhibit implicit instantiations for required instantiations,"},
{"lineNum":"  171","line":"  // which are defined via explicit instantiations elsewhere."},
{"lineNum":"  172","line":"#if _GLIBCXX_EXTERN_TEMPLATE"},
{"lineNum":"  173","line":"  extern template class allocator<char>;"},
{"lineNum":"  174","line":"  extern template class allocator<wchar_t>;"},
{"lineNum":"  175","line":"#endif"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"  // Undefine."},
{"lineNum":"  178","line":"#undef __allocator_base"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"  // To implement Option 3 of DR 431."},
{"lineNum":"  181","line":"  template<typename _Alloc, bool = __is_empty(_Alloc)>"},
{"lineNum":"  182","line":"    struct __alloc_swap"},
{"lineNum":"  183","line":"    { static void _S_do_it(_Alloc&, _Alloc&) _GLIBCXX_NOEXCEPT { } };"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"  template<typename _Alloc>"},
{"lineNum":"  186","line":"    struct __alloc_swap<_Alloc, false>"},
{"lineNum":"  187","line":"    {"},
{"lineNum":"  188","line":"      static void"},
{"lineNum":"  189","line":"      _S_do_it(_Alloc& __one, _Alloc& __two) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  190","line":"      {"},
{"lineNum":"  191","line":"\t// Precondition: swappable allocators."},
{"lineNum":"  192","line":"\tif (__one != __two)"},
{"lineNum":"  193","line":"\t  swap(__one, __two);"},
{"lineNum":"  194","line":"      }"},
{"lineNum":"  195","line":"    };"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"  // Optimize for stateless allocators."},
{"lineNum":"  198","line":"  template<typename _Alloc, bool = __is_empty(_Alloc)>"},
{"lineNum":"  199","line":"    struct __alloc_neq"},
{"lineNum":"  200","line":"    {"},
{"lineNum":"  201","line":"      static bool"},
{"lineNum":"  202","line":"      _S_do_it(const _Alloc&, const _Alloc&)"},
{"lineNum":"  203","line":"      { return false; }"},
{"lineNum":"  204","line":"    };"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"  template<typename _Alloc>"},
{"lineNum":"  207","line":"    struct __alloc_neq<_Alloc, false>"},
{"lineNum":"  208","line":"    {"},
{"lineNum":"  209","line":"      static bool"},
{"lineNum":"  210","line":"      _S_do_it(const _Alloc& __one, const _Alloc& __two)"},
{"lineNum":"  211","line":"      { return __one != __two; }"},
{"lineNum":"  212","line":"    };"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  215","line":"  template<typename _Tp, bool"},
{"lineNum":"  216","line":"    = __or_<is_copy_constructible<typename _Tp::value_type>,"},
{"lineNum":"  217","line":"            is_nothrow_move_constructible<typename _Tp::value_type>>::value>"},
{"lineNum":"  218","line":"    struct __shrink_to_fit_aux"},
{"lineNum":"  219","line":"    { static bool _S_do_it(_Tp&) noexcept { return false; } };"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"  template<typename _Tp>"},
{"lineNum":"  222","line":"    struct __shrink_to_fit_aux<_Tp, true>"},
{"lineNum":"  223","line":"    {"},
{"lineNum":"  224","line":"      static bool"},
{"lineNum":"  225","line":"      _S_do_it(_Tp& __c) noexcept"},
{"lineNum":"  226","line":"      {"},
{"lineNum":"  227","line":"#if __cpp_exceptions"},
{"lineNum":"  228","line":"\ttry"},
{"lineNum":"  229","line":"\t  {"},
{"lineNum":"  230","line":"\t    _Tp(__make_move_if_noexcept_iterator(__c.begin()),"},
{"lineNum":"  231","line":"\t\t__make_move_if_noexcept_iterator(__c.end()),"},
{"lineNum":"  232","line":"\t\t__c.get_allocator()).swap(__c);"},
{"lineNum":"  233","line":"\t    return true;"},
{"lineNum":"  234","line":"\t  }"},
{"lineNum":"  235","line":"\tcatch(...)"},
{"lineNum":"  236","line":"\t  { return false; }"},
{"lineNum":"  237","line":"#else"},
{"lineNum":"  238","line":"\treturn false;"},
{"lineNum":"  239","line":"#endif"},
{"lineNum":"  240","line":"      }"},
{"lineNum":"  241","line":"    };"},
{"lineNum":"  242","line":"#endif"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":"  245","line":"} // namespace std"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "mipl_parser", "date" : "2018-11-28 14:11:04", "instrumented" : 5, "covered" : 5,};
var merged_data = [];
