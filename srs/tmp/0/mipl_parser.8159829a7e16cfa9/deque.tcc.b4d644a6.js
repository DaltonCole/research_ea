var data = {lines:[
{"lineNum":"    1","line":"// Deque implementation (out of line) -*- C++ -*-"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 2001-2017 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This file is part of the GNU ISO C++ Library.  This library is free"},
{"lineNum":"    6","line":"// software; you can redistribute it and/or modify it under the"},
{"lineNum":"    7","line":"// terms of the GNU General Public License as published by the"},
{"lineNum":"    8","line":"// Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    9","line":"// any later version."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// This library is distributed in the hope that it will be useful,"},
{"lineNum":"   12","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   13","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   14","line":"// GNU General Public License for more details."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   17","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   18","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   21","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   22","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   23","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/*"},
{"lineNum":"   26","line":" *"},
{"lineNum":"   27","line":" * Copyright (c) 1994"},
{"lineNum":"   28","line":" * Hewlett-Packard Company"},
{"lineNum":"   29","line":" *"},
{"lineNum":"   30","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   31","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   32","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   33","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   34","line":" * in supporting documentation.  Hewlett-Packard Company makes no"},
{"lineNum":"   35","line":" * representations about the suitability of this software for any"},
{"lineNum":"   36","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   37","line":" *"},
{"lineNum":"   38","line":" *"},
{"lineNum":"   39","line":" * Copyright (c) 1997"},
{"lineNum":"   40","line":" * Silicon Graphics Computer Systems, Inc."},
{"lineNum":"   41","line":" *"},
{"lineNum":"   42","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   43","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   44","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   45","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   46","line":" * in supporting documentation.  Silicon Graphics makes no"},
{"lineNum":"   47","line":" * representations about the suitability of this software for any"},
{"lineNum":"   48","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   49","line":" */"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"/** @file bits/deque.tcc"},
{"lineNum":"   52","line":" *  This is an internal header file, included by other library headers."},
{"lineNum":"   53","line":" *  Do not attempt to use it directly. @headername{deque}"},
{"lineNum":"   54","line":" */"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"#ifndef _DEQUE_TCC"},
{"lineNum":"   57","line":"#define _DEQUE_TCC 1"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   60","line":"{"},
{"lineNum":"   61","line":"_GLIBCXX_BEGIN_NAMESPACE_CONTAINER"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   64","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"   65","line":"    void"},
{"lineNum":"   66","line":"    deque<_Tp, _Alloc>::"},
{"lineNum":"   67","line":"    _M_default_initialize()"},
{"lineNum":"   68","line":"    {"},
{"lineNum":"   69","line":"      _Map_pointer __cur;"},
{"lineNum":"   70","line":"      __try"},
{"lineNum":"   71","line":"        {"},
{"lineNum":"   72","line":"          for (__cur = this->_M_impl._M_start._M_node;"},
{"lineNum":"   73","line":"\t       __cur < this->_M_impl._M_finish._M_node;"},
{"lineNum":"   74","line":"\t       ++__cur)"},
{"lineNum":"   75","line":"            std::__uninitialized_default_a(*__cur, *__cur + _S_buffer_size(),"},
{"lineNum":"   76","line":"\t\t\t\t\t   _M_get_Tp_allocator());"},
{"lineNum":"   77","line":"          std::__uninitialized_default_a(this->_M_impl._M_finish._M_first,"},
{"lineNum":"   78","line":"\t\t\t\t\t this->_M_impl._M_finish._M_cur,"},
{"lineNum":"   79","line":"\t\t\t\t\t _M_get_Tp_allocator());"},
{"lineNum":"   80","line":"        }"},
{"lineNum":"   81","line":"      __catch(...)"},
{"lineNum":"   82","line":"        {"},
{"lineNum":"   83","line":"          std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),"},
{"lineNum":"   84","line":"\t\t\t_M_get_Tp_allocator());"},
{"lineNum":"   85","line":"          __throw_exception_again;"},
{"lineNum":"   86","line":"        }"},
{"lineNum":"   87","line":"    }"},
{"lineNum":"   88","line":"#endif"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"   91","line":"    deque<_Tp, _Alloc>&"},
{"lineNum":"   92","line":"    deque<_Tp, _Alloc>::"},
{"lineNum":"   93","line":"    operator=(const deque& __x)"},
{"lineNum":"   94","line":"    {"},
{"lineNum":"   95","line":"      if (&__x != this)"},
{"lineNum":"   96","line":"\t{"},
{"lineNum":"   97","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   98","line":"\t  if (_Alloc_traits::_S_propagate_on_copy_assign())"},
{"lineNum":"   99","line":"\t    {"},
{"lineNum":"  100","line":"\t      if (!_Alloc_traits::_S_always_equal()"},
{"lineNum":"  101","line":"\t          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())"},
{"lineNum":"  102","line":"\t        {"},
{"lineNum":"  103","line":"\t\t  // Replacement allocator cannot free existing storage,"},
{"lineNum":"  104","line":"\t\t  // so deallocate everything and take copy of __x\'s data."},
{"lineNum":"  105","line":"\t\t  _M_replace_map(__x, __x.get_allocator());"},
{"lineNum":"  106","line":"\t\t  std::__alloc_on_copy(_M_get_Tp_allocator(),"},
{"lineNum":"  107","line":"\t\t\t\t       __x._M_get_Tp_allocator());"},
{"lineNum":"  108","line":"\t\t  return *this;"},
{"lineNum":"  109","line":"\t\t}"},
{"lineNum":"  110","line":"\t      std::__alloc_on_copy(_M_get_Tp_allocator(),"},
{"lineNum":"  111","line":"\t\t\t\t   __x._M_get_Tp_allocator());"},
{"lineNum":"  112","line":"\t    }"},
{"lineNum":"  113","line":"#endif"},
{"lineNum":"  114","line":"\t  const size_type __len = size();"},
{"lineNum":"  115","line":"\t  if (__len >= __x.size())"},
{"lineNum":"  116","line":"\t    _M_erase_at_end(std::copy(__x.begin(), __x.end(),"},
{"lineNum":"  117","line":"\t\t\t\t      this->_M_impl._M_start));"},
{"lineNum":"  118","line":"\t  else"},
{"lineNum":"  119","line":"\t    {"},
{"lineNum":"  120","line":"\t      const_iterator __mid = __x.begin() + difference_type(__len);"},
{"lineNum":"  121","line":"\t      std::copy(__x.begin(), __mid, this->_M_impl._M_start);"},
{"lineNum":"  122","line":"\t      _M_range_insert_aux(this->_M_impl._M_finish, __mid, __x.end(),"},
{"lineNum":"  123","line":"\t\t\t\t  std::random_access_iterator_tag());"},
{"lineNum":"  124","line":"\t    }"},
{"lineNum":"  125","line":"\t}"},
{"lineNum":"  126","line":"      return *this;"},
{"lineNum":"  127","line":"    }"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  130","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  131","line":"    template<typename... _Args>"},
{"lineNum":"  132","line":"#if __cplusplus > 201402L"},
{"lineNum":"  133","line":"      typename deque<_Tp, _Alloc>::reference"},
{"lineNum":"  134","line":"#else"},
{"lineNum":"  135","line":"      void"},
{"lineNum":"  136","line":"#endif"},
{"lineNum":"  137","line":"      deque<_Tp, _Alloc>::"},
{"lineNum":"  138","line":"      emplace_front(_Args&&... __args)"},
{"lineNum":"  139","line":"      {"},
{"lineNum":"  140","line":"\tif (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)"},
{"lineNum":"  141","line":"\t  {"},
{"lineNum":"  142","line":"\t    _Alloc_traits::construct(this->_M_impl,"},
{"lineNum":"  143","line":"\t                             this->_M_impl._M_start._M_cur - 1,"},
{"lineNum":"  144","line":"\t\t\t             std::forward<_Args>(__args)...);"},
{"lineNum":"  145","line":"\t    --this->_M_impl._M_start._M_cur;"},
{"lineNum":"  146","line":"\t  }"},
{"lineNum":"  147","line":"\telse"},
{"lineNum":"  148","line":"\t  _M_push_front_aux(std::forward<_Args>(__args)...);"},
{"lineNum":"  149","line":"#if __cplusplus > 201402L"},
{"lineNum":"  150","line":"\treturn front();"},
{"lineNum":"  151","line":"#endif"},
{"lineNum":"  152","line":"      }"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  155","line":"    template<typename... _Args>"},
{"lineNum":"  156","line":"#if __cplusplus > 201402L"},
{"lineNum":"  157","line":"      typename deque<_Tp, _Alloc>::reference"},
{"lineNum":"  158","line":"#else"},
{"lineNum":"  159","line":"      void"},
{"lineNum":"  160","line":"#endif"},
{"lineNum":"  161","line":"      deque<_Tp, _Alloc>::","class":"lineCov","hits":"1","order":"756","possible_hits":"1",},
{"lineNum":"  162","line":"      emplace_back(_Args&&... __args)"},
{"lineNum":"  163","line":"      {"},
{"lineNum":"  164","line":"\tif (this->_M_impl._M_finish._M_cur","class":"lineCov","hits":"2","order":"757","possible_hits":"2",},
{"lineNum":"  165","line":"\t    != this->_M_impl._M_finish._M_last - 1)","class":"lineCov","hits":"1","order":"758","possible_hits":"1",},
{"lineNum":"  166","line":"\t  {"},
{"lineNum":"  167","line":"\t    _Alloc_traits::construct(this->_M_impl,","class":"lineCov","hits":"1","order":"759","possible_hits":"1",},
{"lineNum":"  168","line":"\t                             this->_M_impl._M_finish._M_cur,"},
{"lineNum":"  169","line":"\t\t\t             std::forward<_Args>(__args)...);"},
{"lineNum":"  170","line":"\t    ++this->_M_impl._M_finish._M_cur;","class":"lineCov","hits":"1","order":"781","possible_hits":"1",},
{"lineNum":"  171","line":"\t  }"},
{"lineNum":"  172","line":"\telse"},
{"lineNum":"  173","line":"\t  _M_push_back_aux(std::forward<_Args>(__args)...);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"#if __cplusplus > 201402L"},
{"lineNum":"  175","line":"\treturn back();"},
{"lineNum":"  176","line":"#endif"},
{"lineNum":"  177","line":"      }","class":"linePartCov","hits":"2","order":"782","possible_hits":"3",},
{"lineNum":"  178","line":"#endif"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  181","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  182","line":"    template<typename... _Args>"},
{"lineNum":"  183","line":"      typename deque<_Tp, _Alloc>::iterator"},
{"lineNum":"  184","line":"      deque<_Tp, _Alloc>::"},
{"lineNum":"  185","line":"      emplace(const_iterator __position, _Args&&... __args)"},
{"lineNum":"  186","line":"      {"},
{"lineNum":"  187","line":"\tif (__position._M_cur == this->_M_impl._M_start._M_cur)"},
{"lineNum":"  188","line":"\t  {"},
{"lineNum":"  189","line":"\t    emplace_front(std::forward<_Args>(__args)...);"},
{"lineNum":"  190","line":"\t    return this->_M_impl._M_start;"},
{"lineNum":"  191","line":"\t  }"},
{"lineNum":"  192","line":"\telse if (__position._M_cur == this->_M_impl._M_finish._M_cur)"},
{"lineNum":"  193","line":"\t  {"},
{"lineNum":"  194","line":"\t    emplace_back(std::forward<_Args>(__args)...);"},
{"lineNum":"  195","line":"\t    iterator __tmp = this->_M_impl._M_finish;"},
{"lineNum":"  196","line":"\t    --__tmp;"},
{"lineNum":"  197","line":"\t    return __tmp;"},
{"lineNum":"  198","line":"\t  }"},
{"lineNum":"  199","line":"\telse"},
{"lineNum":"  200","line":"\t  return _M_insert_aux(__position._M_const_cast(),"},
{"lineNum":"  201","line":"\t\t\t       std::forward<_Args>(__args)...);"},
{"lineNum":"  202","line":"      }"},
{"lineNum":"  203","line":"#endif"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  206","line":"    typename deque<_Tp, _Alloc>::iterator"},
{"lineNum":"  207","line":"    deque<_Tp, _Alloc>::"},
{"lineNum":"  208","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  209","line":"    insert(const_iterator __position, const value_type& __x)"},
{"lineNum":"  210","line":"#else"},
{"lineNum":"  211","line":"    insert(iterator __position, const value_type& __x)"},
{"lineNum":"  212","line":"#endif"},
{"lineNum":"  213","line":"    {"},
{"lineNum":"  214","line":"      if (__position._M_cur == this->_M_impl._M_start._M_cur)"},
{"lineNum":"  215","line":"\t{"},
{"lineNum":"  216","line":"\t  push_front(__x);"},
{"lineNum":"  217","line":"\t  return this->_M_impl._M_start;"},
{"lineNum":"  218","line":"\t}"},
{"lineNum":"  219","line":"      else if (__position._M_cur == this->_M_impl._M_finish._M_cur)"},
{"lineNum":"  220","line":"\t{"},
{"lineNum":"  221","line":"\t  push_back(__x);"},
{"lineNum":"  222","line":"\t  iterator __tmp = this->_M_impl._M_finish;"},
{"lineNum":"  223","line":"\t  --__tmp;"},
{"lineNum":"  224","line":"\t  return __tmp;"},
{"lineNum":"  225","line":"\t}"},
{"lineNum":"  226","line":"      else"},
{"lineNum":"  227","line":"\treturn _M_insert_aux(__position._M_const_cast(), __x);"},
{"lineNum":"  228","line":"   }"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  231","line":"    typename deque<_Tp, _Alloc>::iterator"},
{"lineNum":"  232","line":"    deque<_Tp, _Alloc>::"},
{"lineNum":"  233","line":"    _M_erase(iterator __position)"},
{"lineNum":"  234","line":"    {"},
{"lineNum":"  235","line":"      iterator __next = __position;"},
{"lineNum":"  236","line":"      ++__next;"},
{"lineNum":"  237","line":"      const difference_type __index = __position - begin();"},
{"lineNum":"  238","line":"      if (static_cast<size_type>(__index) < (size() >> 1))"},
{"lineNum":"  239","line":"\t{"},
{"lineNum":"  240","line":"\t  if (__position != begin())"},
{"lineNum":"  241","line":"\t    _GLIBCXX_MOVE_BACKWARD3(begin(), __position, __next);"},
{"lineNum":"  242","line":"\t  pop_front();"},
{"lineNum":"  243","line":"\t}"},
{"lineNum":"  244","line":"      else"},
{"lineNum":"  245","line":"\t{"},
{"lineNum":"  246","line":"\t  if (__next != end())"},
{"lineNum":"  247","line":"\t    _GLIBCXX_MOVE3(__next, end(), __position);"},
{"lineNum":"  248","line":"\t  pop_back();"},
{"lineNum":"  249","line":"\t}"},
{"lineNum":"  250","line":"      return begin() + __index;"},
{"lineNum":"  251","line":"    }"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  254","line":"    typename deque<_Tp, _Alloc>::iterator"},
{"lineNum":"  255","line":"    deque<_Tp, _Alloc>::"},
{"lineNum":"  256","line":"    _M_erase(iterator __first, iterator __last)"},
{"lineNum":"  257","line":"    {"},
{"lineNum":"  258","line":"      if (__first == __last)"},
{"lineNum":"  259","line":"\treturn __first;"},
{"lineNum":"  260","line":"      else if (__first == begin() && __last == end())"},
{"lineNum":"  261","line":"\t{"},
{"lineNum":"  262","line":"\t  clear();"},
{"lineNum":"  263","line":"\t  return end();"},
{"lineNum":"  264","line":"\t}"},
{"lineNum":"  265","line":"      else"},
{"lineNum":"  266","line":"\t{"},
{"lineNum":"  267","line":"\t  const difference_type __n = __last - __first;"},
{"lineNum":"  268","line":"\t  const difference_type __elems_before = __first - begin();"},
{"lineNum":"  269","line":"\t  if (static_cast<size_type>(__elems_before) <= (size() - __n) / 2)"},
{"lineNum":"  270","line":"\t    {"},
{"lineNum":"  271","line":"\t      if (__first != begin())"},
{"lineNum":"  272","line":"\t\t_GLIBCXX_MOVE_BACKWARD3(begin(), __first, __last);"},
{"lineNum":"  273","line":"\t      _M_erase_at_begin(begin() + __n);"},
{"lineNum":"  274","line":"\t    }"},
{"lineNum":"  275","line":"\t  else"},
{"lineNum":"  276","line":"\t    {"},
{"lineNum":"  277","line":"\t      if (__last != end())"},
{"lineNum":"  278","line":"\t\t_GLIBCXX_MOVE3(__last, end(), __first);"},
{"lineNum":"  279","line":"\t      _M_erase_at_end(end() - __n);"},
{"lineNum":"  280","line":"\t    }"},
{"lineNum":"  281","line":"\t  return begin() + __elems_before;"},
{"lineNum":"  282","line":"\t}"},
{"lineNum":"  283","line":"    }"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"  template <typename _Tp, class _Alloc>"},
{"lineNum":"  286","line":"    template <typename _InputIterator>"},
{"lineNum":"  287","line":"      void"},
{"lineNum":"  288","line":"      deque<_Tp, _Alloc>::"},
{"lineNum":"  289","line":"      _M_assign_aux(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  290","line":"\t\t    std::input_iterator_tag)"},
{"lineNum":"  291","line":"      {"},
{"lineNum":"  292","line":"        iterator __cur = begin();"},
{"lineNum":"  293","line":"        for (; __first != __last && __cur != end(); ++__cur, ++__first)"},
{"lineNum":"  294","line":"          *__cur = *__first;"},
{"lineNum":"  295","line":"        if (__first == __last)"},
{"lineNum":"  296","line":"          _M_erase_at_end(__cur);"},
{"lineNum":"  297","line":"        else"},
{"lineNum":"  298","line":"          _M_range_insert_aux(end(), __first, __last,"},
{"lineNum":"  299","line":"\t\t\t      std::__iterator_category(__first));"},
{"lineNum":"  300","line":"      }"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  303","line":"    void"},
{"lineNum":"  304","line":"    deque<_Tp, _Alloc>::"},
{"lineNum":"  305","line":"    _M_fill_insert(iterator __pos, size_type __n, const value_type& __x)"},
{"lineNum":"  306","line":"    {"},
{"lineNum":"  307","line":"      if (__pos._M_cur == this->_M_impl._M_start._M_cur)"},
{"lineNum":"  308","line":"\t{"},
{"lineNum":"  309","line":"\t  iterator __new_start = _M_reserve_elements_at_front(__n);"},
{"lineNum":"  310","line":"\t  __try"},
{"lineNum":"  311","line":"\t    {"},
{"lineNum":"  312","line":"\t      std::__uninitialized_fill_a(__new_start, this->_M_impl._M_start,"},
{"lineNum":"  313","line":"\t\t\t\t\t  __x, _M_get_Tp_allocator());"},
{"lineNum":"  314","line":"\t      this->_M_impl._M_start = __new_start;"},
{"lineNum":"  315","line":"\t    }"},
{"lineNum":"  316","line":"\t  __catch(...)"},
{"lineNum":"  317","line":"\t    {"},
{"lineNum":"  318","line":"\t      _M_destroy_nodes(__new_start._M_node,"},
{"lineNum":"  319","line":"\t\t\t       this->_M_impl._M_start._M_node);"},
{"lineNum":"  320","line":"\t      __throw_exception_again;"},
{"lineNum":"  321","line":"\t    }"},
{"lineNum":"  322","line":"\t}"},
{"lineNum":"  323","line":"      else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)"},
{"lineNum":"  324","line":"\t{"},
{"lineNum":"  325","line":"\t  iterator __new_finish = _M_reserve_elements_at_back(__n);"},
{"lineNum":"  326","line":"\t  __try"},
{"lineNum":"  327","line":"\t    {"},
{"lineNum":"  328","line":"\t      std::__uninitialized_fill_a(this->_M_impl._M_finish,"},
{"lineNum":"  329","line":"\t\t\t\t\t  __new_finish, __x,"},
{"lineNum":"  330","line":"\t\t\t\t\t  _M_get_Tp_allocator());"},
{"lineNum":"  331","line":"\t      this->_M_impl._M_finish = __new_finish;"},
{"lineNum":"  332","line":"\t    }"},
{"lineNum":"  333","line":"\t  __catch(...)"},
{"lineNum":"  334","line":"\t    {"},
{"lineNum":"  335","line":"\t      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,"},
{"lineNum":"  336","line":"\t\t\t       __new_finish._M_node + 1);"},
{"lineNum":"  337","line":"\t      __throw_exception_again;"},
{"lineNum":"  338","line":"\t    }"},
{"lineNum":"  339","line":"\t}"},
{"lineNum":"  340","line":"      else"},
{"lineNum":"  341","line":"        _M_insert_aux(__pos, __n, __x);"},
{"lineNum":"  342","line":"    }"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  345","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  346","line":"    void"},
{"lineNum":"  347","line":"    deque<_Tp, _Alloc>::"},
{"lineNum":"  348","line":"    _M_default_append(size_type __n)"},
{"lineNum":"  349","line":"    {"},
{"lineNum":"  350","line":"      if (__n)"},
{"lineNum":"  351","line":"\t{"},
{"lineNum":"  352","line":"\t  iterator __new_finish = _M_reserve_elements_at_back(__n);"},
{"lineNum":"  353","line":"\t  __try"},
{"lineNum":"  354","line":"\t    {"},
{"lineNum":"  355","line":"\t      std::__uninitialized_default_a(this->_M_impl._M_finish,"},
{"lineNum":"  356","line":"\t\t\t\t\t     __new_finish,"},
{"lineNum":"  357","line":"\t\t\t\t\t     _M_get_Tp_allocator());"},
{"lineNum":"  358","line":"\t      this->_M_impl._M_finish = __new_finish;"},
{"lineNum":"  359","line":"\t    }"},
{"lineNum":"  360","line":"\t  __catch(...)"},
{"lineNum":"  361","line":"\t    {"},
{"lineNum":"  362","line":"\t      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,"},
{"lineNum":"  363","line":"\t\t\t       __new_finish._M_node + 1);"},
{"lineNum":"  364","line":"\t      __throw_exception_again;"},
{"lineNum":"  365","line":"\t    }"},
{"lineNum":"  366","line":"\t}"},
{"lineNum":"  367","line":"    }"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  370","line":"    bool"},
{"lineNum":"  371","line":"    deque<_Tp, _Alloc>::"},
{"lineNum":"  372","line":"    _M_shrink_to_fit()"},
{"lineNum":"  373","line":"    {"},
{"lineNum":"  374","line":"      const difference_type __front_capacity"},
{"lineNum":"  375","line":"\t= (this->_M_impl._M_start._M_cur - this->_M_impl._M_start._M_first);"},
{"lineNum":"  376","line":"      if (__front_capacity == 0)"},
{"lineNum":"  377","line":"\treturn false;"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"      const difference_type __back_capacity"},
{"lineNum":"  380","line":"\t= (this->_M_impl._M_finish._M_last - this->_M_impl._M_finish._M_cur);"},
{"lineNum":"  381","line":"      if (__front_capacity + __back_capacity < _S_buffer_size())"},
{"lineNum":"  382","line":"\treturn false;"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"      return std::__shrink_to_fit_aux<deque>::_S_do_it(*this);"},
{"lineNum":"  385","line":"    }"},
{"lineNum":"  386","line":"#endif"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  389","line":"    void"},
{"lineNum":"  390","line":"    deque<_Tp, _Alloc>::"},
{"lineNum":"  391","line":"    _M_fill_initialize(const value_type& __value)"},
{"lineNum":"  392","line":"    {"},
{"lineNum":"  393","line":"      _Map_pointer __cur;"},
{"lineNum":"  394","line":"      __try"},
{"lineNum":"  395","line":"        {"},
{"lineNum":"  396","line":"          for (__cur = this->_M_impl._M_start._M_node;"},
{"lineNum":"  397","line":"\t       __cur < this->_M_impl._M_finish._M_node;"},
{"lineNum":"  398","line":"\t       ++__cur)"},
{"lineNum":"  399","line":"            std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(),"},
{"lineNum":"  400","line":"\t\t\t\t\t__value, _M_get_Tp_allocator());"},
{"lineNum":"  401","line":"          std::__uninitialized_fill_a(this->_M_impl._M_finish._M_first,"},
{"lineNum":"  402","line":"\t\t\t\t      this->_M_impl._M_finish._M_cur,"},
{"lineNum":"  403","line":"\t\t\t\t      __value, _M_get_Tp_allocator());"},
{"lineNum":"  404","line":"        }"},
{"lineNum":"  405","line":"      __catch(...)"},
{"lineNum":"  406","line":"        {"},
{"lineNum":"  407","line":"          std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),"},
{"lineNum":"  408","line":"\t\t\t_M_get_Tp_allocator());"},
{"lineNum":"  409","line":"          __throw_exception_again;"},
{"lineNum":"  410","line":"        }"},
{"lineNum":"  411","line":"    }"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  414","line":"    template <typename _InputIterator>"},
{"lineNum":"  415","line":"      void"},
{"lineNum":"  416","line":"      deque<_Tp, _Alloc>::"},
{"lineNum":"  417","line":"      _M_range_initialize(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  418","line":"                          std::input_iterator_tag)"},
{"lineNum":"  419","line":"      {"},
{"lineNum":"  420","line":"        this->_M_initialize_map(0);"},
{"lineNum":"  421","line":"        __try"},
{"lineNum":"  422","line":"          {"},
{"lineNum":"  423","line":"            for (; __first != __last; ++__first)"},
{"lineNum":"  424","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  425","line":"\t      emplace_back(*__first);"},
{"lineNum":"  426","line":"#else"},
{"lineNum":"  427","line":"              push_back(*__first);"},
{"lineNum":"  428","line":"#endif"},
{"lineNum":"  429","line":"          }"},
{"lineNum":"  430","line":"        __catch(...)"},
{"lineNum":"  431","line":"          {"},
{"lineNum":"  432","line":"            clear();"},
{"lineNum":"  433","line":"            __throw_exception_again;"},
{"lineNum":"  434","line":"          }"},
{"lineNum":"  435","line":"      }"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  438","line":"    template <typename _ForwardIterator>"},
{"lineNum":"  439","line":"      void"},
{"lineNum":"  440","line":"      deque<_Tp, _Alloc>::"},
{"lineNum":"  441","line":"      _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":"  442","line":"                          std::forward_iterator_tag)"},
{"lineNum":"  443","line":"      {"},
{"lineNum":"  444","line":"        const size_type __n = std::distance(__first, __last);"},
{"lineNum":"  445","line":"        this->_M_initialize_map(__n);"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"        _Map_pointer __cur_node;"},
{"lineNum":"  448","line":"        __try"},
{"lineNum":"  449","line":"          {"},
{"lineNum":"  450","line":"            for (__cur_node = this->_M_impl._M_start._M_node;"},
{"lineNum":"  451","line":"                 __cur_node < this->_M_impl._M_finish._M_node;"},
{"lineNum":"  452","line":"                 ++__cur_node)"},
{"lineNum":"  453","line":"\t      {"},
{"lineNum":"  454","line":"\t\t_ForwardIterator __mid = __first;"},
{"lineNum":"  455","line":"\t\tstd::advance(__mid, _S_buffer_size());"},
{"lineNum":"  456","line":"\t\tstd::__uninitialized_copy_a(__first, __mid, *__cur_node,"},
{"lineNum":"  457","line":"\t\t\t\t\t    _M_get_Tp_allocator());"},
{"lineNum":"  458","line":"\t\t__first = __mid;"},
{"lineNum":"  459","line":"\t      }"},
{"lineNum":"  460","line":"            std::__uninitialized_copy_a(__first, __last,"},
{"lineNum":"  461","line":"\t\t\t\t\tthis->_M_impl._M_finish._M_first,"},
{"lineNum":"  462","line":"\t\t\t\t\t_M_get_Tp_allocator());"},
{"lineNum":"  463","line":"          }"},
{"lineNum":"  464","line":"        __catch(...)"},
{"lineNum":"  465","line":"          {"},
{"lineNum":"  466","line":"            std::_Destroy(this->_M_impl._M_start,"},
{"lineNum":"  467","line":"\t\t\t  iterator(*__cur_node, __cur_node),"},
{"lineNum":"  468","line":"\t\t\t  _M_get_Tp_allocator());"},
{"lineNum":"  469","line":"            __throw_exception_again;"},
{"lineNum":"  470","line":"          }"},
{"lineNum":"  471","line":"      }"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1."},
{"lineNum":"  474","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  475","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  476","line":"    template<typename... _Args>"},
{"lineNum":"  477","line":"      void"},
{"lineNum":"  478","line":"      deque<_Tp, _Alloc>::","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  479","line":"      _M_push_back_aux(_Args&&... __args)"},
{"lineNum":"  480","line":"#else"},
{"lineNum":"  481","line":"      void"},
{"lineNum":"  482","line":"      deque<_Tp, _Alloc>::"},
{"lineNum":"  483","line":"      _M_push_back_aux(const value_type& __t)"},
{"lineNum":"  484","line":"#endif"},
{"lineNum":"  485","line":"      {"},
{"lineNum":"  486","line":"\t_M_reserve_map_at_back();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  487","line":"\t*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  488","line":"\t__try"},
{"lineNum":"  489","line":"\t  {"},
{"lineNum":"  490","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  491","line":"\t    _Alloc_traits::construct(this->_M_impl,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  492","line":"\t                             this->_M_impl._M_finish._M_cur,"},
{"lineNum":"  493","line":"\t\t\t             std::forward<_Args>(__args)...);"},
{"lineNum":"  494","line":"#else"},
{"lineNum":"  495","line":"\t    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);"},
{"lineNum":"  496","line":"#endif"},
{"lineNum":"  497","line":"\t    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  498","line":"\t\t\t\t\t\t+ 1);"},
{"lineNum":"  499","line":"\t    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  500","line":"\t  }"},
{"lineNum":"  501","line":"\t__catch(...)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  502","line":"\t  {"},
{"lineNum":"  503","line":"\t    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  504","line":"\t    __throw_exception_again;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  505","line":"\t  }"},
{"lineNum":"  506","line":"      }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"  // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first."},
{"lineNum":"  509","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  510","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  511","line":"    template<typename... _Args>"},
{"lineNum":"  512","line":"      void"},
{"lineNum":"  513","line":"      deque<_Tp, _Alloc>::"},
{"lineNum":"  514","line":"      _M_push_front_aux(_Args&&... __args)"},
{"lineNum":"  515","line":"#else"},
{"lineNum":"  516","line":"      void"},
{"lineNum":"  517","line":"      deque<_Tp, _Alloc>::"},
{"lineNum":"  518","line":"      _M_push_front_aux(const value_type& __t)"},
{"lineNum":"  519","line":"#endif"},
{"lineNum":"  520","line":"      {"},
{"lineNum":"  521","line":"\t_M_reserve_map_at_front();"},
{"lineNum":"  522","line":"\t*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();"},
{"lineNum":"  523","line":"\t__try"},
{"lineNum":"  524","line":"\t  {"},
{"lineNum":"  525","line":"\t    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node"},
{"lineNum":"  526","line":"\t\t\t\t\t       - 1);"},
{"lineNum":"  527","line":"\t    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;"},
{"lineNum":"  528","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  529","line":"\t    _Alloc_traits::construct(this->_M_impl,"},
{"lineNum":"  530","line":"\t                             this->_M_impl._M_start._M_cur,"},
{"lineNum":"  531","line":"\t\t\t             std::forward<_Args>(__args)...);"},
{"lineNum":"  532","line":"#else"},
{"lineNum":"  533","line":"\t    this->_M_impl.construct(this->_M_impl._M_start._M_cur, __t);"},
{"lineNum":"  534","line":"#endif"},
{"lineNum":"  535","line":"\t  }"},
{"lineNum":"  536","line":"\t__catch(...)"},
{"lineNum":"  537","line":"\t  {"},
{"lineNum":"  538","line":"\t    ++this->_M_impl._M_start;"},
{"lineNum":"  539","line":"\t    _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));"},
{"lineNum":"  540","line":"\t    __throw_exception_again;"},
{"lineNum":"  541","line":"\t  }"},
{"lineNum":"  542","line":"      }"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first."},
{"lineNum":"  545","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  546","line":"    void deque<_Tp, _Alloc>::","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  547","line":"    _M_pop_back_aux()"},
{"lineNum":"  548","line":"    {"},
{"lineNum":"  549","line":"      _M_deallocate_node(this->_M_impl._M_finish._M_first);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  550","line":"      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  551","line":"      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  552","line":"      _Alloc_traits::destroy(_M_get_Tp_allocator(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  553","line":"\t\t\t     this->_M_impl._M_finish._M_cur);"},
{"lineNum":"  554","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"  // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_last - 1."},
{"lineNum":"  557","line":"  // Note that if the deque has at least one element (a precondition for this"},
{"lineNum":"  558","line":"  // member function), and if"},
{"lineNum":"  559","line":"  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,"},
{"lineNum":"  560","line":"  // then the deque must have at least two nodes."},
{"lineNum":"  561","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  562","line":"    void deque<_Tp, _Alloc>::"},
{"lineNum":"  563","line":"    _M_pop_front_aux()"},
{"lineNum":"  564","line":"    {"},
{"lineNum":"  565","line":"      _Alloc_traits::destroy(_M_get_Tp_allocator(),"},
{"lineNum":"  566","line":"\t\t\t     this->_M_impl._M_start._M_cur);"},
{"lineNum":"  567","line":"      _M_deallocate_node(this->_M_impl._M_start._M_first);"},
{"lineNum":"  568","line":"      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);"},
{"lineNum":"  569","line":"      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;"},
{"lineNum":"  570","line":"    }"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  573","line":"    template <typename _InputIterator>"},
{"lineNum":"  574","line":"      void"},
{"lineNum":"  575","line":"      deque<_Tp, _Alloc>::"},
{"lineNum":"  576","line":"      _M_range_insert_aux(iterator __pos,"},
{"lineNum":"  577","line":"                          _InputIterator __first, _InputIterator __last,"},
{"lineNum":"  578","line":"                          std::input_iterator_tag)"},
{"lineNum":"  579","line":"      { std::copy(__first, __last, std::inserter(*this, __pos)); }"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  582","line":"    template <typename _ForwardIterator>"},
{"lineNum":"  583","line":"      void"},
{"lineNum":"  584","line":"      deque<_Tp, _Alloc>::"},
{"lineNum":"  585","line":"      _M_range_insert_aux(iterator __pos,"},
{"lineNum":"  586","line":"                          _ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":"  587","line":"                          std::forward_iterator_tag)"},
{"lineNum":"  588","line":"      {"},
{"lineNum":"  589","line":"        const size_type __n = std::distance(__first, __last);"},
{"lineNum":"  590","line":"        if (__pos._M_cur == this->_M_impl._M_start._M_cur)"},
{"lineNum":"  591","line":"\t  {"},
{"lineNum":"  592","line":"\t    iterator __new_start = _M_reserve_elements_at_front(__n);"},
{"lineNum":"  593","line":"\t    __try"},
{"lineNum":"  594","line":"\t      {"},
{"lineNum":"  595","line":"\t\tstd::__uninitialized_copy_a(__first, __last, __new_start,"},
{"lineNum":"  596","line":"\t\t\t\t\t    _M_get_Tp_allocator());"},
{"lineNum":"  597","line":"\t\tthis->_M_impl._M_start = __new_start;"},
{"lineNum":"  598","line":"\t      }"},
{"lineNum":"  599","line":"\t    __catch(...)"},
{"lineNum":"  600","line":"\t      {"},
{"lineNum":"  601","line":"\t\t_M_destroy_nodes(__new_start._M_node,"},
{"lineNum":"  602","line":"\t\t\t\t this->_M_impl._M_start._M_node);"},
{"lineNum":"  603","line":"\t\t__throw_exception_again;"},
{"lineNum":"  604","line":"\t      }"},
{"lineNum":"  605","line":"\t  }"},
{"lineNum":"  606","line":"        else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)"},
{"lineNum":"  607","line":"\t  {"},
{"lineNum":"  608","line":"\t    iterator __new_finish = _M_reserve_elements_at_back(__n);"},
{"lineNum":"  609","line":"\t    __try"},
{"lineNum":"  610","line":"\t      {"},
{"lineNum":"  611","line":"\t\tstd::__uninitialized_copy_a(__first, __last,"},
{"lineNum":"  612","line":"\t\t\t\t\t    this->_M_impl._M_finish,"},
{"lineNum":"  613","line":"\t\t\t\t\t    _M_get_Tp_allocator());"},
{"lineNum":"  614","line":"\t\tthis->_M_impl._M_finish = __new_finish;"},
{"lineNum":"  615","line":"\t      }"},
{"lineNum":"  616","line":"\t    __catch(...)"},
{"lineNum":"  617","line":"\t      {"},
{"lineNum":"  618","line":"\t\t_M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,"},
{"lineNum":"  619","line":"\t\t\t\t __new_finish._M_node + 1);"},
{"lineNum":"  620","line":"\t\t__throw_exception_again;"},
{"lineNum":"  621","line":"\t      }"},
{"lineNum":"  622","line":"\t  }"},
{"lineNum":"  623","line":"        else"},
{"lineNum":"  624","line":"          _M_insert_aux(__pos, __first, __last, __n);"},
{"lineNum":"  625","line":"      }"},
{"lineNum":"  626","line":""},
{"lineNum":"  627","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  628","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  629","line":"    template<typename... _Args>"},
{"lineNum":"  630","line":"      typename deque<_Tp, _Alloc>::iterator"},
{"lineNum":"  631","line":"      deque<_Tp, _Alloc>::"},
{"lineNum":"  632","line":"      _M_insert_aux(iterator __pos, _Args&&... __args)"},
{"lineNum":"  633","line":"      {"},
{"lineNum":"  634","line":"\tvalue_type __x_copy(std::forward<_Args>(__args)...); // XXX copy"},
{"lineNum":"  635","line":"#else"},
{"lineNum":"  636","line":"    typename deque<_Tp, _Alloc>::iterator"},
{"lineNum":"  637","line":"      deque<_Tp, _Alloc>::"},
{"lineNum":"  638","line":"      _M_insert_aux(iterator __pos, const value_type& __x)"},
{"lineNum":"  639","line":"      {"},
{"lineNum":"  640","line":"\tvalue_type __x_copy = __x; // XXX copy"},
{"lineNum":"  641","line":"#endif"},
{"lineNum":"  642","line":"\tdifference_type __index = __pos - this->_M_impl._M_start;"},
{"lineNum":"  643","line":"\tif (static_cast<size_type>(__index) < size() / 2)"},
{"lineNum":"  644","line":"\t  {"},
{"lineNum":"  645","line":"\t    push_front(_GLIBCXX_MOVE(front()));"},
{"lineNum":"  646","line":"\t    iterator __front1 = this->_M_impl._M_start;"},
{"lineNum":"  647","line":"\t    ++__front1;"},
{"lineNum":"  648","line":"\t    iterator __front2 = __front1;"},
{"lineNum":"  649","line":"\t    ++__front2;"},
{"lineNum":"  650","line":"\t    __pos = this->_M_impl._M_start + __index;"},
{"lineNum":"  651","line":"\t    iterator __pos1 = __pos;"},
{"lineNum":"  652","line":"\t    ++__pos1;"},
{"lineNum":"  653","line":"\t    _GLIBCXX_MOVE3(__front2, __pos1, __front1);"},
{"lineNum":"  654","line":"\t  }"},
{"lineNum":"  655","line":"\telse"},
{"lineNum":"  656","line":"\t  {"},
{"lineNum":"  657","line":"\t    push_back(_GLIBCXX_MOVE(back()));"},
{"lineNum":"  658","line":"\t    iterator __back1 = this->_M_impl._M_finish;"},
{"lineNum":"  659","line":"\t    --__back1;"},
{"lineNum":"  660","line":"\t    iterator __back2 = __back1;"},
{"lineNum":"  661","line":"\t    --__back2;"},
{"lineNum":"  662","line":"\t    __pos = this->_M_impl._M_start + __index;"},
{"lineNum":"  663","line":"\t    _GLIBCXX_MOVE_BACKWARD3(__pos, __back2, __back1);"},
{"lineNum":"  664","line":"\t  }"},
{"lineNum":"  665","line":"\t*__pos = _GLIBCXX_MOVE(__x_copy);"},
{"lineNum":"  666","line":"\treturn __pos;"},
{"lineNum":"  667","line":"      }"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  670","line":"    void"},
{"lineNum":"  671","line":"    deque<_Tp, _Alloc>::"},
{"lineNum":"  672","line":"    _M_insert_aux(iterator __pos, size_type __n, const value_type& __x)"},
{"lineNum":"  673","line":"    {"},
{"lineNum":"  674","line":"      const difference_type __elems_before = __pos - this->_M_impl._M_start;"},
{"lineNum":"  675","line":"      const size_type __length = this->size();"},
{"lineNum":"  676","line":"      value_type __x_copy = __x;"},
{"lineNum":"  677","line":"      if (__elems_before < difference_type(__length / 2))"},
{"lineNum":"  678","line":"\t{"},
{"lineNum":"  679","line":"\t  iterator __new_start = _M_reserve_elements_at_front(__n);"},
{"lineNum":"  680","line":"\t  iterator __old_start = this->_M_impl._M_start;"},
{"lineNum":"  681","line":"\t  __pos = this->_M_impl._M_start + __elems_before;"},
{"lineNum":"  682","line":"\t  __try"},
{"lineNum":"  683","line":"\t    {"},
{"lineNum":"  684","line":"\t      if (__elems_before >= difference_type(__n))"},
{"lineNum":"  685","line":"\t\t{"},
{"lineNum":"  686","line":"\t\t  iterator __start_n = (this->_M_impl._M_start"},
{"lineNum":"  687","line":"\t\t\t\t\t+ difference_type(__n));"},
{"lineNum":"  688","line":"\t\t  std::__uninitialized_move_a(this->_M_impl._M_start,"},
{"lineNum":"  689","line":"\t\t\t\t\t      __start_n, __new_start,"},
{"lineNum":"  690","line":"\t\t\t\t\t      _M_get_Tp_allocator());"},
{"lineNum":"  691","line":"\t\t  this->_M_impl._M_start = __new_start;"},
{"lineNum":"  692","line":"\t\t  _GLIBCXX_MOVE3(__start_n, __pos, __old_start);"},
{"lineNum":"  693","line":"\t\t  std::fill(__pos - difference_type(__n), __pos, __x_copy);"},
{"lineNum":"  694","line":"\t\t}"},
{"lineNum":"  695","line":"\t      else"},
{"lineNum":"  696","line":"\t\t{"},
{"lineNum":"  697","line":"\t\t  std::__uninitialized_move_fill(this->_M_impl._M_start,"},
{"lineNum":"  698","line":"\t\t\t\t\t\t __pos, __new_start,"},
{"lineNum":"  699","line":"\t\t\t\t\t\t this->_M_impl._M_start,"},
{"lineNum":"  700","line":"\t\t\t\t\t\t __x_copy,"},
{"lineNum":"  701","line":"\t\t\t\t\t\t _M_get_Tp_allocator());"},
{"lineNum":"  702","line":"\t\t  this->_M_impl._M_start = __new_start;"},
{"lineNum":"  703","line":"\t\t  std::fill(__old_start, __pos, __x_copy);"},
{"lineNum":"  704","line":"\t\t}"},
{"lineNum":"  705","line":"\t    }"},
{"lineNum":"  706","line":"\t  __catch(...)"},
{"lineNum":"  707","line":"\t    {"},
{"lineNum":"  708","line":"\t      _M_destroy_nodes(__new_start._M_node,"},
{"lineNum":"  709","line":"\t\t\t       this->_M_impl._M_start._M_node);"},
{"lineNum":"  710","line":"\t      __throw_exception_again;"},
{"lineNum":"  711","line":"\t    }"},
{"lineNum":"  712","line":"\t}"},
{"lineNum":"  713","line":"      else"},
{"lineNum":"  714","line":"\t{"},
{"lineNum":"  715","line":"\t  iterator __new_finish = _M_reserve_elements_at_back(__n);"},
{"lineNum":"  716","line":"\t  iterator __old_finish = this->_M_impl._M_finish;"},
{"lineNum":"  717","line":"\t  const difference_type __elems_after ="},
{"lineNum":"  718","line":"\t    difference_type(__length) - __elems_before;"},
{"lineNum":"  719","line":"\t  __pos = this->_M_impl._M_finish - __elems_after;"},
{"lineNum":"  720","line":"\t  __try"},
{"lineNum":"  721","line":"\t    {"},
{"lineNum":"  722","line":"\t      if (__elems_after > difference_type(__n))"},
{"lineNum":"  723","line":"\t\t{"},
{"lineNum":"  724","line":"\t\t  iterator __finish_n = (this->_M_impl._M_finish"},
{"lineNum":"  725","line":"\t\t\t\t\t - difference_type(__n));"},
{"lineNum":"  726","line":"\t\t  std::__uninitialized_move_a(__finish_n,"},
{"lineNum":"  727","line":"\t\t\t\t\t      this->_M_impl._M_finish,"},
{"lineNum":"  728","line":"\t\t\t\t\t      this->_M_impl._M_finish,"},
{"lineNum":"  729","line":"\t\t\t\t\t      _M_get_Tp_allocator());"},
{"lineNum":"  730","line":"\t\t  this->_M_impl._M_finish = __new_finish;"},
{"lineNum":"  731","line":"\t\t  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);"},
{"lineNum":"  732","line":"\t\t  std::fill(__pos, __pos + difference_type(__n), __x_copy);"},
{"lineNum":"  733","line":"\t\t}"},
{"lineNum":"  734","line":"\t      else"},
{"lineNum":"  735","line":"\t\t{"},
{"lineNum":"  736","line":"\t\t  std::__uninitialized_fill_move(this->_M_impl._M_finish,"},
{"lineNum":"  737","line":"\t\t\t\t\t\t __pos + difference_type(__n),"},
{"lineNum":"  738","line":"\t\t\t\t\t\t __x_copy, __pos,"},
{"lineNum":"  739","line":"\t\t\t\t\t\t this->_M_impl._M_finish,"},
{"lineNum":"  740","line":"\t\t\t\t\t\t _M_get_Tp_allocator());"},
{"lineNum":"  741","line":"\t\t  this->_M_impl._M_finish = __new_finish;"},
{"lineNum":"  742","line":"\t\t  std::fill(__pos, __old_finish, __x_copy);"},
{"lineNum":"  743","line":"\t\t}"},
{"lineNum":"  744","line":"\t    }"},
{"lineNum":"  745","line":"\t  __catch(...)"},
{"lineNum":"  746","line":"\t    {"},
{"lineNum":"  747","line":"\t      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,"},
{"lineNum":"  748","line":"\t\t\t       __new_finish._M_node + 1);"},
{"lineNum":"  749","line":"\t      __throw_exception_again;"},
{"lineNum":"  750","line":"\t    }"},
{"lineNum":"  751","line":"\t}"},
{"lineNum":"  752","line":"    }"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  755","line":"    template <typename _ForwardIterator>"},
{"lineNum":"  756","line":"      void"},
{"lineNum":"  757","line":"      deque<_Tp, _Alloc>::"},
{"lineNum":"  758","line":"      _M_insert_aux(iterator __pos,"},
{"lineNum":"  759","line":"                    _ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":"  760","line":"                    size_type __n)"},
{"lineNum":"  761","line":"      {"},
{"lineNum":"  762","line":"        const difference_type __elemsbefore = __pos - this->_M_impl._M_start;"},
{"lineNum":"  763","line":"        const size_type __length = size();"},
{"lineNum":"  764","line":"        if (static_cast<size_type>(__elemsbefore) < __length / 2)"},
{"lineNum":"  765","line":"\t  {"},
{"lineNum":"  766","line":"\t    iterator __new_start = _M_reserve_elements_at_front(__n);"},
{"lineNum":"  767","line":"\t    iterator __old_start = this->_M_impl._M_start;"},
{"lineNum":"  768","line":"\t    __pos = this->_M_impl._M_start + __elemsbefore;"},
{"lineNum":"  769","line":"\t    __try"},
{"lineNum":"  770","line":"\t      {"},
{"lineNum":"  771","line":"\t\tif (__elemsbefore >= difference_type(__n))"},
{"lineNum":"  772","line":"\t\t  {"},
{"lineNum":"  773","line":"\t\t    iterator __start_n = (this->_M_impl._M_start"},
{"lineNum":"  774","line":"\t\t\t\t\t  + difference_type(__n));"},
{"lineNum":"  775","line":"\t\t    std::__uninitialized_move_a(this->_M_impl._M_start,"},
{"lineNum":"  776","line":"\t\t\t\t\t\t__start_n, __new_start,"},
{"lineNum":"  777","line":"\t\t\t\t\t\t_M_get_Tp_allocator());"},
{"lineNum":"  778","line":"\t\t    this->_M_impl._M_start = __new_start;"},
{"lineNum":"  779","line":"\t\t    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);"},
{"lineNum":"  780","line":"\t\t    std::copy(__first, __last, __pos - difference_type(__n));"},
{"lineNum":"  781","line":"\t\t  }"},
{"lineNum":"  782","line":"\t\telse"},
{"lineNum":"  783","line":"\t\t  {"},
{"lineNum":"  784","line":"\t\t    _ForwardIterator __mid = __first;"},
{"lineNum":"  785","line":"\t\t    std::advance(__mid, difference_type(__n) - __elemsbefore);"},
{"lineNum":"  786","line":"\t\t    std::__uninitialized_move_copy(this->_M_impl._M_start,"},
{"lineNum":"  787","line":"\t\t\t\t\t\t   __pos, __first, __mid,"},
{"lineNum":"  788","line":"\t\t\t\t\t\t   __new_start,"},
{"lineNum":"  789","line":"\t\t\t\t\t\t   _M_get_Tp_allocator());"},
{"lineNum":"  790","line":"\t\t    this->_M_impl._M_start = __new_start;"},
{"lineNum":"  791","line":"\t\t    std::copy(__mid, __last, __old_start);"},
{"lineNum":"  792","line":"\t\t  }"},
{"lineNum":"  793","line":"\t      }"},
{"lineNum":"  794","line":"\t    __catch(...)"},
{"lineNum":"  795","line":"\t      {"},
{"lineNum":"  796","line":"\t\t_M_destroy_nodes(__new_start._M_node,"},
{"lineNum":"  797","line":"\t\t\t\t this->_M_impl._M_start._M_node);"},
{"lineNum":"  798","line":"\t\t__throw_exception_again;"},
{"lineNum":"  799","line":"\t      }"},
{"lineNum":"  800","line":"\t  }"},
{"lineNum":"  801","line":"        else"},
{"lineNum":"  802","line":"        {"},
{"lineNum":"  803","line":"          iterator __new_finish = _M_reserve_elements_at_back(__n);"},
{"lineNum":"  804","line":"          iterator __old_finish = this->_M_impl._M_finish;"},
{"lineNum":"  805","line":"          const difference_type __elemsafter ="},
{"lineNum":"  806","line":"            difference_type(__length) - __elemsbefore;"},
{"lineNum":"  807","line":"          __pos = this->_M_impl._M_finish - __elemsafter;"},
{"lineNum":"  808","line":"          __try"},
{"lineNum":"  809","line":"            {"},
{"lineNum":"  810","line":"              if (__elemsafter > difference_type(__n))"},
{"lineNum":"  811","line":"\t\t{"},
{"lineNum":"  812","line":"\t\t  iterator __finish_n = (this->_M_impl._M_finish"},
{"lineNum":"  813","line":"\t\t\t\t\t - difference_type(__n));"},
{"lineNum":"  814","line":"\t\t  std::__uninitialized_move_a(__finish_n,"},
{"lineNum":"  815","line":"\t\t\t\t\t      this->_M_impl._M_finish,"},
{"lineNum":"  816","line":"\t\t\t\t\t      this->_M_impl._M_finish,"},
{"lineNum":"  817","line":"\t\t\t\t\t      _M_get_Tp_allocator());"},
{"lineNum":"  818","line":"\t\t  this->_M_impl._M_finish = __new_finish;"},
{"lineNum":"  819","line":"\t\t  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);"},
{"lineNum":"  820","line":"\t\t  std::copy(__first, __last, __pos);"},
{"lineNum":"  821","line":"\t\t}"},
{"lineNum":"  822","line":"              else"},
{"lineNum":"  823","line":"\t\t{"},
{"lineNum":"  824","line":"\t\t  _ForwardIterator __mid = __first;"},
{"lineNum":"  825","line":"\t\t  std::advance(__mid, __elemsafter);"},
{"lineNum":"  826","line":"\t\t  std::__uninitialized_copy_move(__mid, __last, __pos,"},
{"lineNum":"  827","line":"\t\t\t\t\t\t this->_M_impl._M_finish,"},
{"lineNum":"  828","line":"\t\t\t\t\t\t this->_M_impl._M_finish,"},
{"lineNum":"  829","line":"\t\t\t\t\t\t _M_get_Tp_allocator());"},
{"lineNum":"  830","line":"\t\t  this->_M_impl._M_finish = __new_finish;"},
{"lineNum":"  831","line":"\t\t  std::copy(__first, __mid, __pos);"},
{"lineNum":"  832","line":"\t\t}"},
{"lineNum":"  833","line":"            }"},
{"lineNum":"  834","line":"          __catch(...)"},
{"lineNum":"  835","line":"            {"},
{"lineNum":"  836","line":"              _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,"},
{"lineNum":"  837","line":"\t\t\t       __new_finish._M_node + 1);"},
{"lineNum":"  838","line":"              __throw_exception_again;"},
{"lineNum":"  839","line":"            }"},
{"lineNum":"  840","line":"        }"},
{"lineNum":"  841","line":"      }"},
{"lineNum":"  842","line":""},
{"lineNum":"  843","line":"   template<typename _Tp, typename _Alloc>"},
{"lineNum":"  844","line":"     void"},
{"lineNum":"  845","line":"     deque<_Tp, _Alloc>::","class":"lineCov","hits":"1","order":"1994","possible_hits":"1",},
{"lineNum":"  846","line":"     _M_destroy_data_aux(iterator __first, iterator __last)"},
{"lineNum":"  847","line":"     {"},
{"lineNum":"  848","line":"       for (_Map_pointer __node = __first._M_node + 1;","class":"linePartCov","hits":"1","order":"1995","possible_hits":"2",},
{"lineNum":"  849","line":"\t    __node < __last._M_node; ++__node)","class":"lineCov","hits":"1","order":"1996","possible_hits":"1",},
{"lineNum":"  850","line":"\t std::_Destroy(*__node, *__node + _S_buffer_size(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  851","line":"\t\t       _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  852","line":""},
{"lineNum":"  853","line":"       if (__first._M_node != __last._M_node)","class":"lineCov","hits":"1","order":"1997","possible_hits":"1",},
{"lineNum":"  854","line":"\t {"},
{"lineNum":"  855","line":"\t   std::_Destroy(__first._M_cur, __first._M_last,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  856","line":"\t\t\t _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  857","line":"\t   std::_Destroy(__last._M_first, __last._M_cur,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  858","line":"\t\t\t _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  859","line":"\t }"},
{"lineNum":"  860","line":"       else"},
{"lineNum":"  861","line":"\t std::_Destroy(__first._M_cur, __last._M_cur,","class":"lineCov","hits":"1","order":"1999","possible_hits":"1",},
{"lineNum":"  862","line":"\t\t       _M_get_Tp_allocator());","class":"lineCov","hits":"1","order":"1998","possible_hits":"1",},
{"lineNum":"  863","line":"     }","class":"linePartCov","hits":"1","order":"2009","possible_hits":"3",},
{"lineNum":"  864","line":""},
{"lineNum":"  865","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  866","line":"    void"},
{"lineNum":"  867","line":"    deque<_Tp, _Alloc>::"},
{"lineNum":"  868","line":"    _M_new_elements_at_front(size_type __new_elems)"},
{"lineNum":"  869","line":"    {"},
{"lineNum":"  870","line":"      if (this->max_size() - this->size() < __new_elems)"},
{"lineNum":"  871","line":"\t__throw_length_error(__N(\"deque::_M_new_elements_at_front\"));"},
{"lineNum":"  872","line":""},
{"lineNum":"  873","line":"      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)"},
{"lineNum":"  874","line":"\t\t\t\t     / _S_buffer_size());"},
{"lineNum":"  875","line":"      _M_reserve_map_at_front(__new_nodes);"},
{"lineNum":"  876","line":"      size_type __i;"},
{"lineNum":"  877","line":"      __try"},
{"lineNum":"  878","line":"        {"},
{"lineNum":"  879","line":"          for (__i = 1; __i <= __new_nodes; ++__i)"},
{"lineNum":"  880","line":"            *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();"},
{"lineNum":"  881","line":"        }"},
{"lineNum":"  882","line":"      __catch(...)"},
{"lineNum":"  883","line":"        {"},
{"lineNum":"  884","line":"          for (size_type __j = 1; __j < __i; ++__j)"},
{"lineNum":"  885","line":"            _M_deallocate_node(*(this->_M_impl._M_start._M_node - __j));"},
{"lineNum":"  886","line":"          __throw_exception_again;"},
{"lineNum":"  887","line":"        }"},
{"lineNum":"  888","line":"    }"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  891","line":"    void"},
{"lineNum":"  892","line":"    deque<_Tp, _Alloc>::"},
{"lineNum":"  893","line":"    _M_new_elements_at_back(size_type __new_elems)"},
{"lineNum":"  894","line":"    {"},
{"lineNum":"  895","line":"      if (this->max_size() - this->size() < __new_elems)"},
{"lineNum":"  896","line":"\t__throw_length_error(__N(\"deque::_M_new_elements_at_back\"));"},
{"lineNum":"  897","line":""},
{"lineNum":"  898","line":"      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)"},
{"lineNum":"  899","line":"\t\t\t\t     / _S_buffer_size());"},
{"lineNum":"  900","line":"      _M_reserve_map_at_back(__new_nodes);"},
{"lineNum":"  901","line":"      size_type __i;"},
{"lineNum":"  902","line":"      __try"},
{"lineNum":"  903","line":"        {"},
{"lineNum":"  904","line":"          for (__i = 1; __i <= __new_nodes; ++__i)"},
{"lineNum":"  905","line":"            *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();"},
{"lineNum":"  906","line":"        }"},
{"lineNum":"  907","line":"      __catch(...)"},
{"lineNum":"  908","line":"        {"},
{"lineNum":"  909","line":"          for (size_type __j = 1; __j < __i; ++__j)"},
{"lineNum":"  910","line":"            _M_deallocate_node(*(this->_M_impl._M_finish._M_node + __j));"},
{"lineNum":"  911","line":"          __throw_exception_again;"},
{"lineNum":"  912","line":"        }"},
{"lineNum":"  913","line":"    }"},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"  template <typename _Tp, typename _Alloc>"},
{"lineNum":"  916","line":"    void"},
{"lineNum":"  917","line":"    deque<_Tp, _Alloc>::","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  918","line":"    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)"},
{"lineNum":"  919","line":"    {"},
{"lineNum":"  920","line":"      const size_type __old_num_nodes","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  921","line":"\t= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  922","line":"      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  923","line":""},
{"lineNum":"  924","line":"      _Map_pointer __new_nstart;"},
{"lineNum":"  925","line":"      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  926","line":"\t{"},
{"lineNum":"  927","line":"\t  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  928","line":"\t\t\t\t\t - __new_num_nodes) / 2","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  929","line":"\t                 + (__add_at_front ? __nodes_to_add : 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  930","line":"\t  if (__new_nstart < this->_M_impl._M_start._M_node)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  931","line":"\t    std::copy(this->_M_impl._M_start._M_node,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  932","line":"\t\t      this->_M_impl._M_finish._M_node + 1,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  933","line":"\t\t      __new_nstart);"},
{"lineNum":"  934","line":"\t  else"},
{"lineNum":"  935","line":"\t    std::copy_backward(this->_M_impl._M_start._M_node,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  936","line":"\t\t\t       this->_M_impl._M_finish._M_node + 1,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  937","line":"\t\t\t       __new_nstart + __old_num_nodes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  938","line":"\t}"},
{"lineNum":"  939","line":"      else"},
{"lineNum":"  940","line":"\t{"},
{"lineNum":"  941","line":"\t  size_type __new_map_size = this->_M_impl._M_map_size","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  942","line":"\t                             + std::max(this->_M_impl._M_map_size,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  943","line":"\t\t\t\t\t\t__nodes_to_add) + 2;"},
{"lineNum":"  944","line":""},
{"lineNum":"  945","line":"\t  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  946","line":"\t  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  947","line":"\t                 + (__add_at_front ? __nodes_to_add : 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  948","line":"\t  std::copy(this->_M_impl._M_start._M_node,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  949","line":"\t\t    this->_M_impl._M_finish._M_node + 1,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  950","line":"\t\t    __new_nstart);"},
{"lineNum":"  951","line":"\t  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  952","line":""},
{"lineNum":"  953","line":"\t  this->_M_impl._M_map = __new_map;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  954","line":"\t  this->_M_impl._M_map_size = __new_map_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  955","line":"\t}"},
{"lineNum":"  956","line":""},
{"lineNum":"  957","line":"      this->_M_impl._M_start._M_set_node(__new_nstart);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  958","line":"      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  959","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  960","line":""},
{"lineNum":"  961","line":"  // Overload for deque::iterators, exploiting the \"segmented-iterator"},
{"lineNum":"  962","line":"  // optimization\"."},
{"lineNum":"  963","line":"  template<typename _Tp>"},
{"lineNum":"  964","line":"    void"},
{"lineNum":"  965","line":"    fill(const _Deque_iterator<_Tp, _Tp&, _Tp*>& __first,"},
{"lineNum":"  966","line":"\t const _Deque_iterator<_Tp, _Tp&, _Tp*>& __last, const _Tp& __value)"},
{"lineNum":"  967","line":"    {"},
{"lineNum":"  968","line":"      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;"},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"      for (typename _Self::_Map_pointer __node = __first._M_node + 1;"},
{"lineNum":"  971","line":"           __node < __last._M_node; ++__node)"},
{"lineNum":"  972","line":"\tstd::fill(*__node, *__node + _Self::_S_buffer_size(), __value);"},
{"lineNum":"  973","line":""},
{"lineNum":"  974","line":"      if (__first._M_node != __last._M_node)"},
{"lineNum":"  975","line":"\t{"},
{"lineNum":"  976","line":"\t  std::fill(__first._M_cur, __first._M_last, __value);"},
{"lineNum":"  977","line":"\t  std::fill(__last._M_first, __last._M_cur, __value);"},
{"lineNum":"  978","line":"\t}"},
{"lineNum":"  979","line":"      else"},
{"lineNum":"  980","line":"\tstd::fill(__first._M_cur, __last._M_cur, __value);"},
{"lineNum":"  981","line":"    }"},
{"lineNum":"  982","line":""},
{"lineNum":"  983","line":"  template<typename _Tp>"},
{"lineNum":"  984","line":"    _Deque_iterator<_Tp, _Tp&, _Tp*>"},
{"lineNum":"  985","line":"    copy(_Deque_iterator<_Tp, const _Tp&, const _Tp*> __first,"},
{"lineNum":"  986","line":"\t _Deque_iterator<_Tp, const _Tp&, const _Tp*> __last,"},
{"lineNum":"  987","line":"\t _Deque_iterator<_Tp, _Tp&, _Tp*> __result)"},
{"lineNum":"  988","line":"    {"},
{"lineNum":"  989","line":"      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;"},
{"lineNum":"  990","line":"      typedef typename _Self::difference_type difference_type;"},
{"lineNum":"  991","line":""},
{"lineNum":"  992","line":"      difference_type __len = __last - __first;"},
{"lineNum":"  993","line":"      while (__len > 0)"},
{"lineNum":"  994","line":"\t{"},
{"lineNum":"  995","line":"\t  const difference_type __clen"},
{"lineNum":"  996","line":"\t    = std::min(__len, std::min(__first._M_last - __first._M_cur,"},
{"lineNum":"  997","line":"\t\t\t\t       __result._M_last - __result._M_cur));"},
{"lineNum":"  998","line":"\t  std::copy(__first._M_cur, __first._M_cur + __clen, __result._M_cur);"},
{"lineNum":"  999","line":"\t  __first += __clen;"},
{"lineNum":" 1000","line":"\t  __result += __clen;"},
{"lineNum":" 1001","line":"\t  __len -= __clen;"},
{"lineNum":" 1002","line":"\t}"},
{"lineNum":" 1003","line":"      return __result;"},
{"lineNum":" 1004","line":"    }"},
{"lineNum":" 1005","line":""},
{"lineNum":" 1006","line":"  template<typename _Tp>"},
{"lineNum":" 1007","line":"    _Deque_iterator<_Tp, _Tp&, _Tp*>"},
{"lineNum":" 1008","line":"    copy_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*> __first,"},
{"lineNum":" 1009","line":"\t\t  _Deque_iterator<_Tp, const _Tp&, const _Tp*> __last,"},
{"lineNum":" 1010","line":"\t\t  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)"},
{"lineNum":" 1011","line":"    {"},
{"lineNum":" 1012","line":"      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;"},
{"lineNum":" 1013","line":"      typedef typename _Self::difference_type difference_type;"},
{"lineNum":" 1014","line":""},
{"lineNum":" 1015","line":"      difference_type __len = __last - __first;"},
{"lineNum":" 1016","line":"      while (__len > 0)"},
{"lineNum":" 1017","line":"\t{"},
{"lineNum":" 1018","line":"\t  difference_type __llen = __last._M_cur - __last._M_first;"},
{"lineNum":" 1019","line":"\t  _Tp* __lend = __last._M_cur;"},
{"lineNum":" 1020","line":""},
{"lineNum":" 1021","line":"\t  difference_type __rlen = __result._M_cur - __result._M_first;"},
{"lineNum":" 1022","line":"\t  _Tp* __rend = __result._M_cur;"},
{"lineNum":" 1023","line":""},
{"lineNum":" 1024","line":"\t  if (!__llen)"},
{"lineNum":" 1025","line":"\t    {"},
{"lineNum":" 1026","line":"\t      __llen = _Self::_S_buffer_size();"},
{"lineNum":" 1027","line":"\t      __lend = *(__last._M_node - 1) + __llen;"},
{"lineNum":" 1028","line":"\t    }"},
{"lineNum":" 1029","line":"\t  if (!__rlen)"},
{"lineNum":" 1030","line":"\t    {"},
{"lineNum":" 1031","line":"\t      __rlen = _Self::_S_buffer_size();"},
{"lineNum":" 1032","line":"\t      __rend = *(__result._M_node - 1) + __rlen;"},
{"lineNum":" 1033","line":"\t    }"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"\t  const difference_type __clen = std::min(__len,"},
{"lineNum":" 1036","line":"\t\t\t\t\t\t  std::min(__llen, __rlen));"},
{"lineNum":" 1037","line":"\t  std::copy_backward(__lend - __clen, __lend, __rend);"},
{"lineNum":" 1038","line":"\t  __last -= __clen;"},
{"lineNum":" 1039","line":"\t  __result -= __clen;"},
{"lineNum":" 1040","line":"\t  __len -= __clen;"},
{"lineNum":" 1041","line":"\t}"},
{"lineNum":" 1042","line":"      return __result;"},
{"lineNum":" 1043","line":"    }"},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1046","line":"  template<typename _Tp>"},
{"lineNum":" 1047","line":"    _Deque_iterator<_Tp, _Tp&, _Tp*>"},
{"lineNum":" 1048","line":"    move(_Deque_iterator<_Tp, const _Tp&, const _Tp*> __first,"},
{"lineNum":" 1049","line":"\t _Deque_iterator<_Tp, const _Tp&, const _Tp*> __last,"},
{"lineNum":" 1050","line":"\t _Deque_iterator<_Tp, _Tp&, _Tp*> __result)"},
{"lineNum":" 1051","line":"    {"},
{"lineNum":" 1052","line":"      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;"},
{"lineNum":" 1053","line":"      typedef typename _Self::difference_type difference_type;"},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"      difference_type __len = __last - __first;"},
{"lineNum":" 1056","line":"      while (__len > 0)"},
{"lineNum":" 1057","line":"\t{"},
{"lineNum":" 1058","line":"\t  const difference_type __clen"},
{"lineNum":" 1059","line":"\t    = std::min(__len, std::min(__first._M_last - __first._M_cur,"},
{"lineNum":" 1060","line":"\t\t\t\t       __result._M_last - __result._M_cur));"},
{"lineNum":" 1061","line":"\t  std::move(__first._M_cur, __first._M_cur + __clen, __result._M_cur);"},
{"lineNum":" 1062","line":"\t  __first += __clen;"},
{"lineNum":" 1063","line":"\t  __result += __clen;"},
{"lineNum":" 1064","line":"\t  __len -= __clen;"},
{"lineNum":" 1065","line":"\t}"},
{"lineNum":" 1066","line":"      return __result;"},
{"lineNum":" 1067","line":"    }"},
{"lineNum":" 1068","line":""},
{"lineNum":" 1069","line":"  template<typename _Tp>"},
{"lineNum":" 1070","line":"    _Deque_iterator<_Tp, _Tp&, _Tp*>"},
{"lineNum":" 1071","line":"    move_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*> __first,"},
{"lineNum":" 1072","line":"\t\t  _Deque_iterator<_Tp, const _Tp&, const _Tp*> __last,"},
{"lineNum":" 1073","line":"\t\t  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)"},
{"lineNum":" 1074","line":"    {"},
{"lineNum":" 1075","line":"      typedef typename _Deque_iterator<_Tp, _Tp&, _Tp*>::_Self _Self;"},
{"lineNum":" 1076","line":"      typedef typename _Self::difference_type difference_type;"},
{"lineNum":" 1077","line":""},
{"lineNum":" 1078","line":"      difference_type __len = __last - __first;"},
{"lineNum":" 1079","line":"      while (__len > 0)"},
{"lineNum":" 1080","line":"\t{"},
{"lineNum":" 1081","line":"\t  difference_type __llen = __last._M_cur - __last._M_first;"},
{"lineNum":" 1082","line":"\t  _Tp* __lend = __last._M_cur;"},
{"lineNum":" 1083","line":""},
{"lineNum":" 1084","line":"\t  difference_type __rlen = __result._M_cur - __result._M_first;"},
{"lineNum":" 1085","line":"\t  _Tp* __rend = __result._M_cur;"},
{"lineNum":" 1086","line":""},
{"lineNum":" 1087","line":"\t  if (!__llen)"},
{"lineNum":" 1088","line":"\t    {"},
{"lineNum":" 1089","line":"\t      __llen = _Self::_S_buffer_size();"},
{"lineNum":" 1090","line":"\t      __lend = *(__last._M_node - 1) + __llen;"},
{"lineNum":" 1091","line":"\t    }"},
{"lineNum":" 1092","line":"\t  if (!__rlen)"},
{"lineNum":" 1093","line":"\t    {"},
{"lineNum":" 1094","line":"\t      __rlen = _Self::_S_buffer_size();"},
{"lineNum":" 1095","line":"\t      __rend = *(__result._M_node - 1) + __rlen;"},
{"lineNum":" 1096","line":"\t    }"},
{"lineNum":" 1097","line":""},
{"lineNum":" 1098","line":"\t  const difference_type __clen = std::min(__len,"},
{"lineNum":" 1099","line":"\t\t\t\t\t\t  std::min(__llen, __rlen));"},
{"lineNum":" 1100","line":"\t  std::move_backward(__lend - __clen, __lend, __rend);"},
{"lineNum":" 1101","line":"\t  __last -= __clen;"},
{"lineNum":" 1102","line":"\t  __result -= __clen;"},
{"lineNum":" 1103","line":"\t  __len -= __clen;"},
{"lineNum":" 1104","line":"\t}"},
{"lineNum":" 1105","line":"      return __result;"},
{"lineNum":" 1106","line":"    }"},
{"lineNum":" 1107","line":"#endif"},
{"lineNum":" 1108","line":""},
{"lineNum":" 1109","line":"_GLIBCXX_END_NAMESPACE_CONTAINER"},
{"lineNum":" 1110","line":"} // namespace std"},
{"lineNum":" 1111","line":""},
{"lineNum":" 1112","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "mipl_parser", "date" : "2018-11-28 14:11:04", "instrumented" : 63, "covered" : 13,};
var merged_data = [];
