var data = {lines:[
{"lineNum":"    1","line":"// Deque implementation -*- C++ -*-"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 2001-2017 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This file is part of the GNU ISO C++ Library.  This library is free"},
{"lineNum":"    6","line":"// software; you can redistribute it and/or modify it under the"},
{"lineNum":"    7","line":"// terms of the GNU General Public License as published by the"},
{"lineNum":"    8","line":"// Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    9","line":"// any later version."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// This library is distributed in the hope that it will be useful,"},
{"lineNum":"   12","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   13","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   14","line":"// GNU General Public License for more details."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   17","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   18","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   21","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   22","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   23","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/*"},
{"lineNum":"   26","line":" *"},
{"lineNum":"   27","line":" * Copyright (c) 1994"},
{"lineNum":"   28","line":" * Hewlett-Packard Company"},
{"lineNum":"   29","line":" *"},
{"lineNum":"   30","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   31","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   32","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   33","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   34","line":" * in supporting documentation.  Hewlett-Packard Company makes no"},
{"lineNum":"   35","line":" * representations about the suitability of this software for any"},
{"lineNum":"   36","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   37","line":" *"},
{"lineNum":"   38","line":" *"},
{"lineNum":"   39","line":" * Copyright (c) 1997"},
{"lineNum":"   40","line":" * Silicon Graphics Computer Systems, Inc."},
{"lineNum":"   41","line":" *"},
{"lineNum":"   42","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   43","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   44","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   45","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   46","line":" * in supporting documentation.  Silicon Graphics makes no"},
{"lineNum":"   47","line":" * representations about the suitability of this software for any"},
{"lineNum":"   48","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   49","line":" */"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"/** @file bits/stl_deque.h"},
{"lineNum":"   52","line":" *  This is an internal header file, included by other library headers."},
{"lineNum":"   53","line":" *  Do not attempt to use it directly. @headername{deque}"},
{"lineNum":"   54","line":" */"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"#ifndef _STL_DEQUE_H"},
{"lineNum":"   57","line":"#define _STL_DEQUE_H 1"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"#include <bits/concept_check.h>"},
{"lineNum":"   60","line":"#include <bits/stl_iterator_base_types.h>"},
{"lineNum":"   61","line":"#include <bits/stl_iterator_base_funcs.h>"},
{"lineNum":"   62","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   63","line":"#include <initializer_list>"},
{"lineNum":"   64","line":"#endif"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"#include <debug/assertions.h>"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   69","line":"{"},
{"lineNum":"   70","line":"_GLIBCXX_BEGIN_NAMESPACE_CONTAINER"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"  /**"},
{"lineNum":"   73","line":"   *  @brief This function controls the size of memory nodes."},
{"lineNum":"   74","line":"   *  @param  __size  The size of an element."},
{"lineNum":"   75","line":"   *  @return   The number (not byte size) of elements per node."},
{"lineNum":"   76","line":"   *"},
{"lineNum":"   77","line":"   *  This function started off as a compiler kludge from SGI, but"},
{"lineNum":"   78","line":"   *  seems to be a useful wrapper around a repeated constant"},
{"lineNum":"   79","line":"   *  expression.  The @b 512 is tunable (and no other code needs to"},
{"lineNum":"   80","line":"   *  change), but no investigation has been done since inheriting the"},
{"lineNum":"   81","line":"   *  SGI code.  Touch _GLIBCXX_DEQUE_BUF_SIZE only if you know what"},
{"lineNum":"   82","line":"   *  you are doing, however: changing it breaks the binary"},
{"lineNum":"   83","line":"   *  compatibility!!"},
{"lineNum":"   84","line":"  */"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"#ifndef _GLIBCXX_DEQUE_BUF_SIZE"},
{"lineNum":"   87","line":"#define _GLIBCXX_DEQUE_BUF_SIZE 512"},
{"lineNum":"   88","line":"#endif"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"  _GLIBCXX_CONSTEXPR inline size_t"},
{"lineNum":"   91","line":"  __deque_buf_size(size_t __size)"},
{"lineNum":"   92","line":"  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE","class":"lineCov","hits":"1","order":"184","possible_hits":"1",},
{"lineNum":"   93","line":"\t    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }","class":"lineCov","hits":"1","order":"185","possible_hits":"1",},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"  /**"},
{"lineNum":"   97","line":"   *  @brief A deque::iterator."},
{"lineNum":"   98","line":"   *"},
{"lineNum":"   99","line":"   *  Quite a bit of intelligence here.  Much of the functionality of"},
{"lineNum":"  100","line":"   *  deque is actually passed off to this class.  A deque holds two"},
{"lineNum":"  101","line":"   *  of these internally, marking its valid range.  Access to"},
{"lineNum":"  102","line":"   *  elements is done as offsets of either of those two, relying on"},
{"lineNum":"  103","line":"   *  operator overloading in this class."},
{"lineNum":"  104","line":"   *"},
{"lineNum":"  105","line":"   *  All the functions are op overloads except for _M_set_node."},
{"lineNum":"  106","line":"  */"},
{"lineNum":"  107","line":"  template<typename _Tp, typename _Ref, typename _Ptr>"},
{"lineNum":"  108","line":"    struct _Deque_iterator"},
{"lineNum":"  109","line":"    {"},
{"lineNum":"  110","line":"#if __cplusplus < 201103L"},
{"lineNum":"  111","line":"      typedef _Deque_iterator<_Tp, _Tp&, _Tp*>\t     iterator;"},
{"lineNum":"  112","line":"      typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;"},
{"lineNum":"  113","line":"      typedef _Tp*\t\t\t\t\t _Elt_pointer;"},
{"lineNum":"  114","line":"      typedef _Tp**\t\t\t\t\t_Map_pointer;"},
{"lineNum":"  115","line":"#else"},
{"lineNum":"  116","line":"    private:"},
{"lineNum":"  117","line":"      template<typename _Up>"},
{"lineNum":"  118","line":"\tusing __ptr_to = typename pointer_traits<_Ptr>::template rebind<_Up>;"},
{"lineNum":"  119","line":"      template<typename _CvTp>"},
{"lineNum":"  120","line":"\tusing __iter = _Deque_iterator<_Tp, _CvTp&, __ptr_to<_CvTp>>;"},
{"lineNum":"  121","line":"    public:"},
{"lineNum":"  122","line":"      typedef __iter<_Tp>\t\titerator;"},
{"lineNum":"  123","line":"      typedef __iter<const _Tp>\t\tconst_iterator;"},
{"lineNum":"  124","line":"      typedef __ptr_to<_Tp>\t\t_Elt_pointer;"},
{"lineNum":"  125","line":"      typedef __ptr_to<_Elt_pointer>\t_Map_pointer;"},
{"lineNum":"  126","line":"#endif"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"274","possible_hits":"1",},
{"lineNum":"  129","line":"      { return __deque_buf_size(sizeof(_Tp)); }","class":"linePartCov","hits":"1","order":"275","possible_hits":"2",},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"      typedef std::random_access_iterator_tag\titerator_category;"},
{"lineNum":"  132","line":"      typedef _Tp\t\t\t\tvalue_type;"},
{"lineNum":"  133","line":"      typedef _Ptr\t\t\t\tpointer;"},
{"lineNum":"  134","line":"      typedef _Ref\t\t\t\treference;"},
{"lineNum":"  135","line":"      typedef size_t\t\t\t\tsize_type;"},
{"lineNum":"  136","line":"      typedef ptrdiff_t\t\t\t\tdifference_type;"},
{"lineNum":"  137","line":"      typedef _Deque_iterator\t\t\t_Self;"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"      _Elt_pointer _M_cur;"},
{"lineNum":"  140","line":"      _Elt_pointer _M_first;"},
{"lineNum":"  141","line":"      _Elt_pointer _M_last;"},
{"lineNum":"  142","line":"      _Map_pointer _M_node;"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  145","line":"      : _M_cur(__x), _M_first(*__y),"},
{"lineNum":"  146","line":"\t_M_last(*__y + _S_buffer_size()), _M_node(__y) { }"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"      _Deque_iterator() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"178","possible_hits":"1",},
{"lineNum":"  149","line":"      : _M_cur(), _M_first(), _M_last(), _M_node() { }","class":"linePartCov","hits":"1","order":"179","possible_hits":"2",},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"869","possible_hits":"1",},
{"lineNum":"  152","line":"      : _M_cur(__x._M_cur), _M_first(__x._M_first),","class":"lineCov","hits":"2","order":"870","possible_hits":"2",},
{"lineNum":"  153","line":"\t_M_last(__x._M_last), _M_node(__x._M_node) { }","class":"linePartCov","hits":"2","order":"871","possible_hits":"3",},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"      iterator"},
{"lineNum":"  156","line":"      _M_const_cast() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  157","line":"      { return iterator(_M_cur, _M_node); }"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"      reference"},
{"lineNum":"  160","line":"      operator*() const _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"879","possible_hits":"1",},
{"lineNum":"  161","line":"      { return *_M_cur; }","class":"linePartCov","hits":"1","order":"880","possible_hits":"2",},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"      pointer"},
{"lineNum":"  164","line":"      operator->() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  165","line":"      { return _M_cur; }"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"      _Self&"},
{"lineNum":"  168","line":"      operator++() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  169","line":"      {"},
{"lineNum":"  170","line":"\t++_M_cur;"},
{"lineNum":"  171","line":"\tif (_M_cur == _M_last)"},
{"lineNum":"  172","line":"\t  {"},
{"lineNum":"  173","line":"\t    _M_set_node(_M_node + 1);"},
{"lineNum":"  174","line":"\t    _M_cur = _M_first;"},
{"lineNum":"  175","line":"\t  }"},
{"lineNum":"  176","line":"\treturn *this;"},
{"lineNum":"  177","line":"      }"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"      _Self"},
{"lineNum":"  180","line":"      operator++(int) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  181","line":"      {"},
{"lineNum":"  182","line":"\t_Self __tmp = *this;"},
{"lineNum":"  183","line":"\t++*this;"},
{"lineNum":"  184","line":"\treturn __tmp;"},
{"lineNum":"  185","line":"      }"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"      _Self&"},
{"lineNum":"  188","line":"      operator--() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"873","possible_hits":"1",},
{"lineNum":"  189","line":"      {"},
{"lineNum":"  190","line":"\tif (_M_cur == _M_first)","class":"lineCov","hits":"1","order":"874","possible_hits":"1",},
{"lineNum":"  191","line":"\t  {"},
{"lineNum":"  192","line":"\t    _M_set_node(_M_node - 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"\t    _M_cur = _M_last;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":"\t  }"},
{"lineNum":"  195","line":"\t--_M_cur;","class":"lineCov","hits":"1","order":"875","possible_hits":"1",},
{"lineNum":"  196","line":"\treturn *this;","class":"lineCov","hits":"1","order":"876","possible_hits":"1",},
{"lineNum":"  197","line":"      }","class":"linePartCov","hits":"1","order":"877","possible_hits":"2",},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"      _Self"},
{"lineNum":"  200","line":"      operator--(int) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  201","line":"      {"},
{"lineNum":"  202","line":"\t_Self __tmp = *this;"},
{"lineNum":"  203","line":"\t--*this;"},
{"lineNum":"  204","line":"\treturn __tmp;"},
{"lineNum":"  205","line":"      }"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"      _Self&"},
{"lineNum":"  208","line":"      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  209","line":"      {"},
{"lineNum":"  210","line":"\tconst difference_type __offset = __n + (_M_cur - _M_first);"},
{"lineNum":"  211","line":"\tif (__offset >= 0 && __offset < difference_type(_S_buffer_size()))"},
{"lineNum":"  212","line":"\t  _M_cur += __n;"},
{"lineNum":"  213","line":"\telse"},
{"lineNum":"  214","line":"\t  {"},
{"lineNum":"  215","line":"\t    const difference_type __node_offset ="},
{"lineNum":"  216","line":"\t      __offset > 0 ? __offset / difference_type(_S_buffer_size())"},
{"lineNum":"  217","line":"\t\t\t   : -difference_type((-__offset - 1)"},
{"lineNum":"  218","line":"\t\t\t\t\t      / _S_buffer_size()) - 1;"},
{"lineNum":"  219","line":"\t    _M_set_node(_M_node + __node_offset);"},
{"lineNum":"  220","line":"\t    _M_cur = _M_first + (__offset - __node_offset"},
{"lineNum":"  221","line":"\t\t\t\t * difference_type(_S_buffer_size()));"},
{"lineNum":"  222","line":"\t  }"},
{"lineNum":"  223","line":"\treturn *this;"},
{"lineNum":"  224","line":"      }"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"      _Self"},
{"lineNum":"  227","line":"      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  228","line":"      {"},
{"lineNum":"  229","line":"\t_Self __tmp = *this;"},
{"lineNum":"  230","line":"\treturn __tmp += __n;"},
{"lineNum":"  231","line":"      }"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"      _Self&"},
{"lineNum":"  234","line":"      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  235","line":"      { return *this += -__n; }"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"      _Self"},
{"lineNum":"  238","line":"      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  239","line":"      {"},
{"lineNum":"  240","line":"\t_Self __tmp = *this;"},
{"lineNum":"  241","line":"\treturn __tmp -= __n;"},
{"lineNum":"  242","line":"      }"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"      reference"},
{"lineNum":"  245","line":"      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  246","line":"      { return *(*this + __n); }"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"      /**"},
{"lineNum":"  249","line":"       *  Prepares to traverse new_node.  Sets everything except"},
{"lineNum":"  250","line":"       *  _M_cur, which should therefore be set by the caller"},
{"lineNum":"  251","line":"       *  immediately afterwards, based on _M_first and _M_last."},
{"lineNum":"  252","line":"       */"},
{"lineNum":"  253","line":"      void"},
{"lineNum":"  254","line":"      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"270","possible_hits":"1",},
{"lineNum":"  255","line":"      {"},
{"lineNum":"  256","line":"\t_M_node = __new_node;","class":"lineCov","hits":"1","order":"271","possible_hits":"1",},
{"lineNum":"  257","line":"\t_M_first = *__new_node;","class":"lineCov","hits":"1","order":"272","possible_hits":"1",},
{"lineNum":"  258","line":"\t_M_last = _M_first + difference_type(_S_buffer_size());","class":"lineCov","hits":"1","order":"273","possible_hits":"1",},
{"lineNum":"  259","line":"      }","class":"linePartCov","hits":"1","order":"276","possible_hits":"2",},
{"lineNum":"  260","line":"    };"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"  // Note: we also provide overloads whose operands are of the same type in"},
{"lineNum":"  263","line":"  // order to avoid ambiguous overload resolution when std::rel_ops operators"},
{"lineNum":"  264","line":"  // are in scope (for additional details, see libstdc++/3628)"},
{"lineNum":"  265","line":"  template<typename _Tp, typename _Ref, typename _Ptr>"},
{"lineNum":"  266","line":"    inline bool"},
{"lineNum":"  267","line":"    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,","class":"lineCov","hits":"1","order":"1354","possible_hits":"1",},
{"lineNum":"  268","line":"\t       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  269","line":"    { return __x._M_cur == __y._M_cur; }","class":"linePartCov","hits":"1","order":"1355","possible_hits":"2",},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"  template<typename _Tp, typename _RefL, typename _PtrL,"},
{"lineNum":"  272","line":"\t   typename _RefR, typename _PtrR>"},
{"lineNum":"  273","line":"    inline bool"},
{"lineNum":"  274","line":"    operator==(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,"},
{"lineNum":"  275","line":"\t       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  276","line":"    { return __x._M_cur == __y._M_cur; }"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"  template<typename _Tp, typename _Ref, typename _Ptr>"},
{"lineNum":"  279","line":"    inline bool"},
{"lineNum":"  280","line":"    operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,"},
{"lineNum":"  281","line":"\t       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  282","line":"    { return !(__x == __y); }"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"  template<typename _Tp, typename _RefL, typename _PtrL,"},
{"lineNum":"  285","line":"\t   typename _RefR, typename _PtrR>"},
{"lineNum":"  286","line":"    inline bool"},
{"lineNum":"  287","line":"    operator!=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,"},
{"lineNum":"  288","line":"\t       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  289","line":"    { return !(__x == __y); }"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"  template<typename _Tp, typename _Ref, typename _Ptr>"},
{"lineNum":"  292","line":"    inline bool"},
{"lineNum":"  293","line":"    operator<(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,"},
{"lineNum":"  294","line":"\t      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  295","line":"    { return (__x._M_node == __y._M_node) ? (__x._M_cur < __y._M_cur)"},
{"lineNum":"  296","line":"\t\t\t\t\t  : (__x._M_node < __y._M_node); }"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"  template<typename _Tp, typename _RefL, typename _PtrL,"},
{"lineNum":"  299","line":"\t   typename _RefR, typename _PtrR>"},
{"lineNum":"  300","line":"    inline bool"},
{"lineNum":"  301","line":"    operator<(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,"},
{"lineNum":"  302","line":"\t      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  303","line":"    { return (__x._M_node == __y._M_node) ? (__x._M_cur < __y._M_cur)"},
{"lineNum":"  304","line":"\t\t\t\t\t  : (__x._M_node < __y._M_node); }"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"  template<typename _Tp, typename _Ref, typename _Ptr>"},
{"lineNum":"  307","line":"    inline bool"},
{"lineNum":"  308","line":"    operator>(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,"},
{"lineNum":"  309","line":"\t      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  310","line":"    { return __y < __x; }"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"  template<typename _Tp, typename _RefL, typename _PtrL,"},
{"lineNum":"  313","line":"\t   typename _RefR, typename _PtrR>"},
{"lineNum":"  314","line":"    inline bool"},
{"lineNum":"  315","line":"    operator>(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,"},
{"lineNum":"  316","line":"\t      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  317","line":"    { return __y < __x; }"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"  template<typename _Tp, typename _Ref, typename _Ptr>"},
{"lineNum":"  320","line":"    inline bool"},
{"lineNum":"  321","line":"    operator<=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,"},
{"lineNum":"  322","line":"\t       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  323","line":"    { return !(__y < __x); }"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"  template<typename _Tp, typename _RefL, typename _PtrL,"},
{"lineNum":"  326","line":"\t   typename _RefR, typename _PtrR>"},
{"lineNum":"  327","line":"    inline bool"},
{"lineNum":"  328","line":"    operator<=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,"},
{"lineNum":"  329","line":"\t       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  330","line":"    { return !(__y < __x); }"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"  template<typename _Tp, typename _Ref, typename _Ptr>"},
{"lineNum":"  333","line":"    inline bool"},
{"lineNum":"  334","line":"    operator>=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,"},
{"lineNum":"  335","line":"\t       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  336","line":"    { return !(__x < __y); }"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"  template<typename _Tp, typename _RefL, typename _PtrL,"},
{"lineNum":"  339","line":"\t   typename _RefR, typename _PtrR>"},
{"lineNum":"  340","line":"    inline bool"},
{"lineNum":"  341","line":"    operator>=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,"},
{"lineNum":"  342","line":"\t       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  343","line":"    { return !(__x < __y); }"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"  // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  346","line":"  // According to the resolution of DR179 not only the various comparison"},
{"lineNum":"  347","line":"  // operators but also operator- must accept mixed iterator/const_iterator"},
{"lineNum":"  348","line":"  // parameters."},
{"lineNum":"  349","line":"  template<typename _Tp, typename _Ref, typename _Ptr>"},
{"lineNum":"  350","line":"    inline typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type"},
{"lineNum":"  351","line":"    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,"},
{"lineNum":"  352","line":"\t      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  353","line":"    {"},
{"lineNum":"  354","line":"      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type"},
{"lineNum":"  355","line":"\t(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())"},
{"lineNum":"  356","line":"\t* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)"},
{"lineNum":"  357","line":"\t+ (__y._M_last - __y._M_cur);"},
{"lineNum":"  358","line":"    }"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"  template<typename _Tp, typename _RefL, typename _PtrL,"},
{"lineNum":"  361","line":"\t   typename _RefR, typename _PtrR>"},
{"lineNum":"  362","line":"    inline typename _Deque_iterator<_Tp, _RefL, _PtrL>::difference_type"},
{"lineNum":"  363","line":"    operator-(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,"},
{"lineNum":"  364","line":"\t      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  365","line":"    {"},
{"lineNum":"  366","line":"      return typename _Deque_iterator<_Tp, _RefL, _PtrL>::difference_type"},
{"lineNum":"  367","line":"\t(_Deque_iterator<_Tp, _RefL, _PtrL>::_S_buffer_size())"},
{"lineNum":"  368","line":"\t* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)"},
{"lineNum":"  369","line":"\t+ (__y._M_last - __y._M_cur);"},
{"lineNum":"  370","line":"    }"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"  template<typename _Tp, typename _Ref, typename _Ptr>"},
{"lineNum":"  373","line":"    inline _Deque_iterator<_Tp, _Ref, _Ptr>"},
{"lineNum":"  374","line":"    operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)"},
{"lineNum":"  375","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":"  376","line":"    { return __x + __n; }"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"  template<typename _Tp>"},
{"lineNum":"  379","line":"    void"},
{"lineNum":"  380","line":"    fill(const _Deque_iterator<_Tp, _Tp&, _Tp*>&,"},
{"lineNum":"  381","line":"\t const _Deque_iterator<_Tp, _Tp&, _Tp*>&, const _Tp&);"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"  template<typename _Tp>"},
{"lineNum":"  384","line":"    _Deque_iterator<_Tp, _Tp&, _Tp*>"},
{"lineNum":"  385","line":"    copy(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,"},
{"lineNum":"  386","line":"\t _Deque_iterator<_Tp, const _Tp&, const _Tp*>,"},
{"lineNum":"  387","line":"\t _Deque_iterator<_Tp, _Tp&, _Tp*>);"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"  template<typename _Tp>"},
{"lineNum":"  390","line":"    inline _Deque_iterator<_Tp, _Tp&, _Tp*>"},
{"lineNum":"  391","line":"    copy(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,"},
{"lineNum":"  392","line":"\t _Deque_iterator<_Tp, _Tp&, _Tp*> __last,"},
{"lineNum":"  393","line":"\t _Deque_iterator<_Tp, _Tp&, _Tp*> __result)"},
{"lineNum":"  394","line":"    { return std::copy(_Deque_iterator<_Tp, const _Tp&, const _Tp*>(__first),"},
{"lineNum":"  395","line":"\t\t       _Deque_iterator<_Tp, const _Tp&, const _Tp*>(__last),"},
{"lineNum":"  396","line":"\t\t       __result); }"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"  template<typename _Tp>"},
{"lineNum":"  399","line":"    _Deque_iterator<_Tp, _Tp&, _Tp*>"},
{"lineNum":"  400","line":"    copy_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,"},
{"lineNum":"  401","line":"\t\t  _Deque_iterator<_Tp, const _Tp&, const _Tp*>,"},
{"lineNum":"  402","line":"\t\t  _Deque_iterator<_Tp, _Tp&, _Tp*>);"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"  template<typename _Tp>"},
{"lineNum":"  405","line":"    inline _Deque_iterator<_Tp, _Tp&, _Tp*>"},
{"lineNum":"  406","line":"    copy_backward(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,"},
{"lineNum":"  407","line":"\t\t  _Deque_iterator<_Tp, _Tp&, _Tp*> __last,"},
{"lineNum":"  408","line":"\t\t  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)"},
{"lineNum":"  409","line":"    { return std::copy_backward(_Deque_iterator<_Tp,"},
{"lineNum":"  410","line":"\t\t\t\tconst _Tp&, const _Tp*>(__first),"},
{"lineNum":"  411","line":"\t\t\t\t_Deque_iterator<_Tp,"},
{"lineNum":"  412","line":"\t\t\t\tconst _Tp&, const _Tp*>(__last),"},
{"lineNum":"  413","line":"\t\t\t\t__result); }"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  416","line":"  template<typename _Tp>"},
{"lineNum":"  417","line":"    _Deque_iterator<_Tp, _Tp&, _Tp*>"},
{"lineNum":"  418","line":"    move(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,"},
{"lineNum":"  419","line":"\t _Deque_iterator<_Tp, const _Tp&, const _Tp*>,"},
{"lineNum":"  420","line":"\t _Deque_iterator<_Tp, _Tp&, _Tp*>);"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"  template<typename _Tp>"},
{"lineNum":"  423","line":"    inline _Deque_iterator<_Tp, _Tp&, _Tp*>"},
{"lineNum":"  424","line":"    move(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,"},
{"lineNum":"  425","line":"\t _Deque_iterator<_Tp, _Tp&, _Tp*> __last,"},
{"lineNum":"  426","line":"\t _Deque_iterator<_Tp, _Tp&, _Tp*> __result)"},
{"lineNum":"  427","line":"    { return std::move(_Deque_iterator<_Tp, const _Tp&, const _Tp*>(__first),"},
{"lineNum":"  428","line":"\t\t       _Deque_iterator<_Tp, const _Tp&, const _Tp*>(__last),"},
{"lineNum":"  429","line":"\t\t       __result); }"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"  template<typename _Tp>"},
{"lineNum":"  432","line":"    _Deque_iterator<_Tp, _Tp&, _Tp*>"},
{"lineNum":"  433","line":"    move_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,"},
{"lineNum":"  434","line":"\t\t  _Deque_iterator<_Tp, const _Tp&, const _Tp*>,"},
{"lineNum":"  435","line":"\t\t  _Deque_iterator<_Tp, _Tp&, _Tp*>);"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"  template<typename _Tp>"},
{"lineNum":"  438","line":"    inline _Deque_iterator<_Tp, _Tp&, _Tp*>"},
{"lineNum":"  439","line":"    move_backward(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,"},
{"lineNum":"  440","line":"\t\t  _Deque_iterator<_Tp, _Tp&, _Tp*> __last,"},
{"lineNum":"  441","line":"\t\t  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)"},
{"lineNum":"  442","line":"    { return std::move_backward(_Deque_iterator<_Tp,"},
{"lineNum":"  443","line":"\t\t\t\tconst _Tp&, const _Tp*>(__first),"},
{"lineNum":"  444","line":"\t\t\t\t_Deque_iterator<_Tp,"},
{"lineNum":"  445","line":"\t\t\t\tconst _Tp&, const _Tp*>(__last),"},
{"lineNum":"  446","line":"\t\t\t\t__result); }"},
{"lineNum":"  447","line":"#endif"},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"  /**"},
{"lineNum":"  450","line":"   *  Deque base class.  This class provides the unified face for %deque\'s"},
{"lineNum":"  451","line":"   *  allocation.  This class\'s constructor and destructor allocate and"},
{"lineNum":"  452","line":"   *  deallocate (but do not initialize) storage.  This makes %exception"},
{"lineNum":"  453","line":"   *  safety easier."},
{"lineNum":"  454","line":"   *"},
{"lineNum":"  455","line":"   *  Nothing in this class ever constructs or destroys an actual Tp element."},
{"lineNum":"  456","line":"   *  (Deque handles that itself.)  Only/All memory management is performed"},
{"lineNum":"  457","line":"   *  here."},
{"lineNum":"  458","line":"  */"},
{"lineNum":"  459","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  460","line":"    class _Deque_base"},
{"lineNum":"  461","line":"    {"},
{"lineNum":"  462","line":"    protected:"},
{"lineNum":"  463","line":"      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template"},
{"lineNum":"  464","line":"\trebind<_Tp>::other _Tp_alloc_type;"},
{"lineNum":"  465","line":"      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>\t _Alloc_traits;"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"#if __cplusplus < 201103L"},
{"lineNum":"  468","line":"      typedef _Tp*\t\t\t\t\t_Ptr;"},
{"lineNum":"  469","line":"      typedef const _Tp*\t\t\t\t_Ptr_const;"},
{"lineNum":"  470","line":"#else"},
{"lineNum":"  471","line":"      typedef typename _Alloc_traits::pointer\t\t_Ptr;"},
{"lineNum":"  472","line":"      typedef typename _Alloc_traits::const_pointer\t_Ptr_const;"},
{"lineNum":"  473","line":"#endif"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"      typedef typename _Alloc_traits::template rebind<_Ptr>::other"},
{"lineNum":"  476","line":"\t_Map_alloc_type;"},
{"lineNum":"  477","line":"      typedef __gnu_cxx::__alloc_traits<_Map_alloc_type> _Map_alloc_traits;"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"    public:"},
{"lineNum":"  480","line":"      typedef _Alloc\t\t  allocator_type;"},
{"lineNum":"  481","line":"      typedef typename _Alloc_traits::size_type size_type;"},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"      allocator_type"},
{"lineNum":"  484","line":"      get_allocator() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  485","line":"      { return allocator_type(_M_get_Tp_allocator()); }"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"      typedef _Deque_iterator<_Tp, _Tp&, _Ptr>\t  iterator;"},
{"lineNum":"  488","line":"      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;"},
{"lineNum":"  489","line":""},
{"lineNum":"  490","line":"      _Deque_base()","class":"lineCov","hits":"1","order":"172","possible_hits":"1",},
{"lineNum":"  491","line":"      : _M_impl()","class":"linePartCov","hits":"1","order":"173","possible_hits":"2",},
{"lineNum":"  492","line":"      { _M_initialize_map(0); }","class":"linePartCov","hits":"2","order":"181","possible_hits":"3",},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"      _Deque_base(size_t __num_elements)"},
{"lineNum":"  495","line":"      : _M_impl()"},
{"lineNum":"  496","line":"      { _M_initialize_map(__num_elements); }"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"      _Deque_base(const allocator_type& __a, size_t __num_elements)"},
{"lineNum":"  499","line":"      : _M_impl(__a)"},
{"lineNum":"  500","line":"      { _M_initialize_map(__num_elements); }"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"      _Deque_base(const allocator_type& __a)"},
{"lineNum":"  503","line":"      : _M_impl(__a)"},
{"lineNum":"  504","line":"      { /* Caller must initialize map. */ }"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  507","line":"      _Deque_base(_Deque_base&& __x, false_type)"},
{"lineNum":"  508","line":"      : _M_impl(__x._M_move_impl())"},
{"lineNum":"  509","line":"      { }"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"      _Deque_base(_Deque_base&& __x, true_type)"},
{"lineNum":"  512","line":"      : _M_impl(std::move(__x._M_get_Tp_allocator()))"},
{"lineNum":"  513","line":"      {"},
{"lineNum":"  514","line":"\t_M_initialize_map(0);"},
{"lineNum":"  515","line":"\tif (__x._M_impl._M_map)"},
{"lineNum":"  516","line":"\t  this->_M_impl._M_swap_data(__x._M_impl);"},
{"lineNum":"  517","line":"      }"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"      _Deque_base(_Deque_base&& __x)"},
{"lineNum":"  520","line":"      : _Deque_base(std::move(__x), typename _Alloc_traits::is_always_equal{})"},
{"lineNum":"  521","line":"      { }"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"      _Deque_base(_Deque_base&& __x, const allocator_type& __a, size_type __n)"},
{"lineNum":"  524","line":"      : _M_impl(__a)"},
{"lineNum":"  525","line":"      {"},
{"lineNum":"  526","line":"\tif (__x.get_allocator() == __a)"},
{"lineNum":"  527","line":"\t  {"},
{"lineNum":"  528","line":"\t    if (__x._M_impl._M_map)"},
{"lineNum":"  529","line":"\t      {"},
{"lineNum":"  530","line":"\t\t_M_initialize_map(0);"},
{"lineNum":"  531","line":"\t\tthis->_M_impl._M_swap_data(__x._M_impl);"},
{"lineNum":"  532","line":"\t      }"},
{"lineNum":"  533","line":"\t  }"},
{"lineNum":"  534","line":"\telse"},
{"lineNum":"  535","line":"\t  {"},
{"lineNum":"  536","line":"\t    _M_initialize_map(__n);"},
{"lineNum":"  537","line":"\t  }"},
{"lineNum":"  538","line":"      }"},
{"lineNum":"  539","line":"#endif"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"      ~_Deque_base() _GLIBCXX_NOEXCEPT;"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"    protected:"},
{"lineNum":"  544","line":"      typedef typename iterator::_Map_pointer _Map_pointer;"},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"      //This struct encapsulates the implementation of the std::deque"},
{"lineNum":"  547","line":"      //standard container and at the same time makes use of the EBO"},
{"lineNum":"  548","line":"      //for empty allocators."},
{"lineNum":"  549","line":"      struct _Deque_impl","class":"linePartCov","hits":"2","order":"2057","possible_hits":"3",},
{"lineNum":"  550","line":"      : public _Tp_alloc_type"},
{"lineNum":"  551","line":"      {"},
{"lineNum":"  552","line":"\t_Map_pointer _M_map;"},
{"lineNum":"  553","line":"\tsize_t _M_map_size;"},
{"lineNum":"  554","line":"\titerator _M_start;"},
{"lineNum":"  555","line":"\titerator _M_finish;"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"\t_Deque_impl()","class":"lineCov","hits":"1","order":"174","possible_hits":"1",},
{"lineNum":"  558","line":"\t: _Tp_alloc_type(), _M_map(), _M_map_size(0),"},
{"lineNum":"  559","line":"\t  _M_start(), _M_finish()","class":"lineCov","hits":"1","order":"175","possible_hits":"1",},
{"lineNum":"  560","line":"\t{ }","class":"linePartCov","hits":"1","order":"180","possible_hits":"2",},
{"lineNum":"  561","line":""},
{"lineNum":"  562","line":"\t_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  563","line":"\t: _Tp_alloc_type(__a), _M_map(), _M_map_size(0),"},
{"lineNum":"  564","line":"\t  _M_start(), _M_finish()"},
{"lineNum":"  565","line":"\t{ }"},
{"lineNum":"  566","line":""},
{"lineNum":"  567","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  568","line":"\t_Deque_impl(_Deque_impl&&) = default;"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"\t_Deque_impl(_Tp_alloc_type&& __a) noexcept"},
{"lineNum":"  571","line":"\t: _Tp_alloc_type(std::move(__a)), _M_map(), _M_map_size(0),"},
{"lineNum":"  572","line":"\t  _M_start(), _M_finish()"},
{"lineNum":"  573","line":"\t{ }"},
{"lineNum":"  574","line":"#endif"},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"\tvoid _M_swap_data(_Deque_impl& __x) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  577","line":"\t{"},
{"lineNum":"  578","line":"\t  using std::swap;"},
{"lineNum":"  579","line":"\t  swap(this->_M_start, __x._M_start);"},
{"lineNum":"  580","line":"\t  swap(this->_M_finish, __x._M_finish);"},
{"lineNum":"  581","line":"\t  swap(this->_M_map, __x._M_map);"},
{"lineNum":"  582","line":"\t  swap(this->_M_map_size, __x._M_map_size);"},
{"lineNum":"  583","line":"\t}"},
{"lineNum":"  584","line":"      };"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"      _Tp_alloc_type&"},
{"lineNum":"  587","line":"      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1988","possible_hits":"1",},
{"lineNum":"  588","line":"      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }","class":"linePartCov","hits":"1","order":"1989","possible_hits":"2",},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"      const _Tp_alloc_type&"},
{"lineNum":"  591","line":"      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"197","possible_hits":"1",},
{"lineNum":"  592","line":"      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }","class":"linePartCov","hits":"1","order":"198","possible_hits":"2",},
{"lineNum":"  593","line":""},
{"lineNum":"  594","line":"      _Map_alloc_type"},
{"lineNum":"  595","line":"      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"195","possible_hits":"1",},
{"lineNum":"  596","line":"      { return _Map_alloc_type(_M_get_Tp_allocator()); }","class":"linePartCov","hits":"1","order":"196","possible_hits":"2",},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"      _Ptr"},
{"lineNum":"  599","line":"      _M_allocate_node()","class":"lineCov","hits":"1","order":"265","possible_hits":"1",},
{"lineNum":"  600","line":"      {"},
{"lineNum":"  601","line":"\ttypedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;"},
{"lineNum":"  602","line":"\treturn _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));","class":"lineCov","hits":"1","order":"266","possible_hits":"1",},
{"lineNum":"  603","line":"      }","class":"linePartCov","hits":"1","order":"267","possible_hits":"2",},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"      void"},
{"lineNum":"  606","line":"      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"2018","possible_hits":"1",},
{"lineNum":"  607","line":"      {"},
{"lineNum":"  608","line":"\ttypedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;"},
{"lineNum":"  609","line":"\t_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));","class":"lineCov","hits":"1","order":"2019","possible_hits":"1",},
{"lineNum":"  610","line":"      }","class":"linePartCov","hits":"1","order":"2049","possible_hits":"2",},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"      _Map_pointer"},
{"lineNum":"  613","line":"      _M_allocate_map(size_t __n)","class":"lineCov","hits":"2","order":"193","possible_hits":"2",},
{"lineNum":"  614","line":"      {"},
{"lineNum":"  615","line":"\t_Map_alloc_type __map_alloc = _M_get_map_allocator();","class":"linePartCov","hits":"2","order":"194","possible_hits":"3",},
{"lineNum":"  616","line":"\treturn _Map_alloc_traits::allocate(__map_alloc, __n);","class":"lineCov","hits":"2","order":"200","possible_hits":"2",},
{"lineNum":"  617","line":"      }","class":"linePartCov","hits":"1","order":"257","possible_hits":"3",},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"      void"},
{"lineNum":"  620","line":"      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"2","order":"2052","possible_hits":"2",},
{"lineNum":"  621","line":"      {"},
{"lineNum":"  622","line":"\t_Map_alloc_type __map_alloc = _M_get_map_allocator();","class":"lineCov","hits":"2","order":"2053","possible_hits":"2",},
{"lineNum":"  623","line":"\t_Map_alloc_traits::deallocate(__map_alloc, __p, __n);","class":"lineCov","hits":"1","order":"2054","possible_hits":"1",},
{"lineNum":"  624","line":"      }","class":"linePartCov","hits":"1","order":"2055","possible_hits":"2",},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"    protected:"},
{"lineNum":"  627","line":"      void _M_initialize_map(size_t);"},
{"lineNum":"  628","line":"      void _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish);"},
{"lineNum":"  629","line":"      void _M_destroy_nodes(_Map_pointer __nstart,"},
{"lineNum":"  630","line":"\t\t\t    _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT;"},
{"lineNum":"  631","line":"      enum { _S_initial_map_size = 8 };"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"      _Deque_impl _M_impl;"},
{"lineNum":"  634","line":""},
{"lineNum":"  635","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  636","line":"    private:"},
{"lineNum":"  637","line":"      _Deque_impl"},
{"lineNum":"  638","line":"      _M_move_impl()"},
{"lineNum":"  639","line":"      {"},
{"lineNum":"  640","line":"\tif (!_M_impl._M_map)"},
{"lineNum":"  641","line":"\t  return std::move(_M_impl);"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"\t// Create a copy of the current allocator."},
{"lineNum":"  644","line":"\t_Tp_alloc_type __alloc{_M_get_Tp_allocator()};"},
{"lineNum":"  645","line":"\t// Put that copy in a moved-from state."},
{"lineNum":"  646","line":"\t_Tp_alloc_type __sink __attribute((__unused__)) {std::move(__alloc)};"},
{"lineNum":"  647","line":"\t// Create an empty map that allocates using the moved-from allocator."},
{"lineNum":"  648","line":"\t_Deque_base __empty{__alloc};"},
{"lineNum":"  649","line":"\t__empty._M_initialize_map(0);"},
{"lineNum":"  650","line":"\t// Now safe to modify current allocator and perform non-throwing swaps."},
{"lineNum":"  651","line":"\t_Deque_impl __ret{std::move(_M_get_Tp_allocator())};"},
{"lineNum":"  652","line":"\t_M_impl._M_swap_data(__ret);"},
{"lineNum":"  653","line":"\t_M_impl._M_swap_data(__empty._M_impl);"},
{"lineNum":"  654","line":"\treturn __ret;"},
{"lineNum":"  655","line":"      }"},
{"lineNum":"  656","line":"#endif"},
{"lineNum":"  657","line":"    };"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  660","line":"    _Deque_base<_Tp, _Alloc>::","class":"lineCov","hits":"1","order":"2011","possible_hits":"1",},
{"lineNum":"  661","line":"    ~_Deque_base() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  662","line":"    {"},
{"lineNum":"  663","line":"      if (this->_M_impl._M_map)","class":"lineCov","hits":"1","order":"2012","possible_hits":"1",},
{"lineNum":"  664","line":"\t{"},
{"lineNum":"  665","line":"\t  _M_destroy_nodes(this->_M_impl._M_start._M_node,","class":"lineCov","hits":"1","order":"2014","possible_hits":"1",},
{"lineNum":"  666","line":"\t\t\t   this->_M_impl._M_finish._M_node + 1);","class":"lineCov","hits":"1","order":"2013","possible_hits":"1",},
{"lineNum":"  667","line":"\t  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);","class":"lineCov","hits":"1","order":"2051","possible_hits":"1",},
{"lineNum":"  668","line":"\t}"},
{"lineNum":"  669","line":"    }","class":"linePartCov","hits":"1","order":"2056","possible_hits":"2",},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"  /**"},
{"lineNum":"  672","line":"   *  @brief Layout storage."},
{"lineNum":"  673","line":"   *  @param  __num_elements  The count of T\'s for which to allocate space"},
{"lineNum":"  674","line":"   *                          at first."},
{"lineNum":"  675","line":"   *  @return   Nothing."},
{"lineNum":"  676","line":"   *"},
{"lineNum":"  677","line":"   *  The initial underlying memory layout is a bit complicated..."},
{"lineNum":"  678","line":"  */"},
{"lineNum":"  679","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  680","line":"    void"},
{"lineNum":"  681","line":"    _Deque_base<_Tp, _Alloc>::","class":"lineCov","hits":"2","order":"182","possible_hits":"2",},
{"lineNum":"  682","line":"    _M_initialize_map(size_t __num_elements)"},
{"lineNum":"  683","line":"    {"},
{"lineNum":"  684","line":"      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))","class":"lineCov","hits":"1","order":"183","possible_hits":"1",},
{"lineNum":"  685","line":"\t\t\t\t  + 1);"},
{"lineNum":"  686","line":""},
{"lineNum":"  687","line":"      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,","class":"lineCov","hits":"1","order":"191","possible_hits":"1",},
{"lineNum":"  688","line":"\t\t\t\t\t   size_t(__num_nodes + 2));","class":"lineCov","hits":"1","order":"186","possible_hits":"1",},
{"lineNum":"  689","line":"      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);","class":"lineCov","hits":"1","order":"192","possible_hits":"1",},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"      // For \"small\" maps (needing less than _M_map_size nodes), allocation"},
{"lineNum":"  692","line":"      // starts in the middle elements and grows outwards.  So nstart may be"},
{"lineNum":"  693","line":"      // the beginning of _M_map, but for small maps it may be as far in as"},
{"lineNum":"  694","line":"      // _M_map+3."},
{"lineNum":"  695","line":""},
{"lineNum":"  696","line":"      _Map_pointer __nstart = (this->_M_impl._M_map","class":"lineCov","hits":"2","order":"258","possible_hits":"2",},
{"lineNum":"  697","line":"\t\t\t       + (this->_M_impl._M_map_size - __num_nodes) / 2);","class":"lineCov","hits":"1","order":"259","possible_hits":"1",},
{"lineNum":"  698","line":"      _Map_pointer __nfinish = __nstart + __num_nodes;","class":"lineCov","hits":"1","order":"260","possible_hits":"1",},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"      __try"},
{"lineNum":"  701","line":"\t{ _M_create_nodes(__nstart, __nfinish); }","class":"lineCov","hits":"1","order":"261","possible_hits":"1",},
{"lineNum":"  702","line":"      __catch(...)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  703","line":"\t{"},
{"lineNum":"  704","line":"\t  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  705","line":"\t  this->_M_impl._M_map = _Map_pointer();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  706","line":"\t  this->_M_impl._M_map_size = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  707","line":"\t  __throw_exception_again;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  708","line":"\t}"},
{"lineNum":"  709","line":""},
{"lineNum":"  710","line":"      this->_M_impl._M_start._M_set_node(__nstart);","class":"lineCov","hits":"1","order":"269","possible_hits":"1",},
{"lineNum":"  711","line":"      this->_M_impl._M_finish._M_set_node(__nfinish - 1);","class":"lineCov","hits":"1","order":"277","possible_hits":"1",},
{"lineNum":"  712","line":"      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;","class":"lineCov","hits":"1","order":"278","possible_hits":"1",},
{"lineNum":"  713","line":"      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first","class":"lineCov","hits":"2","order":"279","possible_hits":"2",},
{"lineNum":"  714","line":"\t\t\t\t\t+ __num_elements","class":"lineCov","hits":"1","order":"281","possible_hits":"1",},
{"lineNum":"  715","line":"\t\t\t\t\t% __deque_buf_size(sizeof(_Tp)));","class":"lineCov","hits":"1","order":"280","possible_hits":"1",},
{"lineNum":"  716","line":"    }","class":"linePartCov","hits":"1","order":"282","possible_hits":"3",},
{"lineNum":"  717","line":""},
{"lineNum":"  718","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  719","line":"    void"},
{"lineNum":"  720","line":"    _Deque_base<_Tp, _Alloc>::","class":"lineCov","hits":"1","order":"262","possible_hits":"1",},
{"lineNum":"  721","line":"    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)"},
{"lineNum":"  722","line":"    {"},
{"lineNum":"  723","line":"      _Map_pointer __cur;"},
{"lineNum":"  724","line":"      __try"},
{"lineNum":"  725","line":"\t{"},
{"lineNum":"  726","line":"\t  for (__cur = __nstart; __cur < __nfinish; ++__cur)","class":"lineCov","hits":"2","order":"263","possible_hits":"2",},
{"lineNum":"  727","line":"\t    *__cur = this->_M_allocate_node();","class":"lineCov","hits":"1","order":"264","possible_hits":"1",},
{"lineNum":"  728","line":"\t}"},
{"lineNum":"  729","line":"      __catch(...)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  730","line":"\t{"},
{"lineNum":"  731","line":"\t  _M_destroy_nodes(__nstart, __cur);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  732","line":"\t  __throw_exception_again;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  733","line":"\t}"},
{"lineNum":"  734","line":"    }","class":"linePartCov","hits":"1","order":"268","possible_hits":"2",},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  737","line":"    void"},
{"lineNum":"  738","line":"    _Deque_base<_Tp, _Alloc>::","class":"lineCov","hits":"1","order":"2015","possible_hits":"1",},
{"lineNum":"  739","line":"    _M_destroy_nodes(_Map_pointer __nstart,"},
{"lineNum":"  740","line":"\t\t     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  741","line":"    {"},
{"lineNum":"  742","line":"      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)","class":"lineCov","hits":"2","order":"2016","possible_hits":"2",},
{"lineNum":"  743","line":"\t_M_deallocate_node(*__n);","class":"lineCov","hits":"1","order":"2017","possible_hits":"1",},
{"lineNum":"  744","line":"    }","class":"linePartCov","hits":"1","order":"2050","possible_hits":"2",},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"  /**"},
{"lineNum":"  747","line":"   *  @brief  A standard container using fixed-size memory allocation and"},
{"lineNum":"  748","line":"   *  constant-time manipulation of elements at either end."},
{"lineNum":"  749","line":"   *"},
{"lineNum":"  750","line":"   *  @ingroup sequences"},
{"lineNum":"  751","line":"   *"},
{"lineNum":"  752","line":"   *  @tparam _Tp  Type of element."},
{"lineNum":"  753","line":"   *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>."},
{"lineNum":"  754","line":"   *"},
{"lineNum":"  755","line":"   *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a"},
{"lineNum":"  756","line":"   *  <a href=\"tables.html#66\">reversible container</a>, and a"},
{"lineNum":"  757","line":"   *  <a href=\"tables.html#67\">sequence</a>, including the"},
{"lineNum":"  758","line":"   *  <a href=\"tables.html#68\">optional sequence requirements</a>."},
{"lineNum":"  759","line":"   *"},
{"lineNum":"  760","line":"   *  In previous HP/SGI versions of deque, there was an extra template"},
{"lineNum":"  761","line":"   *  parameter so users could control the node size.  This extension turned"},
{"lineNum":"  762","line":"   *  out to violate the C++ standard (it can be detected using template"},
{"lineNum":"  763","line":"   *  template parameters), and it was removed."},
{"lineNum":"  764","line":"   *"},
{"lineNum":"  765","line":"   *  Here\'s how a deque<Tp> manages memory.  Each deque has 4 members:"},
{"lineNum":"  766","line":"   *"},
{"lineNum":"  767","line":"   *  - Tp**        _M_map"},
{"lineNum":"  768","line":"   *  - size_t      _M_map_size"},
{"lineNum":"  769","line":"   *  - iterator    _M_start, _M_finish"},
{"lineNum":"  770","line":"   *"},
{"lineNum":"  771","line":"   *  map_size is at least 8.  %map is an array of map_size"},
{"lineNum":"  772","line":"   *  pointers-to-@a nodes.  (The name %map has nothing to do with the"},
{"lineNum":"  773","line":"   *  std::map class, and @b nodes should not be confused with"},
{"lineNum":"  774","line":"   *  std::list\'s usage of @a node.)"},
{"lineNum":"  775","line":"   *"},
{"lineNum":"  776","line":"   *  A @a node has no specific type name as such, but it is referred"},
{"lineNum":"  777","line":"   *  to as @a node in this file.  It is a simple array-of-Tp.  If Tp"},
{"lineNum":"  778","line":"   *  is very large, there will be one Tp element per node (i.e., an"},
{"lineNum":"  779","line":"   *  @a array of one).  For non-huge Tp\'s, node size is inversely"},
{"lineNum":"  780","line":"   *  related to Tp size: the larger the Tp, the fewer Tp\'s will fit"},
{"lineNum":"  781","line":"   *  in a node.  The goal here is to keep the total size of a node"},
{"lineNum":"  782","line":"   *  relatively small and constant over different Tp\'s, to improve"},
{"lineNum":"  783","line":"   *  allocator efficiency."},
{"lineNum":"  784","line":"   *"},
{"lineNum":"  785","line":"   *  Not every pointer in the %map array will point to a node.  If"},
{"lineNum":"  786","line":"   *  the initial number of elements in the deque is small, the"},
{"lineNum":"  787","line":"   *  /middle/ %map pointers will be valid, and the ones at the edges"},
{"lineNum":"  788","line":"   *  will be unused.  This same situation will arise as the %map"},
{"lineNum":"  789","line":"   *  grows: available %map pointers, if any, will be on the ends.  As"},
{"lineNum":"  790","line":"   *  new nodes are created, only a subset of the %map\'s pointers need"},
{"lineNum":"  791","line":"   *  to be copied @a outward."},
{"lineNum":"  792","line":"   *"},
{"lineNum":"  793","line":"   *  Class invariants:"},
{"lineNum":"  794","line":"   * - For any nonsingular iterator i:"},
{"lineNum":"  795","line":"   *    - i.node points to a member of the %map array.  (Yes, you read that"},
{"lineNum":"  796","line":"   *      correctly:  i.node does not actually point to a node.)  The member of"},
{"lineNum":"  797","line":"   *      the %map array is what actually points to the node."},
{"lineNum":"  798","line":"   *    - i.first == *(i.node)    (This points to the node (first Tp element).)"},
{"lineNum":"  799","line":"   *    - i.last  == i.first + node_size"},
{"lineNum":"  800","line":"   *    - i.cur is a pointer in the range [i.first, i.last).  NOTE:"},
{"lineNum":"  801","line":"   *      the implication of this is that i.cur is always a dereferenceable"},
{"lineNum":"  802","line":"   *      pointer, even if i is a past-the-end iterator."},
{"lineNum":"  803","line":"   * - Start and Finish are always nonsingular iterators.  NOTE: this"},
{"lineNum":"  804","line":"   * means that an empty deque must have one node, a deque with <N"},
{"lineNum":"  805","line":"   * elements (where N is the node buffer size) must have one node, a"},
{"lineNum":"  806","line":"   * deque with N through (2N-1) elements must have two nodes, etc."},
{"lineNum":"  807","line":"   * - For every node other than start.node and finish.node, every"},
{"lineNum":"  808","line":"   * element in the node is an initialized object.  If start.node =="},
{"lineNum":"  809","line":"   * finish.node, then [start.cur, finish.cur) are initialized"},
{"lineNum":"  810","line":"   * objects, and the elements outside that range are uninitialized"},
{"lineNum":"  811","line":"   * storage.  Otherwise, [start.cur, start.last) and [finish.first,"},
{"lineNum":"  812","line":"   * finish.cur) are initialized objects, and [start.first, start.cur)"},
{"lineNum":"  813","line":"   * and [finish.cur, finish.last) are uninitialized storage."},
{"lineNum":"  814","line":"   * - [%map, %map + map_size) is a valid, non-empty range."},
{"lineNum":"  815","line":"   * - [start.node, finish.node] is a valid range contained within"},
{"lineNum":"  816","line":"   *   [%map, %map + map_size)."},
{"lineNum":"  817","line":"   * - A pointer in the range [%map, %map + map_size) points to an allocated"},
{"lineNum":"  818","line":"   *   node if and only if the pointer is in the range"},
{"lineNum":"  819","line":"   *   [start.node, finish.node]."},
{"lineNum":"  820","line":"   *"},
{"lineNum":"  821","line":"   *  Here\'s the magic:  nothing in deque is @b aware of the discontiguous"},
{"lineNum":"  822","line":"   *  storage!"},
{"lineNum":"  823","line":"   *"},
{"lineNum":"  824","line":"   *  The memory setup and layout occurs in the parent, _Base, and the iterator"},
{"lineNum":"  825","line":"   *  class is entirely responsible for @a leaping from one node to the next."},
{"lineNum":"  826","line":"   *  All the implementation routines for deque itself work only through the"},
{"lineNum":"  827","line":"   *  start and finish iterators.  This keeps the routines simple and sane,"},
{"lineNum":"  828","line":"   *  and we can use other standard algorithms as well."},
{"lineNum":"  829","line":"  */"},
{"lineNum":"  830","line":"  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >"},
{"lineNum":"  831","line":"    class deque : protected _Deque_base<_Tp, _Alloc>"},
{"lineNum":"  832","line":"    {"},
{"lineNum":"  833","line":"#ifdef _GLIBCXX_CONCEPT_CHECKS"},
{"lineNum":"  834","line":"      // concept requirements"},
{"lineNum":"  835","line":"      typedef typename _Alloc::value_type\t_Alloc_value_type;"},
{"lineNum":"  836","line":"# if __cplusplus < 201103L"},
{"lineNum":"  837","line":"      __glibcxx_class_requires(_Tp, _SGIAssignableConcept)"},
{"lineNum":"  838","line":"# endif"},
{"lineNum":"  839","line":"      __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)"},
{"lineNum":"  840","line":"#endif"},
{"lineNum":"  841","line":""},
{"lineNum":"  842","line":"      typedef _Deque_base<_Tp, _Alloc>\t\t\t_Base;"},
{"lineNum":"  843","line":"      typedef typename _Base::_Tp_alloc_type\t\t_Tp_alloc_type;"},
{"lineNum":"  844","line":"      typedef typename _Base::_Alloc_traits\t\t_Alloc_traits;"},
{"lineNum":"  845","line":"      typedef typename _Base::_Map_pointer\t\t_Map_pointer;"},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":"    public:"},
{"lineNum":"  848","line":"      typedef _Tp\t\t\t\t\tvalue_type;"},
{"lineNum":"  849","line":"      typedef typename _Alloc_traits::pointer\t\tpointer;"},
{"lineNum":"  850","line":"      typedef typename _Alloc_traits::const_pointer\tconst_pointer;"},
{"lineNum":"  851","line":"      typedef typename _Alloc_traits::reference\t\treference;"},
{"lineNum":"  852","line":"      typedef typename _Alloc_traits::const_reference\tconst_reference;"},
{"lineNum":"  853","line":"      typedef typename _Base::iterator\t\t\titerator;"},
{"lineNum":"  854","line":"      typedef typename _Base::const_iterator\t\tconst_iterator;"},
{"lineNum":"  855","line":"      typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;"},
{"lineNum":"  856","line":"      typedef std::reverse_iterator<iterator>\t\treverse_iterator;"},
{"lineNum":"  857","line":"      typedef size_t\t\t\t\t\tsize_type;"},
{"lineNum":"  858","line":"      typedef ptrdiff_t\t\t\t\t\tdifference_type;"},
{"lineNum":"  859","line":"      typedef _Alloc\t\t\t\t\tallocator_type;"},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"    protected:"},
{"lineNum":"  862","line":"      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  863","line":"      { return __deque_buf_size(sizeof(_Tp)); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  864","line":""},
{"lineNum":"  865","line":"      // Functions controlling memory layout, and nothing else."},
{"lineNum":"  866","line":"      using _Base::_M_initialize_map;"},
{"lineNum":"  867","line":"      using _Base::_M_create_nodes;"},
{"lineNum":"  868","line":"      using _Base::_M_destroy_nodes;"},
{"lineNum":"  869","line":"      using _Base::_M_allocate_node;"},
{"lineNum":"  870","line":"      using _Base::_M_deallocate_node;"},
{"lineNum":"  871","line":"      using _Base::_M_allocate_map;"},
{"lineNum":"  872","line":"      using _Base::_M_deallocate_map;"},
{"lineNum":"  873","line":"      using _Base::_M_get_Tp_allocator;"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"      /**"},
{"lineNum":"  876","line":"       *  A total of four data members accumulated down the hierarchy."},
{"lineNum":"  877","line":"       *  May be accessed via _M_impl.*"},
{"lineNum":"  878","line":"       */"},
{"lineNum":"  879","line":"      using _Base::_M_impl;"},
{"lineNum":"  880","line":""},
{"lineNum":"  881","line":"    public:"},
{"lineNum":"  882","line":"      // [23.2.1.1] construct/copy/destroy"},
{"lineNum":"  883","line":"      // (assign() and get_allocator() are also listed in this section)"},
{"lineNum":"  884","line":""},
{"lineNum":"  885","line":"      /**"},
{"lineNum":"  886","line":"       *  @brief  Creates a %deque with no elements."},
{"lineNum":"  887","line":"       */"},
{"lineNum":"  888","line":"      deque() : _Base() { }","class":"linePartCov","hits":"2","order":"171","possible_hits":"3",},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"      /**"},
{"lineNum":"  891","line":"       *  @brief  Creates a %deque with no elements."},
{"lineNum":"  892","line":"       *  @param  __a  An allocator object."},
{"lineNum":"  893","line":"       */"},
{"lineNum":"  894","line":"      explicit"},
{"lineNum":"  895","line":"      deque(const allocator_type& __a)"},
{"lineNum":"  896","line":"      : _Base(__a, 0) { }"},
{"lineNum":"  897","line":""},
{"lineNum":"  898","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  899","line":"      /**"},
{"lineNum":"  900","line":"       *  @brief  Creates a %deque with default constructed elements."},
{"lineNum":"  901","line":"       *  @param  __n  The number of elements to initially create."},
{"lineNum":"  902","line":"       *  @param  __a  An allocator."},
{"lineNum":"  903","line":"       *"},
{"lineNum":"  904","line":"       *  This constructor fills the %deque with @a n default"},
{"lineNum":"  905","line":"       *  constructed elements."},
{"lineNum":"  906","line":"       */"},
{"lineNum":"  907","line":"      explicit"},
{"lineNum":"  908","line":"      deque(size_type __n, const allocator_type& __a = allocator_type())"},
{"lineNum":"  909","line":"      : _Base(__a, __n)"},
{"lineNum":"  910","line":"      { _M_default_initialize(); }"},
{"lineNum":"  911","line":""},
{"lineNum":"  912","line":"      /**"},
{"lineNum":"  913","line":"       *  @brief  Creates a %deque with copies of an exemplar element."},
{"lineNum":"  914","line":"       *  @param  __n  The number of elements to initially create."},
{"lineNum":"  915","line":"       *  @param  __value  An element to copy."},
{"lineNum":"  916","line":"       *  @param  __a  An allocator."},
{"lineNum":"  917","line":"       *"},
{"lineNum":"  918","line":"       *  This constructor fills the %deque with @a __n copies of @a __value."},
{"lineNum":"  919","line":"       */"},
{"lineNum":"  920","line":"      deque(size_type __n, const value_type& __value,"},
{"lineNum":"  921","line":"\t    const allocator_type& __a = allocator_type())"},
{"lineNum":"  922","line":"      : _Base(__a, __n)"},
{"lineNum":"  923","line":"      { _M_fill_initialize(__value); }"},
{"lineNum":"  924","line":"#else"},
{"lineNum":"  925","line":"      /**"},
{"lineNum":"  926","line":"       *  @brief  Creates a %deque with copies of an exemplar element."},
{"lineNum":"  927","line":"       *  @param  __n  The number of elements to initially create."},
{"lineNum":"  928","line":"       *  @param  __value  An element to copy."},
{"lineNum":"  929","line":"       *  @param  __a  An allocator."},
{"lineNum":"  930","line":"       *"},
{"lineNum":"  931","line":"       *  This constructor fills the %deque with @a __n copies of @a __value."},
{"lineNum":"  932","line":"       */"},
{"lineNum":"  933","line":"      explicit"},
{"lineNum":"  934","line":"      deque(size_type __n, const value_type& __value = value_type(),"},
{"lineNum":"  935","line":"\t    const allocator_type& __a = allocator_type())"},
{"lineNum":"  936","line":"      : _Base(__a, __n)"},
{"lineNum":"  937","line":"      { _M_fill_initialize(__value); }"},
{"lineNum":"  938","line":"#endif"},
{"lineNum":"  939","line":""},
{"lineNum":"  940","line":"      /**"},
{"lineNum":"  941","line":"       *  @brief  %Deque copy constructor."},
{"lineNum":"  942","line":"       *  @param  __x  A %deque of identical element and allocator types."},
{"lineNum":"  943","line":"       *"},
{"lineNum":"  944","line":"       *  The newly-created %deque uses a copy of the allocator object used"},
{"lineNum":"  945","line":"       *  by @a __x (unless the allocator traits dictate a different object)."},
{"lineNum":"  946","line":"       */"},
{"lineNum":"  947","line":"      deque(const deque& __x)"},
{"lineNum":"  948","line":"      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),"},
{"lineNum":"  949","line":"\t      __x.size())"},
{"lineNum":"  950","line":"      { std::__uninitialized_copy_a(__x.begin(), __x.end(),"},
{"lineNum":"  951","line":"\t\t\t\t    this->_M_impl._M_start,"},
{"lineNum":"  952","line":"\t\t\t\t    _M_get_Tp_allocator()); }"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  955","line":"      /**"},
{"lineNum":"  956","line":"       *  @brief  %Deque move constructor."},
{"lineNum":"  957","line":"       *  @param  __x  A %deque of identical element and allocator types."},
{"lineNum":"  958","line":"       *"},
{"lineNum":"  959","line":"       *  The newly-created %deque contains the exact contents of @a __x."},
{"lineNum":"  960","line":"       *  The contents of @a __x are a valid, but unspecified %deque."},
{"lineNum":"  961","line":"       */"},
{"lineNum":"  962","line":"      deque(deque&& __x)"},
{"lineNum":"  963","line":"      : _Base(std::move(__x)) { }"},
{"lineNum":"  964","line":""},
{"lineNum":"  965","line":"      /// Copy constructor with alternative allocator"},
{"lineNum":"  966","line":"      deque(const deque& __x, const allocator_type& __a)"},
{"lineNum":"  967","line":"      : _Base(__a, __x.size())"},
{"lineNum":"  968","line":"      { std::__uninitialized_copy_a(__x.begin(), __x.end(),"},
{"lineNum":"  969","line":"\t\t\t\t    this->_M_impl._M_start,"},
{"lineNum":"  970","line":"\t\t\t\t    _M_get_Tp_allocator()); }"},
{"lineNum":"  971","line":""},
{"lineNum":"  972","line":"      /// Move constructor with alternative allocator"},
{"lineNum":"  973","line":"      deque(deque&& __x, const allocator_type& __a)"},
{"lineNum":"  974","line":"      : _Base(std::move(__x), __a, __x.size())"},
{"lineNum":"  975","line":"      {"},
{"lineNum":"  976","line":"\tif (__x.get_allocator() != __a)"},
{"lineNum":"  977","line":"\t  {"},
{"lineNum":"  978","line":"\t    std::__uninitialized_move_a(__x.begin(), __x.end(),"},
{"lineNum":"  979","line":"\t\t\t\t\tthis->_M_impl._M_start,"},
{"lineNum":"  980","line":"\t\t\t\t\t_M_get_Tp_allocator());"},
{"lineNum":"  981","line":"\t    __x.clear();"},
{"lineNum":"  982","line":"\t  }"},
{"lineNum":"  983","line":"      }"},
{"lineNum":"  984","line":""},
{"lineNum":"  985","line":"      /**"},
{"lineNum":"  986","line":"       *  @brief  Builds a %deque from an initializer list."},
{"lineNum":"  987","line":"       *  @param  __l  An initializer_list."},
{"lineNum":"  988","line":"       *  @param  __a  An allocator object."},
{"lineNum":"  989","line":"       *"},
{"lineNum":"  990","line":"       *  Create a %deque consisting of copies of the elements in the"},
{"lineNum":"  991","line":"       *  initializer_list @a __l."},
{"lineNum":"  992","line":"       *"},
{"lineNum":"  993","line":"       *  This will call the element type\'s copy constructor N times"},
{"lineNum":"  994","line":"       *  (where N is __l.size()) and do no memory reallocation."},
{"lineNum":"  995","line":"       */"},
{"lineNum":"  996","line":"      deque(initializer_list<value_type> __l,"},
{"lineNum":"  997","line":"\t    const allocator_type& __a = allocator_type())"},
{"lineNum":"  998","line":"      : _Base(__a)"},
{"lineNum":"  999","line":"      {"},
{"lineNum":" 1000","line":"\t_M_range_initialize(__l.begin(), __l.end(),"},
{"lineNum":" 1001","line":"\t\t\t    random_access_iterator_tag());"},
{"lineNum":" 1002","line":"      }"},
{"lineNum":" 1003","line":"#endif"},
{"lineNum":" 1004","line":""},
{"lineNum":" 1005","line":"      /**"},
{"lineNum":" 1006","line":"       *  @brief  Builds a %deque from a range."},
{"lineNum":" 1007","line":"       *  @param  __first  An input iterator."},
{"lineNum":" 1008","line":"       *  @param  __last  An input iterator."},
{"lineNum":" 1009","line":"       *  @param  __a  An allocator object."},
{"lineNum":" 1010","line":"       *"},
{"lineNum":" 1011","line":"       *  Create a %deque consisting of copies of the elements from [__first,"},
{"lineNum":" 1012","line":"       *  __last)."},
{"lineNum":" 1013","line":"       *"},
{"lineNum":" 1014","line":"       *  If the iterators are forward, bidirectional, or random-access, then"},
{"lineNum":" 1015","line":"       *  this will call the elements\' copy constructor N times (where N is"},
{"lineNum":" 1016","line":"       *  distance(__first,__last)) and do no memory reallocation.  But if only"},
{"lineNum":" 1017","line":"       *  input iterators are used, then this will do at most 2N calls to the"},
{"lineNum":" 1018","line":"       *  copy constructor, and logN memory reallocations."},
{"lineNum":" 1019","line":"       */"},
{"lineNum":" 1020","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1021","line":"      template<typename _InputIterator,"},
{"lineNum":" 1022","line":"\t       typename = std::_RequireInputIter<_InputIterator>>"},
{"lineNum":" 1023","line":"\tdeque(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 1024","line":"\t      const allocator_type& __a = allocator_type())"},
{"lineNum":" 1025","line":"\t: _Base(__a)"},
{"lineNum":" 1026","line":"\t{ _M_initialize_dispatch(__first, __last, __false_type()); }"},
{"lineNum":" 1027","line":"#else"},
{"lineNum":" 1028","line":"      template<typename _InputIterator>"},
{"lineNum":" 1029","line":"\tdeque(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 1030","line":"\t      const allocator_type& __a = allocator_type())"},
{"lineNum":" 1031","line":"\t: _Base(__a)"},
{"lineNum":" 1032","line":"\t{"},
{"lineNum":" 1033","line":"\t  // Check whether it\'s an integral type.  If so, it\'s not an iterator."},
{"lineNum":" 1034","line":"\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;"},
{"lineNum":" 1035","line":"\t  _M_initialize_dispatch(__first, __last, _Integral());"},
{"lineNum":" 1036","line":"\t}"},
{"lineNum":" 1037","line":"#endif"},
{"lineNum":" 1038","line":""},
{"lineNum":" 1039","line":"      /**"},
{"lineNum":" 1040","line":"       *  The dtor only erases the elements, and note that if the elements"},
{"lineNum":" 1041","line":"       *  themselves are pointers, the pointed-to memory is not touched in any"},
{"lineNum":" 1042","line":"       *  way.  Managing the pointer is the user\'s responsibility."},
{"lineNum":" 1043","line":"       */"},
{"lineNum":" 1044","line":"      ~deque()","class":"lineCov","hits":"2","order":"1986","possible_hits":"2",},
{"lineNum":" 1045","line":"      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }","class":"linePartCov","hits":"1","order":"1987","possible_hits":"2",},
{"lineNum":" 1046","line":""},
{"lineNum":" 1047","line":"      /**"},
{"lineNum":" 1048","line":"       *  @brief  %Deque assignment operator."},
{"lineNum":" 1049","line":"       *  @param  __x  A %deque of identical element and allocator types."},
{"lineNum":" 1050","line":"       *"},
{"lineNum":" 1051","line":"       *  All the elements of @a x are copied."},
{"lineNum":" 1052","line":"       *"},
{"lineNum":" 1053","line":"       *  The newly-created %deque uses a copy of the allocator object used"},
{"lineNum":" 1054","line":"       *  by @a __x (unless the allocator traits dictate a different object)."},
{"lineNum":" 1055","line":"       */"},
{"lineNum":" 1056","line":"      deque&"},
{"lineNum":" 1057","line":"      operator=(const deque& __x);"},
{"lineNum":" 1058","line":""},
{"lineNum":" 1059","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1060","line":"      /**"},
{"lineNum":" 1061","line":"       *  @brief  %Deque move assignment operator."},
{"lineNum":" 1062","line":"       *  @param  __x  A %deque of identical element and allocator types."},
{"lineNum":" 1063","line":"       *"},
{"lineNum":" 1064","line":"       *  The contents of @a __x are moved into this deque (without copying,"},
{"lineNum":" 1065","line":"       *  if the allocators permit it)."},
{"lineNum":" 1066","line":"       *  @a __x is a valid, but unspecified %deque."},
{"lineNum":" 1067","line":"       */"},
{"lineNum":" 1068","line":"      deque&"},
{"lineNum":" 1069","line":"      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())"},
{"lineNum":" 1070","line":"      {"},
{"lineNum":" 1071","line":"\tusing __always_equal = typename _Alloc_traits::is_always_equal;"},
{"lineNum":" 1072","line":"\t_M_move_assign1(std::move(__x), __always_equal{});"},
{"lineNum":" 1073","line":"\treturn *this;"},
{"lineNum":" 1074","line":"      }"},
{"lineNum":" 1075","line":""},
{"lineNum":" 1076","line":"      /**"},
{"lineNum":" 1077","line":"       *  @brief  Assigns an initializer list to a %deque."},
{"lineNum":" 1078","line":"       *  @param  __l  An initializer_list."},
{"lineNum":" 1079","line":"       *"},
{"lineNum":" 1080","line":"       *  This function fills a %deque with copies of the elements in the"},
{"lineNum":" 1081","line":"       *  initializer_list @a __l."},
{"lineNum":" 1082","line":"       *"},
{"lineNum":" 1083","line":"       *  Note that the assignment completely changes the %deque and that the"},
{"lineNum":" 1084","line":"       *  resulting %deque\'s size is the same as the number of elements"},
{"lineNum":" 1085","line":"       *  assigned."},
{"lineNum":" 1086","line":"       */"},
{"lineNum":" 1087","line":"      deque&"},
{"lineNum":" 1088","line":"      operator=(initializer_list<value_type> __l)"},
{"lineNum":" 1089","line":"      {"},
{"lineNum":" 1090","line":"\t_M_assign_aux(__l.begin(), __l.end(),"},
{"lineNum":" 1091","line":"\t\t      random_access_iterator_tag());"},
{"lineNum":" 1092","line":"\treturn *this;"},
{"lineNum":" 1093","line":"      }"},
{"lineNum":" 1094","line":"#endif"},
{"lineNum":" 1095","line":""},
{"lineNum":" 1096","line":"      /**"},
{"lineNum":" 1097","line":"       *  @brief  Assigns a given value to a %deque."},
{"lineNum":" 1098","line":"       *  @param  __n  Number of elements to be assigned."},
{"lineNum":" 1099","line":"       *  @param  __val  Value to be assigned."},
{"lineNum":" 1100","line":"       *"},
{"lineNum":" 1101","line":"       *  This function fills a %deque with @a n copies of the given"},
{"lineNum":" 1102","line":"       *  value.  Note that the assignment completely changes the"},
{"lineNum":" 1103","line":"       *  %deque and that the resulting %deque\'s size is the same as"},
{"lineNum":" 1104","line":"       *  the number of elements assigned."},
{"lineNum":" 1105","line":"       */"},
{"lineNum":" 1106","line":"      void"},
{"lineNum":" 1107","line":"      assign(size_type __n, const value_type& __val)"},
{"lineNum":" 1108","line":"      { _M_fill_assign(__n, __val); }"},
{"lineNum":" 1109","line":""},
{"lineNum":" 1110","line":"      /**"},
{"lineNum":" 1111","line":"       *  @brief  Assigns a range to a %deque."},
{"lineNum":" 1112","line":"       *  @param  __first  An input iterator."},
{"lineNum":" 1113","line":"       *  @param  __last   An input iterator."},
{"lineNum":" 1114","line":"       *"},
{"lineNum":" 1115","line":"       *  This function fills a %deque with copies of the elements in the"},
{"lineNum":" 1116","line":"       *  range [__first,__last)."},
{"lineNum":" 1117","line":"       *"},
{"lineNum":" 1118","line":"       *  Note that the assignment completely changes the %deque and that the"},
{"lineNum":" 1119","line":"       *  resulting %deque\'s size is the same as the number of elements"},
{"lineNum":" 1120","line":"       *  assigned."},
{"lineNum":" 1121","line":"       */"},
{"lineNum":" 1122","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1123","line":"      template<typename _InputIterator,"},
{"lineNum":" 1124","line":"\t       typename = std::_RequireInputIter<_InputIterator>>"},
{"lineNum":" 1125","line":"\tvoid"},
{"lineNum":" 1126","line":"\tassign(_InputIterator __first, _InputIterator __last)"},
{"lineNum":" 1127","line":"\t{ _M_assign_dispatch(__first, __last, __false_type()); }"},
{"lineNum":" 1128","line":"#else"},
{"lineNum":" 1129","line":"      template<typename _InputIterator>"},
{"lineNum":" 1130","line":"\tvoid"},
{"lineNum":" 1131","line":"\tassign(_InputIterator __first, _InputIterator __last)"},
{"lineNum":" 1132","line":"\t{"},
{"lineNum":" 1133","line":"\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;"},
{"lineNum":" 1134","line":"\t  _M_assign_dispatch(__first, __last, _Integral());"},
{"lineNum":" 1135","line":"\t}"},
{"lineNum":" 1136","line":"#endif"},
{"lineNum":" 1137","line":""},
{"lineNum":" 1138","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1139","line":"      /**"},
{"lineNum":" 1140","line":"       *  @brief  Assigns an initializer list to a %deque."},
{"lineNum":" 1141","line":"       *  @param  __l  An initializer_list."},
{"lineNum":" 1142","line":"       *"},
{"lineNum":" 1143","line":"       *  This function fills a %deque with copies of the elements in the"},
{"lineNum":" 1144","line":"       *  initializer_list @a __l."},
{"lineNum":" 1145","line":"       *"},
{"lineNum":" 1146","line":"       *  Note that the assignment completely changes the %deque and that the"},
{"lineNum":" 1147","line":"       *  resulting %deque\'s size is the same as the number of elements"},
{"lineNum":" 1148","line":"       *  assigned."},
{"lineNum":" 1149","line":"       */"},
{"lineNum":" 1150","line":"      void"},
{"lineNum":" 1151","line":"      assign(initializer_list<value_type> __l)"},
{"lineNum":" 1152","line":"      { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }"},
{"lineNum":" 1153","line":"#endif"},
{"lineNum":" 1154","line":""},
{"lineNum":" 1155","line":"      /// Get a copy of the memory allocation object."},
{"lineNum":" 1156","line":"      allocator_type"},
{"lineNum":" 1157","line":"      get_allocator() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1158","line":"      { return _Base::get_allocator(); }"},
{"lineNum":" 1159","line":""},
{"lineNum":" 1160","line":"      // iterators"},
{"lineNum":" 1161","line":"      /**"},
{"lineNum":" 1162","line":"       *  Returns a read/write iterator that points to the first element in the"},
{"lineNum":" 1163","line":"       *  %deque.  Iteration is done in ordinary element order."},
{"lineNum":" 1164","line":"       */"},
{"lineNum":" 1165","line":"      iterator"},
{"lineNum":" 1166","line":"      begin() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1990","possible_hits":"1",},
{"lineNum":" 1167","line":"      { return this->_M_impl._M_start; }","class":"linePartCov","hits":"1","order":"1991","possible_hits":"2",},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"      /**"},
{"lineNum":" 1170","line":"       *  Returns a read-only (constant) iterator that points to the first"},
{"lineNum":" 1171","line":"       *  element in the %deque.  Iteration is done in ordinary element order."},
{"lineNum":" 1172","line":"       */"},
{"lineNum":" 1173","line":"      const_iterator"},
{"lineNum":" 1174","line":"      begin() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1175","line":"      { return this->_M_impl._M_start; }"},
{"lineNum":" 1176","line":""},
{"lineNum":" 1177","line":"      /**"},
{"lineNum":" 1178","line":"       *  Returns a read/write iterator that points one past the last"},
{"lineNum":" 1179","line":"       *  element in the %deque.  Iteration is done in ordinary"},
{"lineNum":" 1180","line":"       *  element order."},
{"lineNum":" 1181","line":"       */"},
{"lineNum":" 1182","line":"      iterator"},
{"lineNum":" 1183","line":"      end() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"867","possible_hits":"1",},
{"lineNum":" 1184","line":"      { return this->_M_impl._M_finish; }","class":"linePartCov","hits":"1","order":"868","possible_hits":"2",},
{"lineNum":" 1185","line":""},
{"lineNum":" 1186","line":"      /**"},
{"lineNum":" 1187","line":"       *  Returns a read-only (constant) iterator that points one past"},
{"lineNum":" 1188","line":"       *  the last element in the %deque.  Iteration is done in"},
{"lineNum":" 1189","line":"       *  ordinary element order."},
{"lineNum":" 1190","line":"       */"},
{"lineNum":" 1191","line":"      const_iterator"},
{"lineNum":" 1192","line":"      end() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1193","line":"      { return this->_M_impl._M_finish; }"},
{"lineNum":" 1194","line":""},
{"lineNum":" 1195","line":"      /**"},
{"lineNum":" 1196","line":"       *  Returns a read/write reverse iterator that points to the"},
{"lineNum":" 1197","line":"       *  last element in the %deque.  Iteration is done in reverse"},
{"lineNum":" 1198","line":"       *  element order."},
{"lineNum":" 1199","line":"       */"},
{"lineNum":" 1200","line":"      reverse_iterator"},
{"lineNum":" 1201","line":"      rbegin() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1202","line":"      { return reverse_iterator(this->_M_impl._M_finish); }"},
{"lineNum":" 1203","line":""},
{"lineNum":" 1204","line":"      /**"},
{"lineNum":" 1205","line":"       *  Returns a read-only (constant) reverse iterator that points"},
{"lineNum":" 1206","line":"       *  to the last element in the %deque.  Iteration is done in"},
{"lineNum":" 1207","line":"       *  reverse element order."},
{"lineNum":" 1208","line":"       */"},
{"lineNum":" 1209","line":"      const_reverse_iterator"},
{"lineNum":" 1210","line":"      rbegin() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1211","line":"      { return const_reverse_iterator(this->_M_impl._M_finish); }"},
{"lineNum":" 1212","line":""},
{"lineNum":" 1213","line":"      /**"},
{"lineNum":" 1214","line":"       *  Returns a read/write reverse iterator that points to one"},
{"lineNum":" 1215","line":"       *  before the first element in the %deque.  Iteration is done"},
{"lineNum":" 1216","line":"       *  in reverse element order."},
{"lineNum":" 1217","line":"       */"},
{"lineNum":" 1218","line":"      reverse_iterator"},
{"lineNum":" 1219","line":"      rend() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1220","line":"      { return reverse_iterator(this->_M_impl._M_start); }"},
{"lineNum":" 1221","line":""},
{"lineNum":" 1222","line":"      /**"},
{"lineNum":" 1223","line":"       *  Returns a read-only (constant) reverse iterator that points"},
{"lineNum":" 1224","line":"       *  to one before the first element in the %deque.  Iteration is"},
{"lineNum":" 1225","line":"       *  done in reverse element order."},
{"lineNum":" 1226","line":"       */"},
{"lineNum":" 1227","line":"      const_reverse_iterator"},
{"lineNum":" 1228","line":"      rend() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1229","line":"      { return const_reverse_iterator(this->_M_impl._M_start); }"},
{"lineNum":" 1230","line":""},
{"lineNum":" 1231","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1232","line":"      /**"},
{"lineNum":" 1233","line":"       *  Returns a read-only (constant) iterator that points to the first"},
{"lineNum":" 1234","line":"       *  element in the %deque.  Iteration is done in ordinary element order."},
{"lineNum":" 1235","line":"       */"},
{"lineNum":" 1236","line":"      const_iterator"},
{"lineNum":" 1237","line":"      cbegin() const noexcept"},
{"lineNum":" 1238","line":"      { return this->_M_impl._M_start; }"},
{"lineNum":" 1239","line":""},
{"lineNum":" 1240","line":"      /**"},
{"lineNum":" 1241","line":"       *  Returns a read-only (constant) iterator that points one past"},
{"lineNum":" 1242","line":"       *  the last element in the %deque.  Iteration is done in"},
{"lineNum":" 1243","line":"       *  ordinary element order."},
{"lineNum":" 1244","line":"       */"},
{"lineNum":" 1245","line":"      const_iterator"},
{"lineNum":" 1246","line":"      cend() const noexcept"},
{"lineNum":" 1247","line":"      { return this->_M_impl._M_finish; }"},
{"lineNum":" 1248","line":""},
{"lineNum":" 1249","line":"      /**"},
{"lineNum":" 1250","line":"       *  Returns a read-only (constant) reverse iterator that points"},
{"lineNum":" 1251","line":"       *  to the last element in the %deque.  Iteration is done in"},
{"lineNum":" 1252","line":"       *  reverse element order."},
{"lineNum":" 1253","line":"       */"},
{"lineNum":" 1254","line":"      const_reverse_iterator"},
{"lineNum":" 1255","line":"      crbegin() const noexcept"},
{"lineNum":" 1256","line":"      { return const_reverse_iterator(this->_M_impl._M_finish); }"},
{"lineNum":" 1257","line":""},
{"lineNum":" 1258","line":"      /**"},
{"lineNum":" 1259","line":"       *  Returns a read-only (constant) reverse iterator that points"},
{"lineNum":" 1260","line":"       *  to one before the first element in the %deque.  Iteration is"},
{"lineNum":" 1261","line":"       *  done in reverse element order."},
{"lineNum":" 1262","line":"       */"},
{"lineNum":" 1263","line":"      const_reverse_iterator"},
{"lineNum":" 1264","line":"      crend() const noexcept"},
{"lineNum":" 1265","line":"      { return const_reverse_iterator(this->_M_impl._M_start); }"},
{"lineNum":" 1266","line":"#endif"},
{"lineNum":" 1267","line":""},
{"lineNum":" 1268","line":"      // [23.2.1.2] capacity"},
{"lineNum":" 1269","line":"      /**  Returns the number of elements in the %deque.  */"},
{"lineNum":" 1270","line":"      size_type"},
{"lineNum":" 1271","line":"      size() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1272","line":"      { return this->_M_impl._M_finish - this->_M_impl._M_start; }"},
{"lineNum":" 1273","line":""},
{"lineNum":" 1274","line":"      /**  Returns the size() of the largest possible %deque.  */"},
{"lineNum":" 1275","line":"      size_type"},
{"lineNum":" 1276","line":"      max_size() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1277","line":"      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }"},
{"lineNum":" 1278","line":""},
{"lineNum":" 1279","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1280","line":"      /**"},
{"lineNum":" 1281","line":"       *  @brief  Resizes the %deque to the specified number of elements."},
{"lineNum":" 1282","line":"       *  @param  __new_size  Number of elements the %deque should contain."},
{"lineNum":" 1283","line":"       *"},
{"lineNum":" 1284","line":"       *  This function will %resize the %deque to the specified"},
{"lineNum":" 1285","line":"       *  number of elements.  If the number is smaller than the"},
{"lineNum":" 1286","line":"       *  %deque\'s current size the %deque is truncated, otherwise"},
{"lineNum":" 1287","line":"       *  default constructed elements are appended."},
{"lineNum":" 1288","line":"       */"},
{"lineNum":" 1289","line":"      void"},
{"lineNum":" 1290","line":"      resize(size_type __new_size)"},
{"lineNum":" 1291","line":"      {"},
{"lineNum":" 1292","line":"\tconst size_type __len = size();"},
{"lineNum":" 1293","line":"\tif (__new_size > __len)"},
{"lineNum":" 1294","line":"\t  _M_default_append(__new_size - __len);"},
{"lineNum":" 1295","line":"\telse if (__new_size < __len)"},
{"lineNum":" 1296","line":"\t  _M_erase_at_end(this->_M_impl._M_start"},
{"lineNum":" 1297","line":"\t\t\t  + difference_type(__new_size));"},
{"lineNum":" 1298","line":"      }"},
{"lineNum":" 1299","line":""},
{"lineNum":" 1300","line":"      /**"},
{"lineNum":" 1301","line":"       *  @brief  Resizes the %deque to the specified number of elements."},
{"lineNum":" 1302","line":"       *  @param  __new_size  Number of elements the %deque should contain."},
{"lineNum":" 1303","line":"       *  @param  __x  Data with which new elements should be populated."},
{"lineNum":" 1304","line":"       *"},
{"lineNum":" 1305","line":"       *  This function will %resize the %deque to the specified"},
{"lineNum":" 1306","line":"       *  number of elements.  If the number is smaller than the"},
{"lineNum":" 1307","line":"       *  %deque\'s current size the %deque is truncated, otherwise the"},
{"lineNum":" 1308","line":"       *  %deque is extended and new elements are populated with given"},
{"lineNum":" 1309","line":"       *  data."},
{"lineNum":" 1310","line":"       */"},
{"lineNum":" 1311","line":"      void"},
{"lineNum":" 1312","line":"      resize(size_type __new_size, const value_type& __x)"},
{"lineNum":" 1313","line":"      {"},
{"lineNum":" 1314","line":"\tconst size_type __len = size();"},
{"lineNum":" 1315","line":"\tif (__new_size > __len)"},
{"lineNum":" 1316","line":"\t  _M_fill_insert(this->_M_impl._M_finish, __new_size - __len, __x);"},
{"lineNum":" 1317","line":"\telse if (__new_size < __len)"},
{"lineNum":" 1318","line":"\t  _M_erase_at_end(this->_M_impl._M_start"},
{"lineNum":" 1319","line":"\t\t\t  + difference_type(__new_size));"},
{"lineNum":" 1320","line":"      }"},
{"lineNum":" 1321","line":"#else"},
{"lineNum":" 1322","line":"      /**"},
{"lineNum":" 1323","line":"       *  @brief  Resizes the %deque to the specified number of elements."},
{"lineNum":" 1324","line":"       *  @param  __new_size  Number of elements the %deque should contain."},
{"lineNum":" 1325","line":"       *  @param  __x  Data with which new elements should be populated."},
{"lineNum":" 1326","line":"       *"},
{"lineNum":" 1327","line":"       *  This function will %resize the %deque to the specified"},
{"lineNum":" 1328","line":"       *  number of elements.  If the number is smaller than the"},
{"lineNum":" 1329","line":"       *  %deque\'s current size the %deque is truncated, otherwise the"},
{"lineNum":" 1330","line":"       *  %deque is extended and new elements are populated with given"},
{"lineNum":" 1331","line":"       *  data."},
{"lineNum":" 1332","line":"       */"},
{"lineNum":" 1333","line":"      void"},
{"lineNum":" 1334","line":"      resize(size_type __new_size, value_type __x = value_type())"},
{"lineNum":" 1335","line":"      {"},
{"lineNum":" 1336","line":"\tconst size_type __len = size();"},
{"lineNum":" 1337","line":"\tif (__new_size > __len)"},
{"lineNum":" 1338","line":"\t  _M_fill_insert(this->_M_impl._M_finish, __new_size - __len, __x);"},
{"lineNum":" 1339","line":"\telse if (__new_size < __len)"},
{"lineNum":" 1340","line":"\t  _M_erase_at_end(this->_M_impl._M_start"},
{"lineNum":" 1341","line":"\t\t\t  + difference_type(__new_size));"},
{"lineNum":" 1342","line":"      }"},
{"lineNum":" 1343","line":"#endif"},
{"lineNum":" 1344","line":""},
{"lineNum":" 1345","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1346","line":"      /**  A non-binding request to reduce memory use.  */"},
{"lineNum":" 1347","line":"      void"},
{"lineNum":" 1348","line":"      shrink_to_fit() noexcept"},
{"lineNum":" 1349","line":"      { _M_shrink_to_fit(); }"},
{"lineNum":" 1350","line":"#endif"},
{"lineNum":" 1351","line":""},
{"lineNum":" 1352","line":"      /**"},
{"lineNum":" 1353","line":"       *  Returns true if the %deque is empty.  (Thus begin() would"},
{"lineNum":" 1354","line":"       *  equal end().)"},
{"lineNum":" 1355","line":"       */"},
{"lineNum":" 1356","line":"      bool"},
{"lineNum":" 1357","line":"      empty() const _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1352","possible_hits":"1",},
{"lineNum":" 1358","line":"      { return this->_M_impl._M_finish == this->_M_impl._M_start; }","class":"linePartCov","hits":"1","order":"1353","possible_hits":"2",},
{"lineNum":" 1359","line":""},
{"lineNum":" 1360","line":"      // element access"},
{"lineNum":" 1361","line":"      /**"},
{"lineNum":" 1362","line":"       *  @brief Subscript access to the data contained in the %deque."},
{"lineNum":" 1363","line":"       *  @param __n The index of the element for which data should be"},
{"lineNum":" 1364","line":"       *  accessed."},
{"lineNum":" 1365","line":"       *  @return  Read/write reference to data."},
{"lineNum":" 1366","line":"       *"},
{"lineNum":" 1367","line":"       *  This operator allows for easy, array-style, data access."},
{"lineNum":" 1368","line":"       *  Note that data access with this operator is unchecked and"},
{"lineNum":" 1369","line":"       *  out_of_range lookups are not defined. (For checked lookups"},
{"lineNum":" 1370","line":"       *  see at().)"},
{"lineNum":" 1371","line":"       */"},
{"lineNum":" 1372","line":"      reference"},
{"lineNum":" 1373","line":"      operator[](size_type __n) _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1374","line":"      {"},
{"lineNum":" 1375","line":"\t__glibcxx_requires_subscript(__n);"},
{"lineNum":" 1376","line":"\treturn this->_M_impl._M_start[difference_type(__n)];"},
{"lineNum":" 1377","line":"      }"},
{"lineNum":" 1378","line":""},
{"lineNum":" 1379","line":"      /**"},
{"lineNum":" 1380","line":"       *  @brief Subscript access to the data contained in the %deque."},
{"lineNum":" 1381","line":"       *  @param __n The index of the element for which data should be"},
{"lineNum":" 1382","line":"       *  accessed."},
{"lineNum":" 1383","line":"       *  @return  Read-only (constant) reference to data."},
{"lineNum":" 1384","line":"       *"},
{"lineNum":" 1385","line":"       *  This operator allows for easy, array-style, data access."},
{"lineNum":" 1386","line":"       *  Note that data access with this operator is unchecked and"},
{"lineNum":" 1387","line":"       *  out_of_range lookups are not defined. (For checked lookups"},
{"lineNum":" 1388","line":"       *  see at().)"},
{"lineNum":" 1389","line":"       */"},
{"lineNum":" 1390","line":"      const_reference"},
{"lineNum":" 1391","line":"      operator[](size_type __n) const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1392","line":"      {"},
{"lineNum":" 1393","line":"\t__glibcxx_requires_subscript(__n);"},
{"lineNum":" 1394","line":"\treturn this->_M_impl._M_start[difference_type(__n)];"},
{"lineNum":" 1395","line":"      }"},
{"lineNum":" 1396","line":""},
{"lineNum":" 1397","line":"    protected:"},
{"lineNum":" 1398","line":"      /// Safety check used only from at()."},
{"lineNum":" 1399","line":"      void"},
{"lineNum":" 1400","line":"      _M_range_check(size_type __n) const"},
{"lineNum":" 1401","line":"      {"},
{"lineNum":" 1402","line":"\tif (__n >= this->size())"},
{"lineNum":" 1403","line":"\t  __throw_out_of_range_fmt(__N(\"deque::_M_range_check: __n \""},
{"lineNum":" 1404","line":"\t\t\t\t       \"(which is %zu)>= this->size() \""},
{"lineNum":" 1405","line":"\t\t\t\t       \"(which is %zu)\"),"},
{"lineNum":" 1406","line":"\t\t\t\t   __n, this->size());"},
{"lineNum":" 1407","line":"      }"},
{"lineNum":" 1408","line":""},
{"lineNum":" 1409","line":"    public:"},
{"lineNum":" 1410","line":"      /**"},
{"lineNum":" 1411","line":"       *  @brief  Provides access to the data contained in the %deque."},
{"lineNum":" 1412","line":"       *  @param __n The index of the element for which data should be"},
{"lineNum":" 1413","line":"       *  accessed."},
{"lineNum":" 1414","line":"       *  @return  Read/write reference to data."},
{"lineNum":" 1415","line":"       *  @throw  std::out_of_range  If @a __n is an invalid index."},
{"lineNum":" 1416","line":"       *"},
{"lineNum":" 1417","line":"       *  This function provides for safer data access.  The parameter"},
{"lineNum":" 1418","line":"       *  is first checked that it is in the range of the deque.  The"},
{"lineNum":" 1419","line":"       *  function throws out_of_range if the check fails."},
{"lineNum":" 1420","line":"       */"},
{"lineNum":" 1421","line":"      reference"},
{"lineNum":" 1422","line":"      at(size_type __n)"},
{"lineNum":" 1423","line":"      {"},
{"lineNum":" 1424","line":"\t_M_range_check(__n);"},
{"lineNum":" 1425","line":"\treturn (*this)[__n];"},
{"lineNum":" 1426","line":"      }"},
{"lineNum":" 1427","line":""},
{"lineNum":" 1428","line":"      /**"},
{"lineNum":" 1429","line":"       *  @brief  Provides access to the data contained in the %deque."},
{"lineNum":" 1430","line":"       *  @param __n The index of the element for which data should be"},
{"lineNum":" 1431","line":"       *  accessed."},
{"lineNum":" 1432","line":"       *  @return  Read-only (constant) reference to data."},
{"lineNum":" 1433","line":"       *  @throw  std::out_of_range  If @a __n is an invalid index."},
{"lineNum":" 1434","line":"       *"},
{"lineNum":" 1435","line":"       *  This function provides for safer data access.  The parameter is first"},
{"lineNum":" 1436","line":"       *  checked that it is in the range of the deque.  The function throws"},
{"lineNum":" 1437","line":"       *  out_of_range if the check fails."},
{"lineNum":" 1438","line":"       */"},
{"lineNum":" 1439","line":"      const_reference"},
{"lineNum":" 1440","line":"      at(size_type __n) const"},
{"lineNum":" 1441","line":"      {"},
{"lineNum":" 1442","line":"\t_M_range_check(__n);"},
{"lineNum":" 1443","line":"\treturn (*this)[__n];"},
{"lineNum":" 1444","line":"      }"},
{"lineNum":" 1445","line":""},
{"lineNum":" 1446","line":"      /**"},
{"lineNum":" 1447","line":"       *  Returns a read/write reference to the data at the first"},
{"lineNum":" 1448","line":"       *  element of the %deque."},
{"lineNum":" 1449","line":"       */"},
{"lineNum":" 1450","line":"      reference"},
{"lineNum":" 1451","line":"      front() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1452","line":"      {"},
{"lineNum":" 1453","line":"\t__glibcxx_requires_nonempty();"},
{"lineNum":" 1454","line":"\treturn *begin();"},
{"lineNum":" 1455","line":"      }"},
{"lineNum":" 1456","line":""},
{"lineNum":" 1457","line":"      /**"},
{"lineNum":" 1458","line":"       *  Returns a read-only (constant) reference to the data at the first"},
{"lineNum":" 1459","line":"       *  element of the %deque."},
{"lineNum":" 1460","line":"       */"},
{"lineNum":" 1461","line":"      const_reference"},
{"lineNum":" 1462","line":"      front() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1463","line":"      {"},
{"lineNum":" 1464","line":"\t__glibcxx_requires_nonempty();"},
{"lineNum":" 1465","line":"\treturn *begin();"},
{"lineNum":" 1466","line":"      }"},
{"lineNum":" 1467","line":""},
{"lineNum":" 1468","line":"      /**"},
{"lineNum":" 1469","line":"       *  Returns a read/write reference to the data at the last element of the"},
{"lineNum":" 1470","line":"       *  %deque."},
{"lineNum":" 1471","line":"       */"},
{"lineNum":" 1472","line":"      reference"},
{"lineNum":" 1473","line":"      back() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"2","order":"865","possible_hits":"2",},
{"lineNum":" 1474","line":"      {"},
{"lineNum":" 1475","line":"\t__glibcxx_requires_nonempty();"},
{"lineNum":" 1476","line":"\titerator __tmp = end();","class":"lineCov","hits":"1","order":"866","possible_hits":"1",},
{"lineNum":" 1477","line":"\t--__tmp;","class":"lineCov","hits":"1","order":"872","possible_hits":"1",},
{"lineNum":" 1478","line":"\treturn *__tmp;","class":"lineCov","hits":"1","order":"878","possible_hits":"1",},
{"lineNum":" 1479","line":"      }","class":"linePartCov","hits":"1","order":"881","possible_hits":"2",},
{"lineNum":" 1480","line":""},
{"lineNum":" 1481","line":"      /**"},
{"lineNum":" 1482","line":"       *  Returns a read-only (constant) reference to the data at the last"},
{"lineNum":" 1483","line":"       *  element of the %deque."},
{"lineNum":" 1484","line":"       */"},
{"lineNum":" 1485","line":"      const_reference"},
{"lineNum":" 1486","line":"      back() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1487","line":"      {"},
{"lineNum":" 1488","line":"\t__glibcxx_requires_nonempty();"},
{"lineNum":" 1489","line":"\tconst_iterator __tmp = end();"},
{"lineNum":" 1490","line":"\t--__tmp;"},
{"lineNum":" 1491","line":"\treturn *__tmp;"},
{"lineNum":" 1492","line":"      }"},
{"lineNum":" 1493","line":""},
{"lineNum":" 1494","line":"      // [23.2.1.2] modifiers"},
{"lineNum":" 1495","line":"      /**"},
{"lineNum":" 1496","line":"       *  @brief  Add data to the front of the %deque."},
{"lineNum":" 1497","line":"       *  @param  __x  Data to be added."},
{"lineNum":" 1498","line":"       *"},
{"lineNum":" 1499","line":"       *  This is a typical stack operation.  The function creates an"},
{"lineNum":" 1500","line":"       *  element at the front of the %deque and assigns the given"},
{"lineNum":" 1501","line":"       *  data to it.  Due to the nature of a %deque this operation"},
{"lineNum":" 1502","line":"       *  can be done in constant time."},
{"lineNum":" 1503","line":"       */"},
{"lineNum":" 1504","line":"      void"},
{"lineNum":" 1505","line":"      push_front(const value_type& __x)"},
{"lineNum":" 1506","line":"      {"},
{"lineNum":" 1507","line":"\tif (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)"},
{"lineNum":" 1508","line":"\t  {"},
{"lineNum":" 1509","line":"\t    _Alloc_traits::construct(this->_M_impl,"},
{"lineNum":" 1510","line":"\t\t\t\t     this->_M_impl._M_start._M_cur - 1,"},
{"lineNum":" 1511","line":"\t\t\t\t     __x);"},
{"lineNum":" 1512","line":"\t    --this->_M_impl._M_start._M_cur;"},
{"lineNum":" 1513","line":"\t  }"},
{"lineNum":" 1514","line":"\telse"},
{"lineNum":" 1515","line":"\t  _M_push_front_aux(__x);"},
{"lineNum":" 1516","line":"      }"},
{"lineNum":" 1517","line":""},
{"lineNum":" 1518","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1519","line":"      void"},
{"lineNum":" 1520","line":"      push_front(value_type&& __x)"},
{"lineNum":" 1521","line":"      { emplace_front(std::move(__x)); }"},
{"lineNum":" 1522","line":""},
{"lineNum":" 1523","line":"      template<typename... _Args>"},
{"lineNum":" 1524","line":"#if __cplusplus > 201402L"},
{"lineNum":" 1525","line":"\treference"},
{"lineNum":" 1526","line":"#else"},
{"lineNum":" 1527","line":"\tvoid"},
{"lineNum":" 1528","line":"#endif"},
{"lineNum":" 1529","line":"\templace_front(_Args&&... __args);"},
{"lineNum":" 1530","line":"#endif"},
{"lineNum":" 1531","line":""},
{"lineNum":" 1532","line":"      /**"},
{"lineNum":" 1533","line":"       *  @brief  Add data to the end of the %deque."},
{"lineNum":" 1534","line":"       *  @param  __x  Data to be added."},
{"lineNum":" 1535","line":"       *"},
{"lineNum":" 1536","line":"       *  This is a typical stack operation.  The function creates an"},
{"lineNum":" 1537","line":"       *  element at the end of the %deque and assigns the given data"},
{"lineNum":" 1538","line":"       *  to it.  Due to the nature of a %deque this operation can be"},
{"lineNum":" 1539","line":"       *  done in constant time."},
{"lineNum":" 1540","line":"       */"},
{"lineNum":" 1541","line":"      void"},
{"lineNum":" 1542","line":"      push_back(const value_type& __x)","class":"lineCov","hits":"1","order":"1498","possible_hits":"1",},
{"lineNum":" 1543","line":"      {"},
{"lineNum":" 1544","line":"\tif (this->_M_impl._M_finish._M_cur","class":"lineCov","hits":"2","order":"1499","possible_hits":"2",},
{"lineNum":" 1545","line":"\t    != this->_M_impl._M_finish._M_last - 1)","class":"lineCov","hits":"1","order":"1500","possible_hits":"1",},
{"lineNum":" 1546","line":"\t  {"},
{"lineNum":" 1547","line":"\t    _Alloc_traits::construct(this->_M_impl,","class":"lineCov","hits":"1","order":"1501","possible_hits":"1",},
{"lineNum":" 1548","line":"\t\t\t\t     this->_M_impl._M_finish._M_cur, __x);"},
{"lineNum":" 1549","line":"\t    ++this->_M_impl._M_finish._M_cur;","class":"lineCov","hits":"1","order":"1502","possible_hits":"1",},
{"lineNum":" 1550","line":"\t  }"},
{"lineNum":" 1551","line":"\telse"},
{"lineNum":" 1552","line":"\t  _M_push_back_aux(__x);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1553","line":"      }","class":"linePartCov","hits":"2","order":"1503","possible_hits":"3",},
{"lineNum":" 1554","line":""},
{"lineNum":" 1555","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1556","line":"      void"},
{"lineNum":" 1557","line":"      push_back(value_type&& __x)","class":"lineCov","hits":"1","order":"754","possible_hits":"1",},
{"lineNum":" 1558","line":"      { emplace_back(std::move(__x)); }","class":"linePartCov","hits":"1","order":"755","possible_hits":"2",},
{"lineNum":" 1559","line":""},
{"lineNum":" 1560","line":"      template<typename... _Args>"},
{"lineNum":" 1561","line":"#if __cplusplus > 201402L"},
{"lineNum":" 1562","line":"\treference"},
{"lineNum":" 1563","line":"#else"},
{"lineNum":" 1564","line":"\tvoid"},
{"lineNum":" 1565","line":"#endif"},
{"lineNum":" 1566","line":"\templace_back(_Args&&... __args);"},
{"lineNum":" 1567","line":"#endif"},
{"lineNum":" 1568","line":""},
{"lineNum":" 1569","line":"      /**"},
{"lineNum":" 1570","line":"       *  @brief  Removes first element."},
{"lineNum":" 1571","line":"       *"},
{"lineNum":" 1572","line":"       *  This is a typical stack operation.  It shrinks the %deque by one."},
{"lineNum":" 1573","line":"       *"},
{"lineNum":" 1574","line":"       *  Note that no data is returned, and if the first element\'s data is"},
{"lineNum":" 1575","line":"       *  needed, it should be retrieved before pop_front() is called."},
{"lineNum":" 1576","line":"       */"},
{"lineNum":" 1577","line":"      void"},
{"lineNum":" 1578","line":"      pop_front() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1579","line":"      {"},
{"lineNum":" 1580","line":"\t__glibcxx_requires_nonempty();"},
{"lineNum":" 1581","line":"\tif (this->_M_impl._M_start._M_cur"},
{"lineNum":" 1582","line":"\t    != this->_M_impl._M_start._M_last - 1)"},
{"lineNum":" 1583","line":"\t  {"},
{"lineNum":" 1584","line":"\t    _Alloc_traits::destroy(this->_M_impl,"},
{"lineNum":" 1585","line":"\t\t\t\t   this->_M_impl._M_start._M_cur);"},
{"lineNum":" 1586","line":"\t    ++this->_M_impl._M_start._M_cur;"},
{"lineNum":" 1587","line":"\t  }"},
{"lineNum":" 1588","line":"\telse"},
{"lineNum":" 1589","line":"\t  _M_pop_front_aux();"},
{"lineNum":" 1590","line":"      }"},
{"lineNum":" 1591","line":""},
{"lineNum":" 1592","line":"      /**"},
{"lineNum":" 1593","line":"       *  @brief  Removes last element."},
{"lineNum":" 1594","line":"       *"},
{"lineNum":" 1595","line":"       *  This is a typical stack operation.  It shrinks the %deque by one."},
{"lineNum":" 1596","line":"       *"},
{"lineNum":" 1597","line":"       *  Note that no data is returned, and if the last element\'s data is"},
{"lineNum":" 1598","line":"       *  needed, it should be retrieved before pop_back() is called."},
{"lineNum":" 1599","line":"       */"},
{"lineNum":" 1600","line":"      void"},
{"lineNum":" 1601","line":"      pop_back() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1461","possible_hits":"1",},
{"lineNum":" 1602","line":"      {"},
{"lineNum":" 1603","line":"\t__glibcxx_requires_nonempty();"},
{"lineNum":" 1604","line":"\tif (this->_M_impl._M_finish._M_cur","class":"lineCov","hits":"2","order":"1462","possible_hits":"2",},
{"lineNum":" 1605","line":"\t    != this->_M_impl._M_finish._M_first)","class":"lineCov","hits":"1","order":"1463","possible_hits":"1",},
{"lineNum":" 1606","line":"\t  {"},
{"lineNum":" 1607","line":"\t    --this->_M_impl._M_finish._M_cur;","class":"lineCov","hits":"1","order":"1464","possible_hits":"1",},
{"lineNum":" 1608","line":"\t    _Alloc_traits::destroy(this->_M_impl,","class":"lineCov","hits":"1","order":"1465","possible_hits":"1",},
{"lineNum":" 1609","line":"\t\t\t\t   this->_M_impl._M_finish._M_cur);"},
{"lineNum":" 1610","line":"\t  }"},
{"lineNum":" 1611","line":"\telse"},
{"lineNum":" 1612","line":"\t  _M_pop_back_aux();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1613","line":"      }","class":"linePartCov","hits":"2","order":"1479","possible_hits":"3",},
{"lineNum":" 1614","line":""},
{"lineNum":" 1615","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1616","line":"      /**"},
{"lineNum":" 1617","line":"       *  @brief  Inserts an object in %deque before specified iterator."},
{"lineNum":" 1618","line":"       *  @param  __position  A const_iterator into the %deque."},
{"lineNum":" 1619","line":"       *  @param  __args  Arguments."},
{"lineNum":" 1620","line":"       *  @return  An iterator that points to the inserted data."},
{"lineNum":" 1621","line":"       *"},
{"lineNum":" 1622","line":"       *  This function will insert an object of type T constructed"},
{"lineNum":" 1623","line":"       *  with T(std::forward<Args>(args)...) before the specified location."},
{"lineNum":" 1624","line":"       */"},
{"lineNum":" 1625","line":"      template<typename... _Args>"},
{"lineNum":" 1626","line":"\titerator"},
{"lineNum":" 1627","line":"\templace(const_iterator __position, _Args&&... __args);"},
{"lineNum":" 1628","line":""},
{"lineNum":" 1629","line":"      /**"},
{"lineNum":" 1630","line":"       *  @brief  Inserts given value into %deque before specified iterator."},
{"lineNum":" 1631","line":"       *  @param  __position  A const_iterator into the %deque."},
{"lineNum":" 1632","line":"       *  @param  __x  Data to be inserted."},
{"lineNum":" 1633","line":"       *  @return  An iterator that points to the inserted data."},
{"lineNum":" 1634","line":"       *"},
{"lineNum":" 1635","line":"       *  This function will insert a copy of the given value before the"},
{"lineNum":" 1636","line":"       *  specified location."},
{"lineNum":" 1637","line":"       */"},
{"lineNum":" 1638","line":"      iterator"},
{"lineNum":" 1639","line":"      insert(const_iterator __position, const value_type& __x);"},
{"lineNum":" 1640","line":"#else"},
{"lineNum":" 1641","line":"      /**"},
{"lineNum":" 1642","line":"       *  @brief  Inserts given value into %deque before specified iterator."},
{"lineNum":" 1643","line":"       *  @param  __position  An iterator into the %deque."},
{"lineNum":" 1644","line":"       *  @param  __x  Data to be inserted."},
{"lineNum":" 1645","line":"       *  @return  An iterator that points to the inserted data."},
{"lineNum":" 1646","line":"       *"},
{"lineNum":" 1647","line":"       *  This function will insert a copy of the given value before the"},
{"lineNum":" 1648","line":"       *  specified location."},
{"lineNum":" 1649","line":"       */"},
{"lineNum":" 1650","line":"      iterator"},
{"lineNum":" 1651","line":"      insert(iterator __position, const value_type& __x);"},
{"lineNum":" 1652","line":"#endif"},
{"lineNum":" 1653","line":""},
{"lineNum":" 1654","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1655","line":"      /**"},
{"lineNum":" 1656","line":"       *  @brief  Inserts given rvalue into %deque before specified iterator."},
{"lineNum":" 1657","line":"       *  @param  __position  A const_iterator into the %deque."},
{"lineNum":" 1658","line":"       *  @param  __x  Data to be inserted."},
{"lineNum":" 1659","line":"       *  @return  An iterator that points to the inserted data."},
{"lineNum":" 1660","line":"       *"},
{"lineNum":" 1661","line":"       *  This function will insert a copy of the given rvalue before the"},
{"lineNum":" 1662","line":"       *  specified location."},
{"lineNum":" 1663","line":"       */"},
{"lineNum":" 1664","line":"      iterator"},
{"lineNum":" 1665","line":"      insert(const_iterator __position, value_type&& __x)"},
{"lineNum":" 1666","line":"      { return emplace(__position, std::move(__x)); }"},
{"lineNum":" 1667","line":""},
{"lineNum":" 1668","line":"      /**"},
{"lineNum":" 1669","line":"       *  @brief  Inserts an initializer list into the %deque."},
{"lineNum":" 1670","line":"       *  @param  __p  An iterator into the %deque."},
{"lineNum":" 1671","line":"       *  @param  __l  An initializer_list."},
{"lineNum":" 1672","line":"       *"},
{"lineNum":" 1673","line":"       *  This function will insert copies of the data in the"},
{"lineNum":" 1674","line":"       *  initializer_list @a __l into the %deque before the location"},
{"lineNum":" 1675","line":"       *  specified by @a __p.  This is known as <em>list insert</em>."},
{"lineNum":" 1676","line":"       */"},
{"lineNum":" 1677","line":"      iterator"},
{"lineNum":" 1678","line":"      insert(const_iterator __p, initializer_list<value_type> __l)"},
{"lineNum":" 1679","line":"      {"},
{"lineNum":" 1680","line":"\tauto __offset = __p - cbegin();"},
{"lineNum":" 1681","line":"\t_M_range_insert_aux(__p._M_const_cast(), __l.begin(), __l.end(),"},
{"lineNum":" 1682","line":"\t\t\t    std::random_access_iterator_tag());"},
{"lineNum":" 1683","line":"\treturn begin() + __offset;"},
{"lineNum":" 1684","line":"      }"},
{"lineNum":" 1685","line":"#endif"},
{"lineNum":" 1686","line":""},
{"lineNum":" 1687","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1688","line":"      /**"},
{"lineNum":" 1689","line":"       *  @brief  Inserts a number of copies of given data into the %deque."},
{"lineNum":" 1690","line":"       *  @param  __position  A const_iterator into the %deque."},
{"lineNum":" 1691","line":"       *  @param  __n  Number of elements to be inserted."},
{"lineNum":" 1692","line":"       *  @param  __x  Data to be inserted."},
{"lineNum":" 1693","line":"       *  @return  An iterator that points to the inserted data."},
{"lineNum":" 1694","line":"       *"},
{"lineNum":" 1695","line":"       *  This function will insert a specified number of copies of the given"},
{"lineNum":" 1696","line":"       *  data before the location specified by @a __position."},
{"lineNum":" 1697","line":"       */"},
{"lineNum":" 1698","line":"      iterator"},
{"lineNum":" 1699","line":"      insert(const_iterator __position, size_type __n, const value_type& __x)"},
{"lineNum":" 1700","line":"      {"},
{"lineNum":" 1701","line":"\tdifference_type __offset = __position - cbegin();"},
{"lineNum":" 1702","line":"\t_M_fill_insert(__position._M_const_cast(), __n, __x);"},
{"lineNum":" 1703","line":"\treturn begin() + __offset;"},
{"lineNum":" 1704","line":"      }"},
{"lineNum":" 1705","line":"#else"},
{"lineNum":" 1706","line":"      /**"},
{"lineNum":" 1707","line":"       *  @brief  Inserts a number of copies of given data into the %deque."},
{"lineNum":" 1708","line":"       *  @param  __position  An iterator into the %deque."},
{"lineNum":" 1709","line":"       *  @param  __n  Number of elements to be inserted."},
{"lineNum":" 1710","line":"       *  @param  __x  Data to be inserted."},
{"lineNum":" 1711","line":"       *"},
{"lineNum":" 1712","line":"       *  This function will insert a specified number of copies of the given"},
{"lineNum":" 1713","line":"       *  data before the location specified by @a __position."},
{"lineNum":" 1714","line":"       */"},
{"lineNum":" 1715","line":"      void"},
{"lineNum":" 1716","line":"      insert(iterator __position, size_type __n, const value_type& __x)"},
{"lineNum":" 1717","line":"      { _M_fill_insert(__position, __n, __x); }"},
{"lineNum":" 1718","line":"#endif"},
{"lineNum":" 1719","line":""},
{"lineNum":" 1720","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1721","line":"      /**"},
{"lineNum":" 1722","line":"       *  @brief  Inserts a range into the %deque."},
{"lineNum":" 1723","line":"       *  @param  __position  A const_iterator into the %deque."},
{"lineNum":" 1724","line":"       *  @param  __first  An input iterator."},
{"lineNum":" 1725","line":"       *  @param  __last   An input iterator."},
{"lineNum":" 1726","line":"       *  @return  An iterator that points to the inserted data."},
{"lineNum":" 1727","line":"       *"},
{"lineNum":" 1728","line":"       *  This function will insert copies of the data in the range"},
{"lineNum":" 1729","line":"       *  [__first,__last) into the %deque before the location specified"},
{"lineNum":" 1730","line":"       *  by @a __position.  This is known as <em>range insert</em>."},
{"lineNum":" 1731","line":"       */"},
{"lineNum":" 1732","line":"      template<typename _InputIterator,"},
{"lineNum":" 1733","line":"\t       typename = std::_RequireInputIter<_InputIterator>>"},
{"lineNum":" 1734","line":"\titerator"},
{"lineNum":" 1735","line":"\tinsert(const_iterator __position, _InputIterator __first,"},
{"lineNum":" 1736","line":"\t       _InputIterator __last)"},
{"lineNum":" 1737","line":"\t{"},
{"lineNum":" 1738","line":"\t  difference_type __offset = __position - cbegin();"},
{"lineNum":" 1739","line":"\t  _M_insert_dispatch(__position._M_const_cast(),"},
{"lineNum":" 1740","line":"\t\t\t     __first, __last, __false_type());"},
{"lineNum":" 1741","line":"\t  return begin() + __offset;"},
{"lineNum":" 1742","line":"\t}"},
{"lineNum":" 1743","line":"#else"},
{"lineNum":" 1744","line":"      /**"},
{"lineNum":" 1745","line":"       *  @brief  Inserts a range into the %deque."},
{"lineNum":" 1746","line":"       *  @param  __position  An iterator into the %deque."},
{"lineNum":" 1747","line":"       *  @param  __first  An input iterator."},
{"lineNum":" 1748","line":"       *  @param  __last   An input iterator."},
{"lineNum":" 1749","line":"       *"},
{"lineNum":" 1750","line":"       *  This function will insert copies of the data in the range"},
{"lineNum":" 1751","line":"       *  [__first,__last) into the %deque before the location specified"},
{"lineNum":" 1752","line":"       *  by @a __position.  This is known as <em>range insert</em>."},
{"lineNum":" 1753","line":"       */"},
{"lineNum":" 1754","line":"      template<typename _InputIterator>"},
{"lineNum":" 1755","line":"\tvoid"},
{"lineNum":" 1756","line":"\tinsert(iterator __position, _InputIterator __first,"},
{"lineNum":" 1757","line":"\t       _InputIterator __last)"},
{"lineNum":" 1758","line":"\t{"},
{"lineNum":" 1759","line":"\t  // Check whether it\'s an integral type.  If so, it\'s not an iterator."},
{"lineNum":" 1760","line":"\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;"},
{"lineNum":" 1761","line":"\t  _M_insert_dispatch(__position, __first, __last, _Integral());"},
{"lineNum":" 1762","line":"\t}"},
{"lineNum":" 1763","line":"#endif"},
{"lineNum":" 1764","line":""},
{"lineNum":" 1765","line":"      /**"},
{"lineNum":" 1766","line":"       *  @brief  Remove element at given position."},
{"lineNum":" 1767","line":"       *  @param  __position  Iterator pointing to element to be erased."},
{"lineNum":" 1768","line":"       *  @return  An iterator pointing to the next element (or end())."},
{"lineNum":" 1769","line":"       *"},
{"lineNum":" 1770","line":"       *  This function will erase the element at the given position and thus"},
{"lineNum":" 1771","line":"       *  shorten the %deque by one."},
{"lineNum":" 1772","line":"       *"},
{"lineNum":" 1773","line":"       *  The user is cautioned that"},
{"lineNum":" 1774","line":"       *  this function only erases the element, and that if the element is"},
{"lineNum":" 1775","line":"       *  itself a pointer, the pointed-to memory is not touched in any way."},
{"lineNum":" 1776","line":"       *  Managing the pointer is the user\'s responsibility."},
{"lineNum":" 1777","line":"       */"},
{"lineNum":" 1778","line":"      iterator"},
{"lineNum":" 1779","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1780","line":"      erase(const_iterator __position)"},
{"lineNum":" 1781","line":"#else"},
{"lineNum":" 1782","line":"      erase(iterator __position)"},
{"lineNum":" 1783","line":"#endif"},
{"lineNum":" 1784","line":"      { return _M_erase(__position._M_const_cast()); }"},
{"lineNum":" 1785","line":""},
{"lineNum":" 1786","line":"      /**"},
{"lineNum":" 1787","line":"       *  @brief  Remove a range of elements."},
{"lineNum":" 1788","line":"       *  @param  __first  Iterator pointing to the first element to be erased."},
{"lineNum":" 1789","line":"       *  @param  __last  Iterator pointing to one past the last element to be"},
{"lineNum":" 1790","line":"       *                erased."},
{"lineNum":" 1791","line":"       *  @return  An iterator pointing to the element pointed to by @a last"},
{"lineNum":" 1792","line":"       *           prior to erasing (or end())."},
{"lineNum":" 1793","line":"       *"},
{"lineNum":" 1794","line":"       *  This function will erase the elements in the range"},
{"lineNum":" 1795","line":"       *  [__first,__last) and shorten the %deque accordingly."},
{"lineNum":" 1796","line":"       *"},
{"lineNum":" 1797","line":"       *  The user is cautioned that"},
{"lineNum":" 1798","line":"       *  this function only erases the elements, and that if the elements"},
{"lineNum":" 1799","line":"       *  themselves are pointers, the pointed-to memory is not touched in any"},
{"lineNum":" 1800","line":"       *  way.  Managing the pointer is the user\'s responsibility."},
{"lineNum":" 1801","line":"       */"},
{"lineNum":" 1802","line":"      iterator"},
{"lineNum":" 1803","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1804","line":"      erase(const_iterator __first, const_iterator __last)"},
{"lineNum":" 1805","line":"#else"},
{"lineNum":" 1806","line":"      erase(iterator __first, iterator __last)"},
{"lineNum":" 1807","line":"#endif"},
{"lineNum":" 1808","line":"      { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }"},
{"lineNum":" 1809","line":""},
{"lineNum":" 1810","line":"      /**"},
{"lineNum":" 1811","line":"       *  @brief  Swaps data with another %deque."},
{"lineNum":" 1812","line":"       *  @param  __x  A %deque of the same element and allocator types."},
{"lineNum":" 1813","line":"       *"},
{"lineNum":" 1814","line":"       *  This exchanges the elements between two deques in constant time."},
{"lineNum":" 1815","line":"       *  (Four pointers, so it should be quite fast.)"},
{"lineNum":" 1816","line":"       *  Note that the global std::swap() function is specialized such that"},
{"lineNum":" 1817","line":"       *  std::swap(d1,d2) will feed to this function."},
{"lineNum":" 1818","line":"       *"},
{"lineNum":" 1819","line":"       *  Whether the allocators are swapped depends on the allocator traits."},
{"lineNum":" 1820","line":"       */"},
{"lineNum":" 1821","line":"      void"},
{"lineNum":" 1822","line":"      swap(deque& __x) _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1823","line":"      {"},
{"lineNum":" 1824","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1825","line":"\t__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value"},
{"lineNum":" 1826","line":"\t\t\t || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());"},
{"lineNum":" 1827","line":"#endif"},
{"lineNum":" 1828","line":"\t_M_impl._M_swap_data(__x._M_impl);"},
{"lineNum":" 1829","line":"\t_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),"},
{"lineNum":" 1830","line":"\t\t\t\t  __x._M_get_Tp_allocator());"},
{"lineNum":" 1831","line":"      }"},
{"lineNum":" 1832","line":""},
{"lineNum":" 1833","line":"      /**"},
{"lineNum":" 1834","line":"       *  Erases all the elements.  Note that this function only erases the"},
{"lineNum":" 1835","line":"       *  elements, and that if the elements themselves are pointers, the"},
{"lineNum":" 1836","line":"       *  pointed-to memory is not touched in any way.  Managing the pointer is"},
{"lineNum":" 1837","line":"       *  the user\'s responsibility."},
{"lineNum":" 1838","line":"       */"},
{"lineNum":" 1839","line":"      void"},
{"lineNum":" 1840","line":"      clear() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1841","line":"      { _M_erase_at_end(begin()); }"},
{"lineNum":" 1842","line":""},
{"lineNum":" 1843","line":"    protected:"},
{"lineNum":" 1844","line":"      // Internal constructor functions follow."},
{"lineNum":" 1845","line":""},
{"lineNum":" 1846","line":"      // called by the range constructor to implement [23.1.1]/9"},
{"lineNum":" 1847","line":""},
{"lineNum":" 1848","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":" 1849","line":"      // 438. Ambiguity in the \"do the right thing\" clause"},
{"lineNum":" 1850","line":"      template<typename _Integer>"},
{"lineNum":" 1851","line":"\tvoid"},
{"lineNum":" 1852","line":"\t_M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)"},
{"lineNum":" 1853","line":"\t{"},
{"lineNum":" 1854","line":"\t  _M_initialize_map(static_cast<size_type>(__n));"},
{"lineNum":" 1855","line":"\t  _M_fill_initialize(__x);"},
{"lineNum":" 1856","line":"\t}"},
{"lineNum":" 1857","line":""},
{"lineNum":" 1858","line":"      // called by the range constructor to implement [23.1.1]/9"},
{"lineNum":" 1859","line":"      template<typename _InputIterator>"},
{"lineNum":" 1860","line":"\tvoid"},
{"lineNum":" 1861","line":"\t_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 1862","line":"\t\t\t       __false_type)"},
{"lineNum":" 1863","line":"\t{"},
{"lineNum":" 1864","line":"\t  _M_range_initialize(__first, __last,"},
{"lineNum":" 1865","line":"\t\t\t      std::__iterator_category(__first));"},
{"lineNum":" 1866","line":"\t}"},
{"lineNum":" 1867","line":""},
{"lineNum":" 1868","line":"      // called by the second initialize_dispatch above"},
{"lineNum":" 1869","line":"      //@{"},
{"lineNum":" 1870","line":"      /**"},
{"lineNum":" 1871","line":"       *  @brief Fills the deque with whatever is in [first,last)."},
{"lineNum":" 1872","line":"       *  @param  __first  An input iterator."},
{"lineNum":" 1873","line":"       *  @param  __last  An input iterator."},
{"lineNum":" 1874","line":"       *  @return   Nothing."},
{"lineNum":" 1875","line":"       *"},
{"lineNum":" 1876","line":"       *  If the iterators are actually forward iterators (or better), then the"},
{"lineNum":" 1877","line":"       *  memory layout can be done all at once.  Else we move forward using"},
{"lineNum":" 1878","line":"       *  push_back on each value from the iterator."},
{"lineNum":" 1879","line":"       */"},
{"lineNum":" 1880","line":"      template<typename _InputIterator>"},
{"lineNum":" 1881","line":"\tvoid"},
{"lineNum":" 1882","line":"\t_M_range_initialize(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 1883","line":"\t\t\t    std::input_iterator_tag);"},
{"lineNum":" 1884","line":""},
{"lineNum":" 1885","line":"      // called by the second initialize_dispatch above"},
{"lineNum":" 1886","line":"      template<typename _ForwardIterator>"},
{"lineNum":" 1887","line":"\tvoid"},
{"lineNum":" 1888","line":"\t_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":" 1889","line":"\t\t\t    std::forward_iterator_tag);"},
{"lineNum":" 1890","line":"      //@}"},
{"lineNum":" 1891","line":""},
{"lineNum":" 1892","line":"      /**"},
{"lineNum":" 1893","line":"       *  @brief Fills the %deque with copies of value."},
{"lineNum":" 1894","line":"       *  @param  __value  Initial value."},
{"lineNum":" 1895","line":"       *  @return   Nothing."},
{"lineNum":" 1896","line":"       *  @pre _M_start and _M_finish have already been initialized,"},
{"lineNum":" 1897","line":"       *  but none of the %deque\'s elements have yet been constructed."},
{"lineNum":" 1898","line":"       *"},
{"lineNum":" 1899","line":"       *  This function is called only when the user provides an explicit size"},
{"lineNum":" 1900","line":"       *  (with or without an explicit exemplar value)."},
{"lineNum":" 1901","line":"       */"},
{"lineNum":" 1902","line":"      void"},
{"lineNum":" 1903","line":"      _M_fill_initialize(const value_type& __value);"},
{"lineNum":" 1904","line":""},
{"lineNum":" 1905","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1906","line":"      // called by deque(n)."},
{"lineNum":" 1907","line":"      void"},
{"lineNum":" 1908","line":"      _M_default_initialize();"},
{"lineNum":" 1909","line":"#endif"},
{"lineNum":" 1910","line":""},
{"lineNum":" 1911","line":"      // Internal assign functions follow.  The *_aux functions do the actual"},
{"lineNum":" 1912","line":"      // assignment work for the range versions."},
{"lineNum":" 1913","line":""},
{"lineNum":" 1914","line":"      // called by the range assign to implement [23.1.1]/9"},
{"lineNum":" 1915","line":""},
{"lineNum":" 1916","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":" 1917","line":"      // 438. Ambiguity in the \"do the right thing\" clause"},
{"lineNum":" 1918","line":"      template<typename _Integer>"},
{"lineNum":" 1919","line":"\tvoid"},
{"lineNum":" 1920","line":"\t_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)"},
{"lineNum":" 1921","line":"\t{ _M_fill_assign(__n, __val); }"},
{"lineNum":" 1922","line":""},
{"lineNum":" 1923","line":"      // called by the range assign to implement [23.1.1]/9"},
{"lineNum":" 1924","line":"      template<typename _InputIterator>"},
{"lineNum":" 1925","line":"\tvoid"},
{"lineNum":" 1926","line":"\t_M_assign_dispatch(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 1927","line":"\t\t\t   __false_type)"},
{"lineNum":" 1928","line":"\t{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }"},
{"lineNum":" 1929","line":""},
{"lineNum":" 1930","line":"      // called by the second assign_dispatch above"},
{"lineNum":" 1931","line":"      template<typename _InputIterator>"},
{"lineNum":" 1932","line":"\tvoid"},
{"lineNum":" 1933","line":"\t_M_assign_aux(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 1934","line":"\t\t      std::input_iterator_tag);"},
{"lineNum":" 1935","line":""},
{"lineNum":" 1936","line":"      // called by the second assign_dispatch above"},
{"lineNum":" 1937","line":"      template<typename _ForwardIterator>"},
{"lineNum":" 1938","line":"\tvoid"},
{"lineNum":" 1939","line":"\t_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":" 1940","line":"\t\t      std::forward_iterator_tag)"},
{"lineNum":" 1941","line":"\t{"},
{"lineNum":" 1942","line":"\t  const size_type __len = std::distance(__first, __last);"},
{"lineNum":" 1943","line":"\t  if (__len > size())"},
{"lineNum":" 1944","line":"\t    {"},
{"lineNum":" 1945","line":"\t      _ForwardIterator __mid = __first;"},
{"lineNum":" 1946","line":"\t      std::advance(__mid, size());"},
{"lineNum":" 1947","line":"\t      std::copy(__first, __mid, begin());"},
{"lineNum":" 1948","line":"\t      _M_range_insert_aux(end(), __mid, __last,"},
{"lineNum":" 1949","line":"\t\t\t\t  std::__iterator_category(__first));"},
{"lineNum":" 1950","line":"\t    }"},
{"lineNum":" 1951","line":"\t  else"},
{"lineNum":" 1952","line":"\t    _M_erase_at_end(std::copy(__first, __last, begin()));"},
{"lineNum":" 1953","line":"\t}"},
{"lineNum":" 1954","line":""},
{"lineNum":" 1955","line":"      // Called by assign(n,t), and the range assign when it turns out"},
{"lineNum":" 1956","line":"      // to be the same thing."},
{"lineNum":" 1957","line":"      void"},
{"lineNum":" 1958","line":"      _M_fill_assign(size_type __n, const value_type& __val)"},
{"lineNum":" 1959","line":"      {"},
{"lineNum":" 1960","line":"\tif (__n > size())"},
{"lineNum":" 1961","line":"\t  {"},
{"lineNum":" 1962","line":"\t    std::fill(begin(), end(), __val);"},
{"lineNum":" 1963","line":"\t    _M_fill_insert(end(), __n - size(), __val);"},
{"lineNum":" 1964","line":"\t  }"},
{"lineNum":" 1965","line":"\telse"},
{"lineNum":" 1966","line":"\t  {"},
{"lineNum":" 1967","line":"\t    _M_erase_at_end(begin() + difference_type(__n));"},
{"lineNum":" 1968","line":"\t    std::fill(begin(), end(), __val);"},
{"lineNum":" 1969","line":"\t  }"},
{"lineNum":" 1970","line":"      }"},
{"lineNum":" 1971","line":""},
{"lineNum":" 1972","line":"      //@{"},
{"lineNum":" 1973","line":"      /// Helper functions for push_* and pop_*."},
{"lineNum":" 1974","line":"#if __cplusplus < 201103L"},
{"lineNum":" 1975","line":"      void _M_push_back_aux(const value_type&);"},
{"lineNum":" 1976","line":""},
{"lineNum":" 1977","line":"      void _M_push_front_aux(const value_type&);"},
{"lineNum":" 1978","line":"#else"},
{"lineNum":" 1979","line":"      template<typename... _Args>"},
{"lineNum":" 1980","line":"\tvoid _M_push_back_aux(_Args&&... __args);"},
{"lineNum":" 1981","line":""},
{"lineNum":" 1982","line":"      template<typename... _Args>"},
{"lineNum":" 1983","line":"\tvoid _M_push_front_aux(_Args&&... __args);"},
{"lineNum":" 1984","line":"#endif"},
{"lineNum":" 1985","line":""},
{"lineNum":" 1986","line":"      void _M_pop_back_aux();"},
{"lineNum":" 1987","line":""},
{"lineNum":" 1988","line":"      void _M_pop_front_aux();"},
{"lineNum":" 1989","line":"      //@}"},
{"lineNum":" 1990","line":""},
{"lineNum":" 1991","line":"      // Internal insert functions follow.  The *_aux functions do the actual"},
{"lineNum":" 1992","line":"      // insertion work when all shortcuts fail."},
{"lineNum":" 1993","line":""},
{"lineNum":" 1994","line":"      // called by the range insert to implement [23.1.1]/9"},
{"lineNum":" 1995","line":""},
{"lineNum":" 1996","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":" 1997","line":"      // 438. Ambiguity in the \"do the right thing\" clause"},
{"lineNum":" 1998","line":"      template<typename _Integer>"},
{"lineNum":" 1999","line":"\tvoid"},
{"lineNum":" 2000","line":"\t_M_insert_dispatch(iterator __pos,"},
{"lineNum":" 2001","line":"\t\t\t   _Integer __n, _Integer __x, __true_type)"},
{"lineNum":" 2002","line":"\t{ _M_fill_insert(__pos, __n, __x); }"},
{"lineNum":" 2003","line":""},
{"lineNum":" 2004","line":"      // called by the range insert to implement [23.1.1]/9"},
{"lineNum":" 2005","line":"      template<typename _InputIterator>"},
{"lineNum":" 2006","line":"\tvoid"},
{"lineNum":" 2007","line":"\t_M_insert_dispatch(iterator __pos,"},
{"lineNum":" 2008","line":"\t\t\t   _InputIterator __first, _InputIterator __last,"},
{"lineNum":" 2009","line":"\t\t\t   __false_type)"},
{"lineNum":" 2010","line":"\t{"},
{"lineNum":" 2011","line":"\t  _M_range_insert_aux(__pos, __first, __last,"},
{"lineNum":" 2012","line":"\t\t\t      std::__iterator_category(__first));"},
{"lineNum":" 2013","line":"\t}"},
{"lineNum":" 2014","line":""},
{"lineNum":" 2015","line":"      // called by the second insert_dispatch above"},
{"lineNum":" 2016","line":"      template<typename _InputIterator>"},
{"lineNum":" 2017","line":"\tvoid"},
{"lineNum":" 2018","line":"\t_M_range_insert_aux(iterator __pos, _InputIterator __first,"},
{"lineNum":" 2019","line":"\t\t\t    _InputIterator __last, std::input_iterator_tag);"},
{"lineNum":" 2020","line":""},
{"lineNum":" 2021","line":"      // called by the second insert_dispatch above"},
{"lineNum":" 2022","line":"      template<typename _ForwardIterator>"},
{"lineNum":" 2023","line":"\tvoid"},
{"lineNum":" 2024","line":"\t_M_range_insert_aux(iterator __pos, _ForwardIterator __first,"},
{"lineNum":" 2025","line":"\t\t\t    _ForwardIterator __last, std::forward_iterator_tag);"},
{"lineNum":" 2026","line":""},
{"lineNum":" 2027","line":"      // Called by insert(p,n,x), and the range insert when it turns out to be"},
{"lineNum":" 2028","line":"      // the same thing.  Can use fill functions in optimal situations,"},
{"lineNum":" 2029","line":"      // otherwise passes off to insert_aux(p,n,x)."},
{"lineNum":" 2030","line":"      void"},
{"lineNum":" 2031","line":"      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);"},
{"lineNum":" 2032","line":""},
{"lineNum":" 2033","line":"      // called by insert(p,x)"},
{"lineNum":" 2034","line":"#if __cplusplus < 201103L"},
{"lineNum":" 2035","line":"      iterator"},
{"lineNum":" 2036","line":"      _M_insert_aux(iterator __pos, const value_type& __x);"},
{"lineNum":" 2037","line":"#else"},
{"lineNum":" 2038","line":"      template<typename... _Args>"},
{"lineNum":" 2039","line":"\titerator"},
{"lineNum":" 2040","line":"\t_M_insert_aux(iterator __pos, _Args&&... __args);"},
{"lineNum":" 2041","line":"#endif"},
{"lineNum":" 2042","line":""},
{"lineNum":" 2043","line":"      // called by insert(p,n,x) via fill_insert"},
{"lineNum":" 2044","line":"      void"},
{"lineNum":" 2045","line":"      _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);"},
{"lineNum":" 2046","line":""},
{"lineNum":" 2047","line":"      // called by range_insert_aux for forward iterators"},
{"lineNum":" 2048","line":"      template<typename _ForwardIterator>"},
{"lineNum":" 2049","line":"\tvoid"},
{"lineNum":" 2050","line":"\t_M_insert_aux(iterator __pos,"},
{"lineNum":" 2051","line":"\t\t      _ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":" 2052","line":"\t\t      size_type __n);"},
{"lineNum":" 2053","line":""},
{"lineNum":" 2054","line":""},
{"lineNum":" 2055","line":"      // Internal erase functions follow."},
{"lineNum":" 2056","line":""},
{"lineNum":" 2057","line":"      void"},
{"lineNum":" 2058","line":"      _M_destroy_data_aux(iterator __first, iterator __last);"},
{"lineNum":" 2059","line":""},
{"lineNum":" 2060","line":"      // Called by ~deque()."},
{"lineNum":" 2061","line":"      // NB: Doesn\'t deallocate the nodes."},
{"lineNum":" 2062","line":"      template<typename _Alloc1>"},
{"lineNum":" 2063","line":"\tvoid"},
{"lineNum":" 2064","line":"\t_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)"},
{"lineNum":" 2065","line":"\t{ _M_destroy_data_aux(__first, __last); }"},
{"lineNum":" 2066","line":""},
{"lineNum":" 2067","line":"      void"},
{"lineNum":" 2068","line":"      _M_destroy_data(iterator __first, iterator __last,","class":"lineCov","hits":"2","order":"1992","possible_hits":"2",},
{"lineNum":" 2069","line":"\t\t      const std::allocator<_Tp>&)"},
{"lineNum":" 2070","line":"      {"},
{"lineNum":" 2071","line":"\tif (!__has_trivial_destructor(value_type))"},
{"lineNum":" 2072","line":"\t  _M_destroy_data_aux(__first, __last);","class":"lineCov","hits":"1","order":"1993","possible_hits":"1",},
{"lineNum":" 2073","line":"      }","class":"linePartCov","hits":"1","order":"2010","possible_hits":"2",},
{"lineNum":" 2074","line":""},
{"lineNum":" 2075","line":"      // Called by erase(q1, q2)."},
{"lineNum":" 2076","line":"      void"},
{"lineNum":" 2077","line":"      _M_erase_at_begin(iterator __pos)"},
{"lineNum":" 2078","line":"      {"},
{"lineNum":" 2079","line":"\t_M_destroy_data(begin(), __pos, _M_get_Tp_allocator());"},
{"lineNum":" 2080","line":"\t_M_destroy_nodes(this->_M_impl._M_start._M_node, __pos._M_node);"},
{"lineNum":" 2081","line":"\tthis->_M_impl._M_start = __pos;"},
{"lineNum":" 2082","line":"      }"},
{"lineNum":" 2083","line":""},
{"lineNum":" 2084","line":"      // Called by erase(q1, q2), resize(), clear(), _M_assign_aux,"},
{"lineNum":" 2085","line":"      // _M_fill_assign, operator=."},
{"lineNum":" 2086","line":"      void"},
{"lineNum":" 2087","line":"      _M_erase_at_end(iterator __pos)"},
{"lineNum":" 2088","line":"      {"},
{"lineNum":" 2089","line":"\t_M_destroy_data(__pos, end(), _M_get_Tp_allocator());"},
{"lineNum":" 2090","line":"\t_M_destroy_nodes(__pos._M_node + 1,"},
{"lineNum":" 2091","line":"\t\t\t this->_M_impl._M_finish._M_node + 1);"},
{"lineNum":" 2092","line":"\tthis->_M_impl._M_finish = __pos;"},
{"lineNum":" 2093","line":"      }"},
{"lineNum":" 2094","line":""},
{"lineNum":" 2095","line":"      iterator"},
{"lineNum":" 2096","line":"      _M_erase(iterator __pos);"},
{"lineNum":" 2097","line":""},
{"lineNum":" 2098","line":"      iterator"},
{"lineNum":" 2099","line":"      _M_erase(iterator __first, iterator __last);"},
{"lineNum":" 2100","line":""},
{"lineNum":" 2101","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 2102","line":"      // Called by resize(sz)."},
{"lineNum":" 2103","line":"      void"},
{"lineNum":" 2104","line":"      _M_default_append(size_type __n);"},
{"lineNum":" 2105","line":""},
{"lineNum":" 2106","line":"      bool"},
{"lineNum":" 2107","line":"      _M_shrink_to_fit();"},
{"lineNum":" 2108","line":"#endif"},
{"lineNum":" 2109","line":""},
{"lineNum":" 2110","line":"      //@{"},
{"lineNum":" 2111","line":"      /// Memory-handling helpers for the previous internal insert functions."},
{"lineNum":" 2112","line":"      iterator"},
{"lineNum":" 2113","line":"      _M_reserve_elements_at_front(size_type __n)"},
{"lineNum":" 2114","line":"      {"},
{"lineNum":" 2115","line":"\tconst size_type __vacancies = this->_M_impl._M_start._M_cur"},
{"lineNum":" 2116","line":"\t\t\t\t      - this->_M_impl._M_start._M_first;"},
{"lineNum":" 2117","line":"\tif (__n > __vacancies)"},
{"lineNum":" 2118","line":"\t  _M_new_elements_at_front(__n - __vacancies);"},
{"lineNum":" 2119","line":"\treturn this->_M_impl._M_start - difference_type(__n);"},
{"lineNum":" 2120","line":"      }"},
{"lineNum":" 2121","line":""},
{"lineNum":" 2122","line":"      iterator"},
{"lineNum":" 2123","line":"      _M_reserve_elements_at_back(size_type __n)"},
{"lineNum":" 2124","line":"      {"},
{"lineNum":" 2125","line":"\tconst size_type __vacancies = (this->_M_impl._M_finish._M_last"},
{"lineNum":" 2126","line":"\t\t\t\t       - this->_M_impl._M_finish._M_cur) - 1;"},
{"lineNum":" 2127","line":"\tif (__n > __vacancies)"},
{"lineNum":" 2128","line":"\t  _M_new_elements_at_back(__n - __vacancies);"},
{"lineNum":" 2129","line":"\treturn this->_M_impl._M_finish + difference_type(__n);"},
{"lineNum":" 2130","line":"      }"},
{"lineNum":" 2131","line":""},
{"lineNum":" 2132","line":"      void"},
{"lineNum":" 2133","line":"      _M_new_elements_at_front(size_type __new_elements);"},
{"lineNum":" 2134","line":""},
{"lineNum":" 2135","line":"      void"},
{"lineNum":" 2136","line":"      _M_new_elements_at_back(size_type __new_elements);"},
{"lineNum":" 2137","line":"      //@}"},
{"lineNum":" 2138","line":""},
{"lineNum":" 2139","line":""},
{"lineNum":" 2140","line":"      //@{"},
{"lineNum":" 2141","line":"      /**"},
{"lineNum":" 2142","line":"       *  @brief Memory-handling helpers for the major %map."},
{"lineNum":" 2143","line":"       *"},
{"lineNum":" 2144","line":"       *  Makes sure the _M_map has space for new nodes.  Does not"},
{"lineNum":" 2145","line":"       *  actually add the nodes.  Can invalidate _M_map pointers."},
{"lineNum":" 2146","line":"       *  (And consequently, %deque iterators.)"},
{"lineNum":" 2147","line":"       */"},
{"lineNum":" 2148","line":"      void"},
{"lineNum":" 2149","line":"      _M_reserve_map_at_back(size_type __nodes_to_add = 1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2150","line":"      {"},
{"lineNum":" 2151","line":"\tif (__nodes_to_add + 1 > this->_M_impl._M_map_size","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2152","line":"\t    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2153","line":"\t  _M_reallocate_map(__nodes_to_add, false);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2154","line":"      }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2155","line":""},
{"lineNum":" 2156","line":"      void"},
{"lineNum":" 2157","line":"      _M_reserve_map_at_front(size_type __nodes_to_add = 1)"},
{"lineNum":" 2158","line":"      {"},
{"lineNum":" 2159","line":"\tif (__nodes_to_add > size_type(this->_M_impl._M_start._M_node"},
{"lineNum":" 2160","line":"\t\t\t\t       - this->_M_impl._M_map))"},
{"lineNum":" 2161","line":"\t  _M_reallocate_map(__nodes_to_add, true);"},
{"lineNum":" 2162","line":"      }"},
{"lineNum":" 2163","line":""},
{"lineNum":" 2164","line":"      void"},
{"lineNum":" 2165","line":"      _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);"},
{"lineNum":" 2166","line":"      //@}"},
{"lineNum":" 2167","line":""},
{"lineNum":" 2168","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 2169","line":"      // Constant-time, nothrow move assignment when source object\'s memory"},
{"lineNum":" 2170","line":"      // can be moved because the allocators are equal."},
{"lineNum":" 2171","line":"      void"},
{"lineNum":" 2172","line":"      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept"},
{"lineNum":" 2173","line":"      {"},
{"lineNum":" 2174","line":"\tthis->_M_impl._M_swap_data(__x._M_impl);"},
{"lineNum":" 2175","line":"\t__x.clear();"},
{"lineNum":" 2176","line":"\tstd::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());"},
{"lineNum":" 2177","line":"      }"},
{"lineNum":" 2178","line":""},
{"lineNum":" 2179","line":"      // When the allocators are not equal the operation could throw, because"},
{"lineNum":" 2180","line":"      // we might need to allocate a new map for __x after moving from it"},
{"lineNum":" 2181","line":"      // or we might need to allocate new elements for *this."},
{"lineNum":" 2182","line":"      void"},
{"lineNum":" 2183","line":"      _M_move_assign1(deque&& __x, /* always equal: */ false_type)"},
{"lineNum":" 2184","line":"      {"},
{"lineNum":" 2185","line":"\tconstexpr bool __move_storage ="},
{"lineNum":" 2186","line":"\t  _Alloc_traits::_S_propagate_on_move_assign();"},
{"lineNum":" 2187","line":"\t_M_move_assign2(std::move(__x), __bool_constant<__move_storage>());"},
{"lineNum":" 2188","line":"      }"},
{"lineNum":" 2189","line":""},
{"lineNum":" 2190","line":"      // Destroy all elements and deallocate all memory, then replace"},
{"lineNum":" 2191","line":"      // with elements created from __args."},
{"lineNum":" 2192","line":"      template<typename... _Args>"},
{"lineNum":" 2193","line":"      void"},
{"lineNum":" 2194","line":"      _M_replace_map(_Args&&... __args)"},
{"lineNum":" 2195","line":"      {"},
{"lineNum":" 2196","line":"\t// Create new data first, so if allocation fails there are no effects."},
{"lineNum":" 2197","line":"\tdeque __newobj(std::forward<_Args>(__args)...);"},
{"lineNum":" 2198","line":"\t// Free existing storage using existing allocator."},
{"lineNum":" 2199","line":"\tclear();"},
{"lineNum":" 2200","line":"\t_M_deallocate_node(*begin()._M_node); // one node left after clear()"},
{"lineNum":" 2201","line":"\t_M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);"},
{"lineNum":" 2202","line":"\tthis->_M_impl._M_map = nullptr;"},
{"lineNum":" 2203","line":"\tthis->_M_impl._M_map_size = 0;"},
{"lineNum":" 2204","line":"\t// Take ownership of replacement memory."},
{"lineNum":" 2205","line":"\tthis->_M_impl._M_swap_data(__newobj._M_impl);"},
{"lineNum":" 2206","line":"      }"},
{"lineNum":" 2207","line":""},
{"lineNum":" 2208","line":"      // Do move assignment when the allocator propagates."},
{"lineNum":" 2209","line":"      void"},
{"lineNum":" 2210","line":"      _M_move_assign2(deque&& __x, /* propagate: */ true_type)"},
{"lineNum":" 2211","line":"      {"},
{"lineNum":" 2212","line":"\t// Make a copy of the original allocator state."},
{"lineNum":" 2213","line":"\tauto __alloc = __x._M_get_Tp_allocator();"},
{"lineNum":" 2214","line":"\t// The allocator propagates so storage can be moved from __x,"},
{"lineNum":" 2215","line":"\t// leaving __x in a valid empty state with a moved-from allocator."},
{"lineNum":" 2216","line":"\t_M_replace_map(std::move(__x));"},
{"lineNum":" 2217","line":"\t// Move the corresponding allocator state too."},
{"lineNum":" 2218","line":"\t_M_get_Tp_allocator() = std::move(__alloc);"},
{"lineNum":" 2219","line":"      }"},
{"lineNum":" 2220","line":""},
{"lineNum":" 2221","line":"      // Do move assignment when it may not be possible to move source"},
{"lineNum":" 2222","line":"      // object\'s memory, resulting in a linear-time operation."},
{"lineNum":" 2223","line":"      void"},
{"lineNum":" 2224","line":"      _M_move_assign2(deque&& __x, /* propagate: */ false_type)"},
{"lineNum":" 2225","line":"      {"},
{"lineNum":" 2226","line":"\tif (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())"},
{"lineNum":" 2227","line":"\t  {"},
{"lineNum":" 2228","line":"\t    // The allocators are equal so storage can be moved from __x,"},
{"lineNum":" 2229","line":"\t    // leaving __x in a valid empty state with its current allocator."},
{"lineNum":" 2230","line":"\t    _M_replace_map(std::move(__x), __x.get_allocator());"},
{"lineNum":" 2231","line":"\t  }"},
{"lineNum":" 2232","line":"\telse"},
{"lineNum":" 2233","line":"\t  {"},
{"lineNum":" 2234","line":"\t    // The rvalue\'s allocator cannot be moved and is not equal,"},
{"lineNum":" 2235","line":"\t    // so we need to individually move each element."},
{"lineNum":" 2236","line":"\t    _M_assign_aux(std::__make_move_if_noexcept_iterator(__x.begin()),"},
{"lineNum":" 2237","line":"\t\t\t  std::__make_move_if_noexcept_iterator(__x.end()),"},
{"lineNum":" 2238","line":"\t\t\t  std::random_access_iterator_tag());"},
{"lineNum":" 2239","line":"\t    __x.clear();"},
{"lineNum":" 2240","line":"\t  }"},
{"lineNum":" 2241","line":"      }"},
{"lineNum":" 2242","line":"#endif"},
{"lineNum":" 2243","line":"    };"},
{"lineNum":" 2244","line":""},
{"lineNum":" 2245","line":""},
{"lineNum":" 2246","line":"  /**"},
{"lineNum":" 2247","line":"   *  @brief  Deque equality comparison."},
{"lineNum":" 2248","line":"   *  @param  __x  A %deque."},
{"lineNum":" 2249","line":"   *  @param  __y  A %deque of the same type as @a __x."},
{"lineNum":" 2250","line":"   *  @return  True iff the size and elements of the deques are equal."},
{"lineNum":" 2251","line":"   *"},
{"lineNum":" 2252","line":"   *  This is an equivalence relation.  It is linear in the size of the"},
{"lineNum":" 2253","line":"   *  deques.  Deques are considered equivalent if their sizes are equal,"},
{"lineNum":" 2254","line":"   *  and if corresponding elements compare equal."},
{"lineNum":" 2255","line":"  */"},
{"lineNum":" 2256","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":" 2257","line":"    inline bool"},
{"lineNum":" 2258","line":"    operator==(const deque<_Tp, _Alloc>& __x,"},
{"lineNum":" 2259","line":"                         const deque<_Tp, _Alloc>& __y)"},
{"lineNum":" 2260","line":"    { return __x.size() == __y.size()"},
{"lineNum":" 2261","line":"\t     && std::equal(__x.begin(), __x.end(), __y.begin()); }"},
{"lineNum":" 2262","line":""},
{"lineNum":" 2263","line":"  /**"},
{"lineNum":" 2264","line":"   *  @brief  Deque ordering relation."},
{"lineNum":" 2265","line":"   *  @param  __x  A %deque."},
{"lineNum":" 2266","line":"   *  @param  __y  A %deque of the same type as @a __x."},
{"lineNum":" 2267","line":"   *  @return  True iff @a x is lexicographically less than @a __y."},
{"lineNum":" 2268","line":"   *"},
{"lineNum":" 2269","line":"   *  This is a total ordering relation.  It is linear in the size of the"},
{"lineNum":" 2270","line":"   *  deques.  The elements must be comparable with @c <."},
{"lineNum":" 2271","line":"   *"},
{"lineNum":" 2272","line":"   *  See std::lexicographical_compare() for how the determination is made."},
{"lineNum":" 2273","line":"  */"},
{"lineNum":" 2274","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":" 2275","line":"    inline bool"},
{"lineNum":" 2276","line":"    operator<(const deque<_Tp, _Alloc>& __x,"},
{"lineNum":" 2277","line":"\t      const deque<_Tp, _Alloc>& __y)"},
{"lineNum":" 2278","line":"    { return std::lexicographical_compare(__x.begin(), __x.end(),"},
{"lineNum":" 2279","line":"\t\t\t\t\t  __y.begin(), __y.end()); }"},
{"lineNum":" 2280","line":""},
{"lineNum":" 2281","line":"  /// Based on operator=="},
{"lineNum":" 2282","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":" 2283","line":"    inline bool"},
{"lineNum":" 2284","line":"    operator!=(const deque<_Tp, _Alloc>& __x,"},
{"lineNum":" 2285","line":"\t       const deque<_Tp, _Alloc>& __y)"},
{"lineNum":" 2286","line":"    { return !(__x == __y); }"},
{"lineNum":" 2287","line":""},
{"lineNum":" 2288","line":"  /// Based on operator<"},
{"lineNum":" 2289","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":" 2290","line":"    inline bool"},
{"lineNum":" 2291","line":"    operator>(const deque<_Tp, _Alloc>& __x,"},
{"lineNum":" 2292","line":"\t      const deque<_Tp, _Alloc>& __y)"},
{"lineNum":" 2293","line":"    { return __y < __x; }"},
{"lineNum":" 2294","line":""},
{"lineNum":" 2295","line":"  /// Based on operator<"},
{"lineNum":" 2296","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":" 2297","line":"    inline bool"},
{"lineNum":" 2298","line":"    operator<=(const deque<_Tp, _Alloc>& __x,"},
{"lineNum":" 2299","line":"\t       const deque<_Tp, _Alloc>& __y)"},
{"lineNum":" 2300","line":"    { return !(__y < __x); }"},
{"lineNum":" 2301","line":""},
{"lineNum":" 2302","line":"  /// Based on operator<"},
{"lineNum":" 2303","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":" 2304","line":"    inline bool"},
{"lineNum":" 2305","line":"    operator>=(const deque<_Tp, _Alloc>& __x,"},
{"lineNum":" 2306","line":"\t       const deque<_Tp, _Alloc>& __y)"},
{"lineNum":" 2307","line":"    { return !(__x < __y); }"},
{"lineNum":" 2308","line":""},
{"lineNum":" 2309","line":"  /// See std::deque::swap()."},
{"lineNum":" 2310","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":" 2311","line":"    inline void"},
{"lineNum":" 2312","line":"    swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)"},
{"lineNum":" 2313","line":"    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))"},
{"lineNum":" 2314","line":"    { __x.swap(__y); }"},
{"lineNum":" 2315","line":""},
{"lineNum":" 2316","line":"#undef _GLIBCXX_DEQUE_BUF_SIZE"},
{"lineNum":" 2317","line":""},
{"lineNum":" 2318","line":"_GLIBCXX_END_NAMESPACE_CONTAINER"},
{"lineNum":" 2319","line":"} // namespace std"},
{"lineNum":" 2320","line":""},
{"lineNum":" 2321","line":"#endif /* _STL_DEQUE_H */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "mipl_parser", "date" : "2018-11-28 14:11:04", "instrumented" : 130, "covered" : 111,};
var merged_data = [];
