var data = {lines:[
{"lineNum":"    1","line":"// RB tree implementation -*- C++ -*-"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 2001-2017 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This file is part of the GNU ISO C++ Library.  This library is free"},
{"lineNum":"    6","line":"// software; you can redistribute it and/or modify it under the"},
{"lineNum":"    7","line":"// terms of the GNU General Public License as published by the"},
{"lineNum":"    8","line":"// Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    9","line":"// any later version."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// This library is distributed in the hope that it will be useful,"},
{"lineNum":"   12","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   13","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   14","line":"// GNU General Public License for more details."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   17","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   18","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   21","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   22","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   23","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/*"},
{"lineNum":"   26","line":" *"},
{"lineNum":"   27","line":" * Copyright (c) 1996,1997"},
{"lineNum":"   28","line":" * Silicon Graphics Computer Systems, Inc."},
{"lineNum":"   29","line":" *"},
{"lineNum":"   30","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   31","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   32","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   33","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   34","line":" * in supporting documentation.  Silicon Graphics makes no"},
{"lineNum":"   35","line":" * representations about the suitability of this software for any"},
{"lineNum":"   36","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   37","line":" *"},
{"lineNum":"   38","line":" *"},
{"lineNum":"   39","line":" * Copyright (c) 1994"},
{"lineNum":"   40","line":" * Hewlett-Packard Company"},
{"lineNum":"   41","line":" *"},
{"lineNum":"   42","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   43","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   44","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   45","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   46","line":" * in supporting documentation.  Hewlett-Packard Company makes no"},
{"lineNum":"   47","line":" * representations about the suitability of this software for any"},
{"lineNum":"   48","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   49","line":" *"},
{"lineNum":"   50","line":" *"},
{"lineNum":"   51","line":" */"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"/** @file bits/stl_tree.h"},
{"lineNum":"   54","line":" *  This is an internal header file, included by other library headers."},
{"lineNum":"   55","line":" *  Do not attempt to use it directly. @headername{map,set}"},
{"lineNum":"   56","line":" */"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"#ifndef _STL_TREE_H"},
{"lineNum":"   59","line":"#define _STL_TREE_H 1"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"#pragma GCC system_header"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"#include <bits/stl_algobase.h>"},
{"lineNum":"   64","line":"#include <bits/allocator.h>"},
{"lineNum":"   65","line":"#include <bits/stl_function.h>"},
{"lineNum":"   66","line":"#include <bits/cpp_type_traits.h>"},
{"lineNum":"   67","line":"#include <ext/alloc_traits.h>"},
{"lineNum":"   68","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   69","line":"# include <ext/aligned_buffer.h>"},
{"lineNum":"   70","line":"#endif"},
{"lineNum":"   71","line":"#if __cplusplus > 201402L"},
{"lineNum":"   72","line":"# include <bits/node_handle.h>"},
{"lineNum":"   73","line":"#endif"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   76","line":"{"},
{"lineNum":"   77","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"#if __cplusplus > 201103L"},
{"lineNum":"   80","line":"# define __cpp_lib_generic_associative_lookup 201304"},
{"lineNum":"   81","line":"#endif"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"  // Red-black tree class, designed for use in implementing STL"},
{"lineNum":"   84","line":"  // associative containers (set, multiset, map, and multimap). The"},
{"lineNum":"   85","line":"  // insertion and deletion algorithms are based on those in Cormen,"},
{"lineNum":"   86","line":"  // Leiserson, and Rivest, Introduction to Algorithms (MIT Press,"},
{"lineNum":"   87","line":"  // 1990), except that"},
{"lineNum":"   88","line":"  //"},
{"lineNum":"   89","line":"  // (1) the header cell is maintained with links not only to the root"},
{"lineNum":"   90","line":"  // but also to the leftmost node of the tree, to enable constant"},
{"lineNum":"   91","line":"  // time begin(), and to the rightmost node of the tree, to enable"},
{"lineNum":"   92","line":"  // linear time performance when used with the generic set algorithms"},
{"lineNum":"   93","line":"  // (set_union, etc.)"},
{"lineNum":"   94","line":"  //"},
{"lineNum":"   95","line":"  // (2) when a node being deleted has two children its successor node"},
{"lineNum":"   96","line":"  // is relinked into its place, rather than copied, so that the only"},
{"lineNum":"   97","line":"  // iterators invalidated are those referring to the deleted node."},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"  enum _Rb_tree_color { _S_red = false, _S_black = true };"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"  struct _Rb_tree_node_base"},
{"lineNum":"  102","line":"  {"},
{"lineNum":"  103","line":"    typedef _Rb_tree_node_base* _Base_ptr;"},
{"lineNum":"  104","line":"    typedef const _Rb_tree_node_base* _Const_Base_ptr;"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    _Rb_tree_color\t_M_color;"},
{"lineNum":"  107","line":"    _Base_ptr\t\t_M_parent;"},
{"lineNum":"  108","line":"    _Base_ptr\t\t_M_left;"},
{"lineNum":"  109","line":"    _Base_ptr\t\t_M_right;"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"    static _Base_ptr"},
{"lineNum":"  112","line":"    _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1440","possible_hits":"1",},
{"lineNum":"  113","line":"    {"},
{"lineNum":"  114","line":"      while (__x->_M_left != 0) __x = __x->_M_left;","class":"lineCov","hits":"1","order":"1441","possible_hits":"1",},
{"lineNum":"  115","line":"      return __x;","class":"lineCov","hits":"1","order":"1442","possible_hits":"1",},
{"lineNum":"  116","line":"    }","class":"linePartCov","hits":"1","order":"1443","possible_hits":"2",},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    static _Const_Base_ptr"},
{"lineNum":"  119","line":"    _S_minimum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  120","line":"    {"},
{"lineNum":"  121","line":"      while (__x->_M_left != 0) __x = __x->_M_left;"},
{"lineNum":"  122","line":"      return __x;"},
{"lineNum":"  123","line":"    }"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    static _Base_ptr"},
{"lineNum":"  126","line":"    _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1449","possible_hits":"1",},
{"lineNum":"  127","line":"    {"},
{"lineNum":"  128","line":"      while (__x->_M_right != 0) __x = __x->_M_right;","class":"lineCov","hits":"1","order":"1450","possible_hits":"1",},
{"lineNum":"  129","line":"      return __x;","class":"lineCov","hits":"1","order":"1451","possible_hits":"1",},
{"lineNum":"  130","line":"    }","class":"linePartCov","hits":"1","order":"1452","possible_hits":"2",},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    static _Const_Base_ptr"},
{"lineNum":"  133","line":"    _S_maximum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  134","line":"    {"},
{"lineNum":"  135","line":"      while (__x->_M_right != 0) __x = __x->_M_right;"},
{"lineNum":"  136","line":"      return __x;"},
{"lineNum":"  137","line":"    }"},
{"lineNum":"  138","line":"  };"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"  // Helper type offering value initialization guarantee on the compare functor."},
{"lineNum":"  141","line":"  template<typename _Key_compare>"},
{"lineNum":"  142","line":"    struct _Rb_tree_key_compare"},
{"lineNum":"  143","line":"    {"},
{"lineNum":"  144","line":"      _Key_compare\t\t_M_key_compare;"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"      _Rb_tree_key_compare()","class":"lineCov","hits":"1","order":"738","possible_hits":"1",},
{"lineNum":"  147","line":"      _GLIBCXX_NOEXCEPT_IF("},
{"lineNum":"  148","line":"\tis_nothrow_default_constructible<_Key_compare>::value)"},
{"lineNum":"  149","line":"      : _M_key_compare()"},
{"lineNum":"  150","line":"      { }","class":"linePartCov","hits":"1","order":"739","possible_hits":"2",},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"      _Rb_tree_key_compare(const _Key_compare& __comp)","class":"lineCov","hits":"1","order":"1399","possible_hits":"1",},
{"lineNum":"  153","line":"      : _M_key_compare(__comp)"},
{"lineNum":"  154","line":"      { }","class":"linePartCov","hits":"1","order":"1400","possible_hits":"2",},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  157","line":"      // Copy constructor added for consistency with C++98 mode."},
{"lineNum":"  158","line":"      _Rb_tree_key_compare(const _Rb_tree_key_compare&) = default;"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"      _Rb_tree_key_compare(_Rb_tree_key_compare&& __x)","class":"lineCov","hits":"1","order":"774","possible_hits":"1",},
{"lineNum":"  161","line":"\tnoexcept(is_nothrow_copy_constructible<_Key_compare>::value)"},
{"lineNum":"  162","line":"      : _M_key_compare(__x._M_key_compare)"},
{"lineNum":"  163","line":"      { }","class":"linePartCov","hits":"1","order":"775","possible_hits":"2",},
{"lineNum":"  164","line":"#endif"},
{"lineNum":"  165","line":"    };"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"  // Helper type to manage default initialization of node count and header."},
{"lineNum":"  168","line":"  struct _Rb_tree_header"},
{"lineNum":"  169","line":"  {"},
{"lineNum":"  170","line":"    _Rb_tree_node_base\t_M_header;"},
{"lineNum":"  171","line":"    size_t\t\t_M_node_count; // Keeps track of size of tree."},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    _Rb_tree_header() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"740","possible_hits":"1",},
{"lineNum":"  174","line":"    {"},
{"lineNum":"  175","line":"      _M_header._M_color = _S_red;","class":"lineCov","hits":"1","order":"741","possible_hits":"1",},
{"lineNum":"  176","line":"      _M_reset();","class":"lineCov","hits":"1","order":"742","possible_hits":"1",},
{"lineNum":"  177","line":"    }","class":"linePartCov","hits":"1","order":"749","possible_hits":"2",},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  180","line":"    _Rb_tree_header(_Rb_tree_header&& __x) noexcept","class":"lineCov","hits":"1","order":"776","possible_hits":"1",},
{"lineNum":"  181","line":"    {"},
{"lineNum":"  182","line":"      if (__x._M_header._M_parent != nullptr)","class":"lineCov","hits":"1","order":"777","possible_hits":"1",},
{"lineNum":"  183","line":"\t_M_move_data(__x);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"      else"},
{"lineNum":"  185","line":"\t{"},
{"lineNum":"  186","line":"\t  _M_header._M_color = _S_red;","class":"lineCov","hits":"1","order":"778","possible_hits":"1",},
{"lineNum":"  187","line":"\t  _M_reset();","class":"lineCov","hits":"1","order":"779","possible_hits":"1",},
{"lineNum":"  188","line":"\t}"},
{"lineNum":"  189","line":"    }","class":"linePartCov","hits":"1","order":"780","possible_hits":"3",},
{"lineNum":"  190","line":"#endif"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"    void"},
{"lineNum":"  193","line":"    _M_move_data(_Rb_tree_header& __from)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":"    {"},
{"lineNum":"  195","line":"      _M_header._M_color = __from._M_header._M_color;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  196","line":"      _M_header._M_parent = __from._M_header._M_parent;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  197","line":"      _M_header._M_left = __from._M_header._M_left;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"      _M_header._M_right = __from._M_header._M_right;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"      _M_header._M_parent->_M_parent = &_M_header;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":"      _M_node_count = __from._M_node_count;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"      __from._M_reset();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"    void"},
{"lineNum":"  206","line":"    _M_reset()","class":"lineCov","hits":"1","order":"743","possible_hits":"1",},
{"lineNum":"  207","line":"    {"},
{"lineNum":"  208","line":"      _M_header._M_parent = 0;","class":"lineCov","hits":"1","order":"744","possible_hits":"1",},
{"lineNum":"  209","line":"      _M_header._M_left = &_M_header;","class":"lineCov","hits":"1","order":"745","possible_hits":"1",},
{"lineNum":"  210","line":"      _M_header._M_right = &_M_header;","class":"lineCov","hits":"1","order":"746","possible_hits":"1",},
{"lineNum":"  211","line":"      _M_node_count = 0;","class":"lineCov","hits":"1","order":"747","possible_hits":"1",},
{"lineNum":"  212","line":"    }","class":"linePartCov","hits":"1","order":"748","possible_hits":"2",},
{"lineNum":"  213","line":"  };"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"  template<typename _Val>"},
{"lineNum":"  216","line":"    struct _Rb_tree_node : public _Rb_tree_node_base"},
{"lineNum":"  217","line":"    {"},
{"lineNum":"  218","line":"      typedef _Rb_tree_node<_Val>* _Link_type;"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"#if __cplusplus < 201103L"},
{"lineNum":"  221","line":"      _Val _M_value_field;"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"      _Val*"},
{"lineNum":"  224","line":"      _M_valptr()"},
{"lineNum":"  225","line":"      { return std::__addressof(_M_value_field); }"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"      const _Val*"},
{"lineNum":"  228","line":"      _M_valptr() const"},
{"lineNum":"  229","line":"      { return std::__addressof(_M_value_field); }"},
{"lineNum":"  230","line":"#else"},
{"lineNum":"  231","line":"      __gnu_cxx::__aligned_membuf<_Val> _M_storage;"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"      _Val*"},
{"lineNum":"  234","line":"      _M_valptr()","class":"lineCov","hits":"1","order":"967","possible_hits":"1",},
{"lineNum":"  235","line":"      { return _M_storage._M_ptr(); }","class":"linePartCov","hits":"1","order":"968","possible_hits":"2",},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"      const _Val*"},
{"lineNum":"  238","line":"      _M_valptr() const","class":"lineCov","hits":"1","order":"1147","possible_hits":"1",},
{"lineNum":"  239","line":"      { return _M_storage._M_ptr(); }","class":"linePartCov","hits":"1","order":"1148","possible_hits":"2",},
{"lineNum":"  240","line":"#endif"},
{"lineNum":"  241","line":"    };"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"  _GLIBCXX_PURE _Rb_tree_node_base*"},
{"lineNum":"  244","line":"  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"  _GLIBCXX_PURE const _Rb_tree_node_base*"},
{"lineNum":"  247","line":"  _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"  _GLIBCXX_PURE _Rb_tree_node_base*"},
{"lineNum":"  250","line":"  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"  _GLIBCXX_PURE const _Rb_tree_node_base*"},
{"lineNum":"  253","line":"  _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"  template<typename _Tp>"},
{"lineNum":"  256","line":"    struct _Rb_tree_iterator"},
{"lineNum":"  257","line":"    {"},
{"lineNum":"  258","line":"      typedef _Tp  value_type;"},
{"lineNum":"  259","line":"      typedef _Tp& reference;"},
{"lineNum":"  260","line":"      typedef _Tp* pointer;"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"      typedef bidirectional_iterator_tag iterator_category;"},
{"lineNum":"  263","line":"      typedef ptrdiff_t                  difference_type;"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"      typedef _Rb_tree_iterator<_Tp>        _Self;"},
{"lineNum":"  266","line":"      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;"},
{"lineNum":"  267","line":"      typedef _Rb_tree_node<_Tp>*           _Link_type;"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"      _Rb_tree_iterator() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"894","possible_hits":"1",},
{"lineNum":"  270","line":"      : _M_node() { }","class":"linePartCov","hits":"1","order":"895","possible_hits":"2",},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"      explicit"},
{"lineNum":"  273","line":"      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"901","possible_hits":"1",},
{"lineNum":"  274","line":"      : _M_node(__x) { }","class":"linePartCov","hits":"1","order":"902","possible_hits":"2",},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"      reference"},
{"lineNum":"  277","line":"      operator*() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  278","line":"      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"      pointer"},
{"lineNum":"  281","line":"      operator->() const _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1362","possible_hits":"1",},
{"lineNum":"  282","line":"      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }","class":"linePartCov","hits":"1","order":"1363","possible_hits":"2",},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"      _Self&"},
{"lineNum":"  285","line":"      operator++() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  286","line":"      {"},
{"lineNum":"  287","line":"\t_M_node = _Rb_tree_increment(_M_node);"},
{"lineNum":"  288","line":"\treturn *this;"},
{"lineNum":"  289","line":"      }"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"      _Self"},
{"lineNum":"  292","line":"      operator++(int) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  293","line":"      {"},
{"lineNum":"  294","line":"\t_Self __tmp = *this;"},
{"lineNum":"  295","line":"\t_M_node = _Rb_tree_increment(_M_node);"},
{"lineNum":"  296","line":"\treturn __tmp;"},
{"lineNum":"  297","line":"      }"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"      _Self&"},
{"lineNum":"  300","line":"      operator--() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1295","possible_hits":"1",},
{"lineNum":"  301","line":"      {"},
{"lineNum":"  302","line":"\t_M_node = _Rb_tree_decrement(_M_node);","class":"lineCov","hits":"1","order":"1296","possible_hits":"1",},
{"lineNum":"  303","line":"\treturn *this;","class":"lineCov","hits":"1","order":"1297","possible_hits":"1",},
{"lineNum":"  304","line":"      }","class":"linePartCov","hits":"1","order":"1298","possible_hits":"2",},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"      _Self"},
{"lineNum":"  307","line":"      operator--(int) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  308","line":"      {"},
{"lineNum":"  309","line":"\t_Self __tmp = *this;"},
{"lineNum":"  310","line":"\t_M_node = _Rb_tree_decrement(_M_node);"},
{"lineNum":"  311","line":"\treturn __tmp;"},
{"lineNum":"  312","line":"      }"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"      bool"},
{"lineNum":"  315","line":"      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"915","possible_hits":"1",},
{"lineNum":"  316","line":"      { return _M_node == __x._M_node; }","class":"linePartCov","hits":"1","order":"916","possible_hits":"2",},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"      bool"},
{"lineNum":"  319","line":"      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  320","line":"      { return _M_node != __x._M_node; }"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"      _Base_ptr _M_node;"},
{"lineNum":"  323","line":"  };"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"  template<typename _Tp>"},
{"lineNum":"  326","line":"    struct _Rb_tree_const_iterator"},
{"lineNum":"  327","line":"    {"},
{"lineNum":"  328","line":"      typedef _Tp        value_type;"},
{"lineNum":"  329","line":"      typedef const _Tp& reference;"},
{"lineNum":"  330","line":"      typedef const _Tp* pointer;"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"      typedef _Rb_tree_iterator<_Tp> iterator;"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"      typedef bidirectional_iterator_tag iterator_category;"},
{"lineNum":"  335","line":"      typedef ptrdiff_t                  difference_type;"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"      typedef _Rb_tree_const_iterator<_Tp>        _Self;"},
{"lineNum":"  338","line":"      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;"},
{"lineNum":"  339","line":"      typedef const _Rb_tree_node<_Tp>*           _Link_type;"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"      _Rb_tree_const_iterator() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  342","line":"      : _M_node() { }"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"      explicit"},
{"lineNum":"  345","line":"      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  346","line":"      : _M_node(__x) { }"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  349","line":"      : _M_node(__it._M_node) { }"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"      iterator"},
{"lineNum":"  352","line":"      _M_const_cast() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  353","line":"      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"      reference"},
{"lineNum":"  356","line":"      operator*() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  357","line":"      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"      pointer"},
{"lineNum":"  360","line":"      operator->() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  361","line":"      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"      _Self&"},
{"lineNum":"  364","line":"      operator++() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  365","line":"      {"},
{"lineNum":"  366","line":"\t_M_node = _Rb_tree_increment(_M_node);"},
{"lineNum":"  367","line":"\treturn *this;"},
{"lineNum":"  368","line":"      }"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"      _Self"},
{"lineNum":"  371","line":"      operator++(int) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  372","line":"      {"},
{"lineNum":"  373","line":"\t_Self __tmp = *this;"},
{"lineNum":"  374","line":"\t_M_node = _Rb_tree_increment(_M_node);"},
{"lineNum":"  375","line":"\treturn __tmp;"},
{"lineNum":"  376","line":"      }"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"      _Self&"},
{"lineNum":"  379","line":"      operator--() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  380","line":"      {"},
{"lineNum":"  381","line":"\t_M_node = _Rb_tree_decrement(_M_node);"},
{"lineNum":"  382","line":"\treturn *this;"},
{"lineNum":"  383","line":"      }"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"      _Self"},
{"lineNum":"  386","line":"      operator--(int) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  387","line":"      {"},
{"lineNum":"  388","line":"\t_Self __tmp = *this;"},
{"lineNum":"  389","line":"\t_M_node = _Rb_tree_decrement(_M_node);"},
{"lineNum":"  390","line":"\treturn __tmp;"},
{"lineNum":"  391","line":"      }"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"      bool"},
{"lineNum":"  394","line":"      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  395","line":"      { return _M_node == __x._M_node; }"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"      bool"},
{"lineNum":"  398","line":"      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  399","line":"      { return _M_node != __x._M_node; }"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"      _Base_ptr _M_node;"},
{"lineNum":"  402","line":"    };"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"  template<typename _Val>"},
{"lineNum":"  405","line":"    inline bool"},
{"lineNum":"  406","line":"    operator==(const _Rb_tree_iterator<_Val>& __x,"},
{"lineNum":"  407","line":"               const _Rb_tree_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  408","line":"    { return __x._M_node == __y._M_node; }"},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"  template<typename _Val>"},
{"lineNum":"  411","line":"    inline bool"},
{"lineNum":"  412","line":"    operator!=(const _Rb_tree_iterator<_Val>& __x,"},
{"lineNum":"  413","line":"               const _Rb_tree_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  414","line":"    { return __x._M_node != __y._M_node; }"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"  void"},
{"lineNum":"  417","line":"  _Rb_tree_insert_and_rebalance(const bool __insert_left,"},
{"lineNum":"  418","line":"                                _Rb_tree_node_base* __x,"},
{"lineNum":"  419","line":"                                _Rb_tree_node_base* __p,"},
{"lineNum":"  420","line":"                                _Rb_tree_node_base& __header) throw ();"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"  _Rb_tree_node_base*"},
{"lineNum":"  423","line":"  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,"},
{"lineNum":"  424","line":"\t\t\t       _Rb_tree_node_base& __header) throw ();"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"#if __cplusplus > 201103L"},
{"lineNum":"  427","line":"  template<typename _Cmp, typename _SfinaeType, typename = __void_t<>>"},
{"lineNum":"  428","line":"    struct __has_is_transparent"},
{"lineNum":"  429","line":"    { };"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"  template<typename _Cmp, typename _SfinaeType>"},
{"lineNum":"  432","line":"    struct __has_is_transparent<_Cmp, _SfinaeType,"},
{"lineNum":"  433","line":"\t\t\t\t__void_t<typename _Cmp::is_transparent>>"},
{"lineNum":"  434","line":"    { typedef void type; };"},
{"lineNum":"  435","line":"#endif"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"#if __cplusplus > 201402L"},
{"lineNum":"  438","line":"  template<typename _Tree1, typename _Cmp2>"},
{"lineNum":"  439","line":"    struct _Rb_tree_merge_helper { };"},
{"lineNum":"  440","line":"#endif"},
{"lineNum":"  441","line":""},
{"lineNum":"  442","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":"  443","line":"           typename _Compare, typename _Alloc = allocator<_Val> >"},
{"lineNum":"  444","line":"    class _Rb_tree"},
{"lineNum":"  445","line":"    {"},
{"lineNum":"  446","line":"      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template"},
{"lineNum":"  447","line":"        rebind<_Rb_tree_node<_Val> >::other _Node_allocator;"},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"      typedef __gnu_cxx::__alloc_traits<_Node_allocator> _Alloc_traits;"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"    protected:"},
{"lineNum":"  452","line":"      typedef _Rb_tree_node_base* \t\t_Base_ptr;"},
{"lineNum":"  453","line":"      typedef const _Rb_tree_node_base* \t_Const_Base_ptr;"},
{"lineNum":"  454","line":"      typedef _Rb_tree_node<_Val>* \t\t_Link_type;"},
{"lineNum":"  455","line":"      typedef const _Rb_tree_node<_Val>*\t_Const_Link_type;"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"    private:"},
{"lineNum":"  458","line":"      // Functor recycling a pool of nodes and using allocation once the pool"},
{"lineNum":"  459","line":"      // is empty."},
{"lineNum":"  460","line":"      struct _Reuse_or_alloc_node"},
{"lineNum":"  461","line":"      {"},
{"lineNum":"  462","line":"\t_Reuse_or_alloc_node(_Rb_tree& __t)"},
{"lineNum":"  463","line":"\t  : _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)"},
{"lineNum":"  464","line":"\t{"},
{"lineNum":"  465","line":"\t  if (_M_root)"},
{"lineNum":"  466","line":"\t    {"},
{"lineNum":"  467","line":"\t      _M_root->_M_parent = 0;"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"\t      if (_M_nodes->_M_left)"},
{"lineNum":"  470","line":"\t\t_M_nodes = _M_nodes->_M_left;"},
{"lineNum":"  471","line":"\t    }"},
{"lineNum":"  472","line":"\t  else"},
{"lineNum":"  473","line":"\t    _M_nodes = 0;"},
{"lineNum":"  474","line":"\t}"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  477","line":"\t_Reuse_or_alloc_node(const _Reuse_or_alloc_node&) = delete;"},
{"lineNum":"  478","line":"#endif"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"\t~_Reuse_or_alloc_node()"},
{"lineNum":"  481","line":"\t{ _M_t._M_erase(static_cast<_Link_type>(_M_root)); }"},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"\ttemplate<typename _Arg>"},
{"lineNum":"  484","line":"\t  _Link_type"},
{"lineNum":"  485","line":"#if __cplusplus < 201103L"},
{"lineNum":"  486","line":"\t  operator()(const _Arg& __arg)"},
{"lineNum":"  487","line":"#else"},
{"lineNum":"  488","line":"\t  operator()(_Arg&& __arg)"},
{"lineNum":"  489","line":"#endif"},
{"lineNum":"  490","line":"\t  {"},
{"lineNum":"  491","line":"\t    _Link_type __node = static_cast<_Link_type>(_M_extract());"},
{"lineNum":"  492","line":"\t    if (__node)"},
{"lineNum":"  493","line":"\t      {"},
{"lineNum":"  494","line":"\t\t_M_t._M_destroy_node(__node);"},
{"lineNum":"  495","line":"\t\t_M_t._M_construct_node(__node, _GLIBCXX_FORWARD(_Arg, __arg));"},
{"lineNum":"  496","line":"\t\treturn __node;"},
{"lineNum":"  497","line":"\t      }"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"\t    return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg));"},
{"lineNum":"  500","line":"\t  }"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"      private:"},
{"lineNum":"  503","line":"\t_Base_ptr"},
{"lineNum":"  504","line":"\t_M_extract()"},
{"lineNum":"  505","line":"\t{"},
{"lineNum":"  506","line":"\t  if (!_M_nodes)"},
{"lineNum":"  507","line":"\t    return _M_nodes;"},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"\t  _Base_ptr __node = _M_nodes;"},
{"lineNum":"  510","line":"\t  _M_nodes = _M_nodes->_M_parent;"},
{"lineNum":"  511","line":"\t  if (_M_nodes)"},
{"lineNum":"  512","line":"\t    {"},
{"lineNum":"  513","line":"\t      if (_M_nodes->_M_right == __node)"},
{"lineNum":"  514","line":"\t\t{"},
{"lineNum":"  515","line":"\t\t  _M_nodes->_M_right = 0;"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"\t\t  if (_M_nodes->_M_left)"},
{"lineNum":"  518","line":"\t\t    {"},
{"lineNum":"  519","line":"\t\t      _M_nodes = _M_nodes->_M_left;"},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"\t\t      while (_M_nodes->_M_right)"},
{"lineNum":"  522","line":"\t\t\t_M_nodes = _M_nodes->_M_right;"},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"\t\t      if (_M_nodes->_M_left)"},
{"lineNum":"  525","line":"\t\t\t_M_nodes = _M_nodes->_M_left;"},
{"lineNum":"  526","line":"\t\t    }"},
{"lineNum":"  527","line":"\t\t}"},
{"lineNum":"  528","line":"\t      else // __node is on the left."},
{"lineNum":"  529","line":"\t\t_M_nodes->_M_left = 0;"},
{"lineNum":"  530","line":"\t    }"},
{"lineNum":"  531","line":"\t  else"},
{"lineNum":"  532","line":"\t    _M_root = 0;"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"\t  return __node;"},
{"lineNum":"  535","line":"\t}"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"\t_Base_ptr _M_root;"},
{"lineNum":"  538","line":"\t_Base_ptr _M_nodes;"},
{"lineNum":"  539","line":"\t_Rb_tree& _M_t;"},
{"lineNum":"  540","line":"      };"},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"      // Functor similar to the previous one but without any pool of nodes to"},
{"lineNum":"  543","line":"      // recycle."},
{"lineNum":"  544","line":"      struct _Alloc_node"},
{"lineNum":"  545","line":"      {"},
{"lineNum":"  546","line":"\t_Alloc_node(_Rb_tree& __t)","class":"lineCov","hits":"1","order":"947","possible_hits":"1",},
{"lineNum":"  547","line":"\t  : _M_t(__t) { }","class":"linePartCov","hits":"1","order":"948","possible_hits":"2",},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"\ttemplate<typename _Arg>"},
{"lineNum":"  550","line":"\t  _Link_type"},
{"lineNum":"  551","line":"#if __cplusplus < 201103L"},
{"lineNum":"  552","line":"\t  operator()(const _Arg& __arg) const"},
{"lineNum":"  553","line":"#else"},
{"lineNum":"  554","line":"\t  operator()(_Arg&& __arg) const","class":"lineCov","hits":"2","order":"955","possible_hits":"2",},
{"lineNum":"  555","line":"#endif"},
{"lineNum":"  556","line":"\t  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }","class":"linePartCov","hits":"2","order":"956","possible_hits":"4",},
{"lineNum":"  557","line":""},
{"lineNum":"  558","line":"      private:"},
{"lineNum":"  559","line":"\t_Rb_tree& _M_t;"},
{"lineNum":"  560","line":"      };"},
{"lineNum":"  561","line":""},
{"lineNum":"  562","line":"    public:"},
{"lineNum":"  563","line":"      typedef _Key \t\t\t\tkey_type;"},
{"lineNum":"  564","line":"      typedef _Val \t\t\t\tvalue_type;"},
{"lineNum":"  565","line":"      typedef value_type* \t\t\tpointer;"},
{"lineNum":"  566","line":"      typedef const value_type* \t\tconst_pointer;"},
{"lineNum":"  567","line":"      typedef value_type& \t\t\treference;"},
{"lineNum":"  568","line":"      typedef const value_type& \t\tconst_reference;"},
{"lineNum":"  569","line":"      typedef size_t \t\t\t\tsize_type;"},
{"lineNum":"  570","line":"      typedef ptrdiff_t \t\t\tdifference_type;"},
{"lineNum":"  571","line":"      typedef _Alloc \t\t\t\tallocator_type;"},
{"lineNum":"  572","line":""},
{"lineNum":"  573","line":"      _Node_allocator&"},
{"lineNum":"  574","line":"      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"961","possible_hits":"1",},
{"lineNum":"  575","line":"      { return *static_cast<_Node_allocator*>(&this->_M_impl); }","class":"linePartCov","hits":"1","order":"962","possible_hits":"2",},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"      const _Node_allocator&"},
{"lineNum":"  578","line":"      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  579","line":"      { return *static_cast<const _Node_allocator*>(&this->_M_impl); }"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"      allocator_type"},
{"lineNum":"  582","line":"      get_allocator() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  583","line":"      { return allocator_type(_M_get_Node_allocator()); }"},
{"lineNum":"  584","line":""},
{"lineNum":"  585","line":"    protected:"},
{"lineNum":"  586","line":"      _Link_type"},
{"lineNum":"  587","line":"      _M_get_node()","class":"lineCov","hits":"1","order":"959","possible_hits":"1",},
{"lineNum":"  588","line":"      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }","class":"linePartCov","hits":"1","order":"960","possible_hits":"2",},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"      void"},
{"lineNum":"  591","line":"      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1475","possible_hits":"1",},
{"lineNum":"  592","line":"      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }","class":"linePartCov","hits":"1","order":"1476","possible_hits":"2",},
{"lineNum":"  593","line":""},
{"lineNum":"  594","line":"#if __cplusplus < 201103L"},
{"lineNum":"  595","line":"      void"},
{"lineNum":"  596","line":"      _M_construct_node(_Link_type __node, const value_type& __x)"},
{"lineNum":"  597","line":"      {"},
{"lineNum":"  598","line":"\t__try"},
{"lineNum":"  599","line":"\t  { get_allocator().construct(__node->_M_valptr(), __x); }"},
{"lineNum":"  600","line":"\t__catch(...)"},
{"lineNum":"  601","line":"\t  {"},
{"lineNum":"  602","line":"\t    _M_put_node(__node);"},
{"lineNum":"  603","line":"\t    __throw_exception_again;"},
{"lineNum":"  604","line":"\t  }"},
{"lineNum":"  605","line":"      }"},
{"lineNum":"  606","line":""},
{"lineNum":"  607","line":"      _Link_type"},
{"lineNum":"  608","line":"      _M_create_node(const value_type& __x)"},
{"lineNum":"  609","line":"      {"},
{"lineNum":"  610","line":"\t_Link_type __tmp = _M_get_node();"},
{"lineNum":"  611","line":"\t_M_construct_node(__tmp, __x);"},
{"lineNum":"  612","line":"\treturn __tmp;"},
{"lineNum":"  613","line":"      }"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"      void"},
{"lineNum":"  616","line":"      _M_destroy_node(_Link_type __p)"},
{"lineNum":"  617","line":"      { get_allocator().destroy(__p->_M_valptr()); }"},
{"lineNum":"  618","line":"#else"},
{"lineNum":"  619","line":"      template<typename... _Args>"},
{"lineNum":"  620","line":"\tvoid"},
{"lineNum":"  621","line":"\t_M_construct_node(_Link_type __node, _Args&&... __args)","class":"lineCov","hits":"2","order":"964","possible_hits":"2",},
{"lineNum":"  622","line":"\t{"},
{"lineNum":"  623","line":"\t  __try"},
{"lineNum":"  624","line":"\t    {"},
{"lineNum":"  625","line":"\t      ::new(__node) _Rb_tree_node<_Val>;","class":"lineCov","hits":"2","order":"965","possible_hits":"2",},
{"lineNum":"  626","line":"\t      _Alloc_traits::construct(_M_get_Node_allocator(),","class":"lineCov","hits":"2","order":"966","possible_hits":"2",},
{"lineNum":"  627","line":"\t\t\t\t       __node->_M_valptr(),"},
{"lineNum":"  628","line":"\t\t\t\t       std::forward<_Args>(__args)...);"},
{"lineNum":"  629","line":"\t    }"},
{"lineNum":"  630","line":"\t  __catch(...)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  631","line":"\t    {"},
{"lineNum":"  632","line":"\t      __node->~_Rb_tree_node<_Val>();"},
{"lineNum":"  633","line":"\t      _M_put_node(__node);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  634","line":"\t      __throw_exception_again;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  635","line":"\t    }"},
{"lineNum":"  636","line":"\t}","class":"linePartCov","hits":"4","order":"971","possible_hits":"6",},
{"lineNum":"  637","line":""},
{"lineNum":"  638","line":"      template<typename... _Args>"},
{"lineNum":"  639","line":"        _Link_type"},
{"lineNum":"  640","line":"        _M_create_node(_Args&&... __args)","class":"lineCov","hits":"2","order":"957","possible_hits":"2",},
{"lineNum":"  641","line":"\t{"},
{"lineNum":"  642","line":"\t  _Link_type __tmp = _M_get_node();","class":"lineCov","hits":"2","order":"958","possible_hits":"2",},
{"lineNum":"  643","line":"\t  _M_construct_node(__tmp, std::forward<_Args>(__args)...);","class":"lineCov","hits":"2","order":"963","possible_hits":"2",},
{"lineNum":"  644","line":"\t  return __tmp;","class":"lineCov","hits":"2","order":"972","possible_hits":"2",},
{"lineNum":"  645","line":"\t}","class":"linePartCov","hits":"2","order":"973","possible_hits":"4",},
{"lineNum":"  646","line":""},
{"lineNum":"  647","line":"      void"},
{"lineNum":"  648","line":"      _M_destroy_node(_Link_type __p) noexcept","class":"lineCov","hits":"1","order":"1471","possible_hits":"1",},
{"lineNum":"  649","line":"      {"},
{"lineNum":"  650","line":"\t_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());","class":"lineCov","hits":"1","order":"1472","possible_hits":"1",},
{"lineNum":"  651","line":"\t__p->~_Rb_tree_node<_Val>();"},
{"lineNum":"  652","line":"      }","class":"linePartCov","hits":"1","order":"1473","possible_hits":"2",},
{"lineNum":"  653","line":"#endif"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"      void"},
{"lineNum":"  656","line":"      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1469","possible_hits":"1",},
{"lineNum":"  657","line":"      {"},
{"lineNum":"  658","line":"\t_M_destroy_node(__p);","class":"lineCov","hits":"1","order":"1470","possible_hits":"1",},
{"lineNum":"  659","line":"\t_M_put_node(__p);","class":"lineCov","hits":"1","order":"1474","possible_hits":"1",},
{"lineNum":"  660","line":"      }","class":"linePartCov","hits":"1","order":"1477","possible_hits":"2",},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"      template<typename _NodeGen>"},
{"lineNum":"  663","line":"\t_Link_type"},
{"lineNum":"  664","line":"\t_M_clone_node(_Const_Link_type __x, _NodeGen& __node_gen)","class":"lineCov","hits":"1","order":"1418","possible_hits":"1",},
{"lineNum":"  665","line":"\t{"},
{"lineNum":"  666","line":"\t  _Link_type __tmp = __node_gen(*__x->_M_valptr());","class":"lineCov","hits":"1","order":"1419","possible_hits":"1",},
{"lineNum":"  667","line":"\t  __tmp->_M_color = __x->_M_color;","class":"lineCov","hits":"1","order":"1421","possible_hits":"1",},
{"lineNum":"  668","line":"\t  __tmp->_M_left = 0;","class":"lineCov","hits":"1","order":"1422","possible_hits":"1",},
{"lineNum":"  669","line":"\t  __tmp->_M_right = 0;","class":"lineCov","hits":"1","order":"1423","possible_hits":"1",},
{"lineNum":"  670","line":"\t  return __tmp;","class":"lineCov","hits":"1","order":"1424","possible_hits":"1",},
{"lineNum":"  671","line":"\t}","class":"linePartCov","hits":"1","order":"1425","possible_hits":"2",},
{"lineNum":"  672","line":""},
{"lineNum":"  673","line":"    protected:"},
{"lineNum":"  674","line":"      // Unused _Is_pod_comparator is kept as it is part of mangled name."},
{"lineNum":"  675","line":"      template<typename _Key_compare,"},
{"lineNum":"  676","line":"\t       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>"},
{"lineNum":"  677","line":"        struct _Rb_tree_impl","class":"linePartCov","hits":"2","order":"791","possible_hits":"3",},
{"lineNum":"  678","line":"\t: public _Node_allocator"},
{"lineNum":"  679","line":"\t, public _Rb_tree_key_compare<_Key_compare>"},
{"lineNum":"  680","line":"\t, public _Rb_tree_header"},
{"lineNum":"  681","line":"        {"},
{"lineNum":"  682","line":"\t  typedef _Rb_tree_key_compare<_Key_compare> _Base_key_compare;"},
{"lineNum":"  683","line":""},
{"lineNum":"  684","line":"#if __cplusplus < 201103L"},
{"lineNum":"  685","line":"\t  _Rb_tree_impl()"},
{"lineNum":"  686","line":"\t  { }"},
{"lineNum":"  687","line":"#else"},
{"lineNum":"  688","line":"\t  _Rb_tree_impl() = default;","class":"linePartCov","hits":"2","order":"737","possible_hits":"3",},
{"lineNum":"  689","line":"\t  _Rb_tree_impl(_Rb_tree_impl&&) = default;","class":"linePartCov","hits":"2","order":"770","possible_hits":"3",},
{"lineNum":"  690","line":"#endif"},
{"lineNum":"  691","line":""},
{"lineNum":"  692","line":"\t  _Rb_tree_impl(const _Rb_tree_impl& __x)","class":"lineCov","hits":"2","order":"1393","possible_hits":"2",},
{"lineNum":"  693","line":"\t  : _Node_allocator(_Alloc_traits::_S_select_on_copy(__x))"},
{"lineNum":"  694","line":"\t  , _Base_key_compare(__x._M_key_compare)","class":"lineCov","hits":"1","order":"1394","possible_hits":"1",},
{"lineNum":"  695","line":"\t  { }","class":"linePartCov","hits":"1","order":"1401","possible_hits":"2",},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"#if __cplusplus < 201103L"},
{"lineNum":"  698","line":"\t  _Rb_tree_impl(const _Key_compare& __comp, const _Node_allocator& __a)"},
{"lineNum":"  699","line":"\t  : _Node_allocator(__a), _Base_key_compare(__comp)"},
{"lineNum":"  700","line":"\t  { }"},
{"lineNum":"  701","line":"#else"},
{"lineNum":"  702","line":"\t  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)"},
{"lineNum":"  703","line":"\t  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)"},
{"lineNum":"  704","line":"\t  { }"},
{"lineNum":"  705","line":"#endif"},
{"lineNum":"  706","line":"\t};"},
{"lineNum":"  707","line":""},
{"lineNum":"  708","line":"      _Rb_tree_impl<_Compare> _M_impl;"},
{"lineNum":"  709","line":""},
{"lineNum":"  710","line":"    protected:"},
{"lineNum":"  711","line":"      _Base_ptr&"},
{"lineNum":"  712","line":"      _M_root() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1406","possible_hits":"1",},
{"lineNum":"  713","line":"      { return this->_M_impl._M_header._M_parent; }","class":"linePartCov","hits":"1","order":"1407","possible_hits":"2",},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"      _Const_Base_ptr"},
{"lineNum":"  716","line":"      _M_root() const _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1403","possible_hits":"1",},
{"lineNum":"  717","line":"      { return this->_M_impl._M_header._M_parent; }","class":"linePartCov","hits":"1","order":"1404","possible_hits":"2",},
{"lineNum":"  718","line":""},
{"lineNum":"  719","line":"      _Base_ptr&"},
{"lineNum":"  720","line":"      _M_leftmost() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1436","possible_hits":"1",},
{"lineNum":"  721","line":"      { return this->_M_impl._M_header._M_left; }","class":"linePartCov","hits":"1","order":"1437","possible_hits":"2",},
{"lineNum":"  722","line":""},
{"lineNum":"  723","line":"      _Const_Base_ptr"},
{"lineNum":"  724","line":"      _M_leftmost() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  725","line":"      { return this->_M_impl._M_header._M_left; }"},
{"lineNum":"  726","line":""},
{"lineNum":"  727","line":"      _Base_ptr&"},
{"lineNum":"  728","line":"      _M_rightmost() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1445","possible_hits":"1",},
{"lineNum":"  729","line":"      { return this->_M_impl._M_header._M_right; }","class":"linePartCov","hits":"1","order":"1446","possible_hits":"2",},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"      _Const_Base_ptr"},
{"lineNum":"  732","line":"      _M_rightmost() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  733","line":"      { return this->_M_impl._M_header._M_right; }"},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"      _Link_type"},
{"lineNum":"  736","line":"      _M_begin() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"786","possible_hits":"1",},
{"lineNum":"  737","line":"      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }","class":"linePartCov","hits":"1","order":"787","possible_hits":"2",},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"      _Const_Link_type"},
{"lineNum":"  740","line":"      _M_begin() const _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1413","possible_hits":"1",},
{"lineNum":"  741","line":"      {"},
{"lineNum":"  742","line":"\treturn static_cast<_Const_Link_type>"},
{"lineNum":"  743","line":"\t  (this->_M_impl._M_header._M_parent);","class":"lineCov","hits":"1","order":"1414","possible_hits":"1",},
{"lineNum":"  744","line":"      }","class":"linePartCov","hits":"1","order":"1415","possible_hits":"2",},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"      _Base_ptr"},
{"lineNum":"  747","line":"      _M_end() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"908","possible_hits":"1",},
{"lineNum":"  748","line":"      { return &this->_M_impl._M_header; }","class":"linePartCov","hits":"1","order":"909","possible_hits":"2",},
{"lineNum":"  749","line":""},
{"lineNum":"  750","line":"      _Const_Base_ptr"},
{"lineNum":"  751","line":"      _M_end() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  752","line":"      { return &this->_M_impl._M_header; }"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"      static const_reference"},
{"lineNum":"  755","line":"      _S_value(_Const_Link_type __x)","class":"lineCov","hits":"1","order":"1145","possible_hits":"1",},
{"lineNum":"  756","line":"      { return *__x->_M_valptr(); }","class":"linePartCov","hits":"1","order":"1146","possible_hits":"2",},
{"lineNum":"  757","line":""},
{"lineNum":"  758","line":"      static const _Key&"},
{"lineNum":"  759","line":"      _S_key(_Const_Link_type __x)","class":"lineCov","hits":"2","order":"1143","possible_hits":"2",},
{"lineNum":"  760","line":"      { return _KeyOfValue()(_S_value(__x)); }","class":"linePartCov","hits":"1","order":"1144","possible_hits":"2",},
{"lineNum":"  761","line":""},
{"lineNum":"  762","line":"      static _Link_type"},
{"lineNum":"  763","line":"      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1291","possible_hits":"1",},
{"lineNum":"  764","line":"      { return static_cast<_Link_type>(__x->_M_left); }","class":"linePartCov","hits":"1","order":"1292","possible_hits":"2",},
{"lineNum":"  765","line":""},
{"lineNum":"  766","line":"      static _Const_Link_type"},
{"lineNum":"  767","line":"      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1430","possible_hits":"1",},
{"lineNum":"  768","line":"      { return static_cast<_Const_Link_type>(__x->_M_left); }","class":"linePartCov","hits":"1","order":"1431","possible_hits":"2",},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"      static _Link_type"},
{"lineNum":"  771","line":"      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1187","possible_hits":"1",},
{"lineNum":"  772","line":"      { return static_cast<_Link_type>(__x->_M_right); }","class":"linePartCov","hits":"1","order":"1188","possible_hits":"2",},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"      static _Const_Link_type"},
{"lineNum":"  775","line":"      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1483","possible_hits":"1",},
{"lineNum":"  776","line":"      { return static_cast<_Const_Link_type>(__x->_M_right); }","class":"linePartCov","hits":"1","order":"1484","possible_hits":"2",},
{"lineNum":"  777","line":""},
{"lineNum":"  778","line":"      static const_reference"},
{"lineNum":"  779","line":"      _S_value(_Const_Base_ptr __x)","class":"lineCov","hits":"1","order":"1195","possible_hits":"1",},
{"lineNum":"  780","line":"      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }","class":"linePartCov","hits":"1","order":"1196","possible_hits":"2",},
{"lineNum":"  781","line":""},
{"lineNum":"  782","line":"      static const _Key&"},
{"lineNum":"  783","line":"      _S_key(_Const_Base_ptr __x)","class":"lineCov","hits":"2","order":"1193","possible_hits":"2",},
{"lineNum":"  784","line":"      { return _KeyOfValue()(_S_value(__x)); }","class":"linePartCov","hits":"1","order":"1194","possible_hits":"2",},
{"lineNum":"  785","line":""},
{"lineNum":"  786","line":"      static _Base_ptr"},
{"lineNum":"  787","line":"      _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1438","possible_hits":"1",},
{"lineNum":"  788","line":"      { return _Rb_tree_node_base::_S_minimum(__x); }","class":"linePartCov","hits":"1","order":"1439","possible_hits":"2",},
{"lineNum":"  789","line":""},
{"lineNum":"  790","line":"      static _Const_Base_ptr"},
{"lineNum":"  791","line":"      _S_minimum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  792","line":"      { return _Rb_tree_node_base::_S_minimum(__x); }"},
{"lineNum":"  793","line":""},
{"lineNum":"  794","line":"      static _Base_ptr"},
{"lineNum":"  795","line":"      _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1447","possible_hits":"1",},
{"lineNum":"  796","line":"      { return _Rb_tree_node_base::_S_maximum(__x); }","class":"linePartCov","hits":"1","order":"1448","possible_hits":"2",},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"      static _Const_Base_ptr"},
{"lineNum":"  799","line":"      _S_maximum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  800","line":"      { return _Rb_tree_node_base::_S_maximum(__x); }"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"    public:"},
{"lineNum":"  803","line":"      typedef _Rb_tree_iterator<value_type>       iterator;"},
{"lineNum":"  804","line":"      typedef _Rb_tree_const_iterator<value_type> const_iterator;"},
{"lineNum":"  805","line":""},
{"lineNum":"  806","line":"      typedef std::reverse_iterator<iterator>       reverse_iterator;"},
{"lineNum":"  807","line":"      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;"},
{"lineNum":"  808","line":""},
{"lineNum":"  809","line":"#if __cplusplus > 201402L"},
{"lineNum":"  810","line":"      using node_type = _Node_handle<_Key, _Val, _Node_allocator>;"},
{"lineNum":"  811","line":"      using insert_return_type = _Node_insert_return<"},
{"lineNum":"  812","line":"\tconditional_t<is_same_v<_Key, _Val>, const_iterator, iterator>,"},
{"lineNum":"  813","line":"\tnode_type>;"},
{"lineNum":"  814","line":"#endif"},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"      pair<_Base_ptr, _Base_ptr>"},
{"lineNum":"  817","line":"      _M_get_insert_unique_pos(const key_type& __k);"},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"      pair<_Base_ptr, _Base_ptr>"},
{"lineNum":"  820","line":"      _M_get_insert_equal_pos(const key_type& __k);"},
{"lineNum":"  821","line":""},
{"lineNum":"  822","line":"      pair<_Base_ptr, _Base_ptr>"},
{"lineNum":"  823","line":"      _M_get_insert_hint_unique_pos(const_iterator __pos,"},
{"lineNum":"  824","line":"\t\t\t\t    const key_type& __k);"},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"      pair<_Base_ptr, _Base_ptr>"},
{"lineNum":"  827","line":"      _M_get_insert_hint_equal_pos(const_iterator __pos,"},
{"lineNum":"  828","line":"\t\t\t\t   const key_type& __k);"},
{"lineNum":"  829","line":""},
{"lineNum":"  830","line":"    private:"},
{"lineNum":"  831","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  832","line":"      template<typename _Arg, typename _NodeGen>"},
{"lineNum":"  833","line":"        iterator"},
{"lineNum":"  834","line":"\t_M_insert_(_Base_ptr __x, _Base_ptr __y, _Arg&& __v, _NodeGen&);"},
{"lineNum":"  835","line":""},
{"lineNum":"  836","line":"      iterator"},
{"lineNum":"  837","line":"      _M_insert_node(_Base_ptr __x, _Base_ptr __y, _Link_type __z);"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"      template<typename _Arg>"},
{"lineNum":"  840","line":"        iterator"},
{"lineNum":"  841","line":"        _M_insert_lower(_Base_ptr __y, _Arg&& __v);"},
{"lineNum":"  842","line":""},
{"lineNum":"  843","line":"      template<typename _Arg>"},
{"lineNum":"  844","line":"        iterator"},
{"lineNum":"  845","line":"        _M_insert_equal_lower(_Arg&& __x);"},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":"      iterator"},
{"lineNum":"  848","line":"      _M_insert_lower_node(_Base_ptr __p, _Link_type __z);"},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"      iterator"},
{"lineNum":"  851","line":"      _M_insert_equal_lower_node(_Link_type __z);"},
{"lineNum":"  852","line":"#else"},
{"lineNum":"  853","line":"      template<typename _NodeGen>"},
{"lineNum":"  854","line":"\titerator"},
{"lineNum":"  855","line":"\t_M_insert_(_Base_ptr __x, _Base_ptr __y,"},
{"lineNum":"  856","line":"\t\t   const value_type& __v, _NodeGen&);"},
{"lineNum":"  857","line":""},
{"lineNum":"  858","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  859","line":"      // 233. Insertion hints in associative containers."},
{"lineNum":"  860","line":"      iterator"},
{"lineNum":"  861","line":"      _M_insert_lower(_Base_ptr __y, const value_type& __v);"},
{"lineNum":"  862","line":""},
{"lineNum":"  863","line":"      iterator"},
{"lineNum":"  864","line":"      _M_insert_equal_lower(const value_type& __x);"},
{"lineNum":"  865","line":"#endif"},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"      template<typename _NodeGen>"},
{"lineNum":"  868","line":"\t_Link_type"},
{"lineNum":"  869","line":"\t_M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen&);"},
{"lineNum":"  870","line":""},
{"lineNum":"  871","line":"      template<typename _NodeGen>"},
{"lineNum":"  872","line":"\t_Link_type"},
{"lineNum":"  873","line":"\t_M_copy(const _Rb_tree& __x, _NodeGen& __gen)","class":"lineCov","hits":"1","order":"1411","possible_hits":"1",},
{"lineNum":"  874","line":"\t{"},
{"lineNum":"  875","line":"\t  _Link_type __root = _M_copy(__x._M_begin(), _M_end(), __gen);","class":"lineCov","hits":"1","order":"1412","possible_hits":"1",},
{"lineNum":"  876","line":"\t  _M_leftmost() = _S_minimum(__root);","class":"lineCov","hits":"1","order":"1435","possible_hits":"1",},
{"lineNum":"  877","line":"\t  _M_rightmost() = _S_maximum(__root);","class":"lineCov","hits":"1","order":"1444","possible_hits":"1",},
{"lineNum":"  878","line":"\t  _M_impl._M_node_count = __x._M_impl._M_node_count;","class":"lineCov","hits":"1","order":"1453","possible_hits":"1",},
{"lineNum":"  879","line":"\t  return __root;","class":"lineCov","hits":"1","order":"1454","possible_hits":"1",},
{"lineNum":"  880","line":"\t}","class":"linePartCov","hits":"1","order":"1455","possible_hits":"2",},
{"lineNum":"  881","line":""},
{"lineNum":"  882","line":"      _Link_type"},
{"lineNum":"  883","line":"      _M_copy(const _Rb_tree& __x)","class":"lineCov","hits":"2","order":"1408","possible_hits":"2",},
{"lineNum":"  884","line":"      {"},
{"lineNum":"  885","line":"\t_Alloc_node __an(*this);","class":"lineCov","hits":"1","order":"1409","possible_hits":"1",},
{"lineNum":"  886","line":"\treturn _M_copy(__x, __an);","class":"lineCov","hits":"1","order":"1410","possible_hits":"1",},
{"lineNum":"  887","line":"      }","class":"linePartCov","hits":"1","order":"1456","possible_hits":"2",},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"      void"},
{"lineNum":"  890","line":"      _M_erase(_Link_type __x);"},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"      iterator"},
{"lineNum":"  893","line":"      _M_lower_bound(_Link_type __x, _Base_ptr __y,"},
{"lineNum":"  894","line":"\t\t     const _Key& __k);"},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"      const_iterator"},
{"lineNum":"  897","line":"      _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,"},
{"lineNum":"  898","line":"\t\t     const _Key& __k) const;"},
{"lineNum":"  899","line":""},
{"lineNum":"  900","line":"      iterator"},
{"lineNum":"  901","line":"      _M_upper_bound(_Link_type __x, _Base_ptr __y,"},
{"lineNum":"  902","line":"\t\t     const _Key& __k);"},
{"lineNum":"  903","line":""},
{"lineNum":"  904","line":"      const_iterator"},
{"lineNum":"  905","line":"      _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,"},
{"lineNum":"  906","line":"\t\t     const _Key& __k) const;"},
{"lineNum":"  907","line":""},
{"lineNum":"  908","line":"    public:"},
{"lineNum":"  909","line":"      // allocation/deallocation"},
{"lineNum":"  910","line":"#if __cplusplus < 201103L"},
{"lineNum":"  911","line":"      _Rb_tree() { }"},
{"lineNum":"  912","line":"#else"},
{"lineNum":"  913","line":"      _Rb_tree() = default;","class":"linePartCov","hits":"2","order":"736","possible_hits":"3",},
{"lineNum":"  914","line":"#endif"},
{"lineNum":"  915","line":""},
{"lineNum":"  916","line":"      _Rb_tree(const _Compare& __comp,"},
{"lineNum":"  917","line":"\t       const allocator_type& __a = allocator_type())"},
{"lineNum":"  918","line":"      : _M_impl(__comp, _Node_allocator(__a)) { }"},
{"lineNum":"  919","line":""},
{"lineNum":"  920","line":"      _Rb_tree(const _Rb_tree& __x)","class":"lineCov","hits":"1","order":"1391","possible_hits":"1",},
{"lineNum":"  921","line":"      : _M_impl(__x._M_impl)","class":"linePartCov","hits":"1","order":"1392","possible_hits":"2",},
{"lineNum":"  922","line":"      {"},
{"lineNum":"  923","line":"\tif (__x._M_root() != 0)","class":"lineCov","hits":"1","order":"1402","possible_hits":"1",},
{"lineNum":"  924","line":"\t  _M_root() = _M_copy(__x);","class":"lineCov","hits":"1","order":"1405","possible_hits":"1",},
{"lineNum":"  925","line":"      }","class":"linePartCov","hits":"2","order":"1457","possible_hits":"3",},
{"lineNum":"  926","line":""},
{"lineNum":"  927","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  928","line":"      _Rb_tree(const allocator_type& __a)"},
{"lineNum":"  929","line":"      : _M_impl(_Compare(), _Node_allocator(__a))"},
{"lineNum":"  930","line":"      { }"},
{"lineNum":"  931","line":""},
{"lineNum":"  932","line":"      _Rb_tree(const _Rb_tree& __x, const allocator_type& __a)"},
{"lineNum":"  933","line":"      : _M_impl(__x._M_impl._M_key_compare, _Node_allocator(__a))"},
{"lineNum":"  934","line":"      {"},
{"lineNum":"  935","line":"\tif (__x._M_root() != nullptr)"},
{"lineNum":"  936","line":"\t  _M_root() = _M_copy(__x);"},
{"lineNum":"  937","line":"      }"},
{"lineNum":"  938","line":""},
{"lineNum":"  939","line":"      _Rb_tree(_Rb_tree&&) = default;","class":"linePartCov","hits":"2","order":"769","possible_hits":"3",},
{"lineNum":"  940","line":""},
{"lineNum":"  941","line":"      _Rb_tree(_Rb_tree&& __x, const allocator_type& __a)"},
{"lineNum":"  942","line":"      : _Rb_tree(std::move(__x), _Node_allocator(__a))"},
{"lineNum":"  943","line":"      { }"},
{"lineNum":"  944","line":""},
{"lineNum":"  945","line":"      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);"},
{"lineNum":"  946","line":"#endif"},
{"lineNum":"  947","line":""},
{"lineNum":"  948","line":"      ~_Rb_tree() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"784","possible_hits":"1",},
{"lineNum":"  949","line":"      { _M_erase(_M_begin()); }","class":"linePartCov","hits":"1","order":"785","possible_hits":"2",},
{"lineNum":"  950","line":""},
{"lineNum":"  951","line":"      _Rb_tree&"},
{"lineNum":"  952","line":"      operator=(const _Rb_tree& __x);"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"      // Accessors."},
{"lineNum":"  955","line":"      _Compare"},
{"lineNum":"  956","line":"      key_comp() const"},
{"lineNum":"  957","line":"      { return _M_impl._M_key_compare; }"},
{"lineNum":"  958","line":""},
{"lineNum":"  959","line":"      iterator"},
{"lineNum":"  960","line":"      begin() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"2","order":"941","possible_hits":"2",},
{"lineNum":"  961","line":"      { return iterator(this->_M_impl._M_header._M_left); }","class":"linePartCov","hits":"1","order":"942","possible_hits":"2",},
{"lineNum":"  962","line":""},
{"lineNum":"  963","line":"      const_iterator"},
{"lineNum":"  964","line":"      begin() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  965","line":"      { return const_iterator(this->_M_impl._M_header._M_left); }"},
{"lineNum":"  966","line":""},
{"lineNum":"  967","line":"      iterator"},
{"lineNum":"  968","line":"      end() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"2","order":"899","possible_hits":"2",},
{"lineNum":"  969","line":"      { return iterator(&this->_M_impl._M_header); }","class":"linePartCov","hits":"1","order":"900","possible_hits":"2",},
{"lineNum":"  970","line":""},
{"lineNum":"  971","line":"      const_iterator"},
{"lineNum":"  972","line":"      end() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  973","line":"      { return const_iterator(&this->_M_impl._M_header); }"},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"      reverse_iterator"},
{"lineNum":"  976","line":"      rbegin() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  977","line":"      { return reverse_iterator(end()); }"},
{"lineNum":"  978","line":""},
{"lineNum":"  979","line":"      const_reverse_iterator"},
{"lineNum":"  980","line":"      rbegin() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  981","line":"      { return const_reverse_iterator(end()); }"},
{"lineNum":"  982","line":""},
{"lineNum":"  983","line":"      reverse_iterator"},
{"lineNum":"  984","line":"      rend() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  985","line":"      { return reverse_iterator(begin()); }"},
{"lineNum":"  986","line":""},
{"lineNum":"  987","line":"      const_reverse_iterator"},
{"lineNum":"  988","line":"      rend() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  989","line":"      { return const_reverse_iterator(begin()); }"},
{"lineNum":"  990","line":""},
{"lineNum":"  991","line":"      bool"},
{"lineNum":"  992","line":"      empty() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  993","line":"      { return _M_impl._M_node_count == 0; }"},
{"lineNum":"  994","line":""},
{"lineNum":"  995","line":"      size_type"},
{"lineNum":"  996","line":"      size() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  997","line":"      { return _M_impl._M_node_count; }"},
{"lineNum":"  998","line":""},
{"lineNum":"  999","line":"      size_type"},
{"lineNum":" 1000","line":"      max_size() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1001","line":"      { return _Alloc_traits::max_size(_M_get_Node_allocator()); }"},
{"lineNum":" 1002","line":""},
{"lineNum":" 1003","line":"      void"},
{"lineNum":" 1004","line":"      swap(_Rb_tree& __t)"},
{"lineNum":" 1005","line":"      _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value);"},
{"lineNum":" 1006","line":""},
{"lineNum":" 1007","line":"      // Insert/erase."},
{"lineNum":" 1008","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1009","line":"      template<typename _Arg>"},
{"lineNum":" 1010","line":"        pair<iterator, bool>"},
{"lineNum":" 1011","line":"        _M_insert_unique(_Arg&& __x);"},
{"lineNum":" 1012","line":""},
{"lineNum":" 1013","line":"      template<typename _Arg>"},
{"lineNum":" 1014","line":"        iterator"},
{"lineNum":" 1015","line":"        _M_insert_equal(_Arg&& __x);"},
{"lineNum":" 1016","line":""},
{"lineNum":" 1017","line":"      template<typename _Arg, typename _NodeGen>"},
{"lineNum":" 1018","line":"        iterator"},
{"lineNum":" 1019","line":"\t_M_insert_unique_(const_iterator __pos, _Arg&& __x, _NodeGen&);"},
{"lineNum":" 1020","line":""},
{"lineNum":" 1021","line":"      template<typename _Arg>"},
{"lineNum":" 1022","line":"\titerator"},
{"lineNum":" 1023","line":"\t_M_insert_unique_(const_iterator __pos, _Arg&& __x)"},
{"lineNum":" 1024","line":"\t{"},
{"lineNum":" 1025","line":"\t  _Alloc_node __an(*this);"},
{"lineNum":" 1026","line":"\t  return _M_insert_unique_(__pos, std::forward<_Arg>(__x), __an);"},
{"lineNum":" 1027","line":"\t}"},
{"lineNum":" 1028","line":""},
{"lineNum":" 1029","line":"      template<typename _Arg, typename _NodeGen>"},
{"lineNum":" 1030","line":"\titerator"},
{"lineNum":" 1031","line":"\t_M_insert_equal_(const_iterator __pos, _Arg&& __x, _NodeGen&);"},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"      template<typename _Arg>"},
{"lineNum":" 1034","line":"\titerator"},
{"lineNum":" 1035","line":"\t_M_insert_equal_(const_iterator __pos, _Arg&& __x)"},
{"lineNum":" 1036","line":"\t{"},
{"lineNum":" 1037","line":"\t  _Alloc_node __an(*this);"},
{"lineNum":" 1038","line":"\t  return _M_insert_equal_(__pos, std::forward<_Arg>(__x), __an);"},
{"lineNum":" 1039","line":"\t}"},
{"lineNum":" 1040","line":""},
{"lineNum":" 1041","line":"      template<typename... _Args>"},
{"lineNum":" 1042","line":"\tpair<iterator, bool>"},
{"lineNum":" 1043","line":"\t_M_emplace_unique(_Args&&... __args);"},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":"      template<typename... _Args>"},
{"lineNum":" 1046","line":"\titerator"},
{"lineNum":" 1047","line":"\t_M_emplace_equal(_Args&&... __args);"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"      template<typename... _Args>"},
{"lineNum":" 1050","line":"\titerator"},
{"lineNum":" 1051","line":"\t_M_emplace_hint_unique(const_iterator __pos, _Args&&... __args);"},
{"lineNum":" 1052","line":""},
{"lineNum":" 1053","line":"      template<typename... _Args>"},
{"lineNum":" 1054","line":"\titerator"},
{"lineNum":" 1055","line":"\t_M_emplace_hint_equal(const_iterator __pos, _Args&&... __args);"},
{"lineNum":" 1056","line":"#else"},
{"lineNum":" 1057","line":"      pair<iterator, bool>"},
{"lineNum":" 1058","line":"      _M_insert_unique(const value_type& __x);"},
{"lineNum":" 1059","line":""},
{"lineNum":" 1060","line":"      iterator"},
{"lineNum":" 1061","line":"      _M_insert_equal(const value_type& __x);"},
{"lineNum":" 1062","line":""},
{"lineNum":" 1063","line":"      template<typename _NodeGen>"},
{"lineNum":" 1064","line":"\titerator"},
{"lineNum":" 1065","line":"\t_M_insert_unique_(const_iterator __pos, const value_type& __x,"},
{"lineNum":" 1066","line":"\t\t\t  _NodeGen&);"},
{"lineNum":" 1067","line":""},
{"lineNum":" 1068","line":"      iterator"},
{"lineNum":" 1069","line":"      _M_insert_unique_(const_iterator __pos, const value_type& __x)"},
{"lineNum":" 1070","line":"      {"},
{"lineNum":" 1071","line":"\t_Alloc_node __an(*this);"},
{"lineNum":" 1072","line":"\treturn _M_insert_unique_(__pos, __x, __an);"},
{"lineNum":" 1073","line":"      }"},
{"lineNum":" 1074","line":""},
{"lineNum":" 1075","line":"      template<typename _NodeGen>"},
{"lineNum":" 1076","line":"\titerator"},
{"lineNum":" 1077","line":"\t_M_insert_equal_(const_iterator __pos, const value_type& __x,"},
{"lineNum":" 1078","line":"\t\t\t _NodeGen&);"},
{"lineNum":" 1079","line":"      iterator"},
{"lineNum":" 1080","line":"      _M_insert_equal_(const_iterator __pos, const value_type& __x)"},
{"lineNum":" 1081","line":"      {"},
{"lineNum":" 1082","line":"\t_Alloc_node __an(*this);"},
{"lineNum":" 1083","line":"\treturn _M_insert_equal_(__pos, __x, __an);"},
{"lineNum":" 1084","line":"      }"},
{"lineNum":" 1085","line":"#endif"},
{"lineNum":" 1086","line":""},
{"lineNum":" 1087","line":"      template<typename _InputIterator>"},
{"lineNum":" 1088","line":"        void"},
{"lineNum":" 1089","line":"        _M_insert_unique(_InputIterator __first, _InputIterator __last);"},
{"lineNum":" 1090","line":""},
{"lineNum":" 1091","line":"      template<typename _InputIterator>"},
{"lineNum":" 1092","line":"        void"},
{"lineNum":" 1093","line":"        _M_insert_equal(_InputIterator __first, _InputIterator __last);"},
{"lineNum":" 1094","line":""},
{"lineNum":" 1095","line":"    private:"},
{"lineNum":" 1096","line":"      void"},
{"lineNum":" 1097","line":"      _M_erase_aux(const_iterator __position);"},
{"lineNum":" 1098","line":""},
{"lineNum":" 1099","line":"      void"},
{"lineNum":" 1100","line":"      _M_erase_aux(const_iterator __first, const_iterator __last);"},
{"lineNum":" 1101","line":""},
{"lineNum":" 1102","line":"    public:"},
{"lineNum":" 1103","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1104","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":" 1105","line":"      // DR 130. Associative erase should return an iterator."},
{"lineNum":" 1106","line":"      _GLIBCXX_ABI_TAG_CXX11"},
{"lineNum":" 1107","line":"      iterator"},
{"lineNum":" 1108","line":"      erase(const_iterator __position)"},
{"lineNum":" 1109","line":"      {"},
{"lineNum":" 1110","line":"\t__glibcxx_assert(__position != end());"},
{"lineNum":" 1111","line":"\tconst_iterator __result = __position;"},
{"lineNum":" 1112","line":"\t++__result;"},
{"lineNum":" 1113","line":"\t_M_erase_aux(__position);"},
{"lineNum":" 1114","line":"\treturn __result._M_const_cast();"},
{"lineNum":" 1115","line":"      }"},
{"lineNum":" 1116","line":""},
{"lineNum":" 1117","line":"      // LWG 2059."},
{"lineNum":" 1118","line":"      _GLIBCXX_ABI_TAG_CXX11"},
{"lineNum":" 1119","line":"      iterator"},
{"lineNum":" 1120","line":"      erase(iterator __position)"},
{"lineNum":" 1121","line":"      {"},
{"lineNum":" 1122","line":"\t__glibcxx_assert(__position != end());"},
{"lineNum":" 1123","line":"\titerator __result = __position;"},
{"lineNum":" 1124","line":"\t++__result;"},
{"lineNum":" 1125","line":"\t_M_erase_aux(__position);"},
{"lineNum":" 1126","line":"\treturn __result;"},
{"lineNum":" 1127","line":"      }"},
{"lineNum":" 1128","line":"#else"},
{"lineNum":" 1129","line":"      void"},
{"lineNum":" 1130","line":"      erase(iterator __position)"},
{"lineNum":" 1131","line":"      {"},
{"lineNum":" 1132","line":"\t__glibcxx_assert(__position != end());"},
{"lineNum":" 1133","line":"\t_M_erase_aux(__position);"},
{"lineNum":" 1134","line":"      }"},
{"lineNum":" 1135","line":""},
{"lineNum":" 1136","line":"      void"},
{"lineNum":" 1137","line":"      erase(const_iterator __position)"},
{"lineNum":" 1138","line":"      {"},
{"lineNum":" 1139","line":"\t__glibcxx_assert(__position != end());"},
{"lineNum":" 1140","line":"\t_M_erase_aux(__position);"},
{"lineNum":" 1141","line":"      }"},
{"lineNum":" 1142","line":"#endif"},
{"lineNum":" 1143","line":"      size_type"},
{"lineNum":" 1144","line":"      erase(const key_type& __x);"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1147","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":" 1148","line":"      // DR 130. Associative erase should return an iterator."},
{"lineNum":" 1149","line":"      _GLIBCXX_ABI_TAG_CXX11"},
{"lineNum":" 1150","line":"      iterator"},
{"lineNum":" 1151","line":"      erase(const_iterator __first, const_iterator __last)"},
{"lineNum":" 1152","line":"      {"},
{"lineNum":" 1153","line":"\t_M_erase_aux(__first, __last);"},
{"lineNum":" 1154","line":"\treturn __last._M_const_cast();"},
{"lineNum":" 1155","line":"      }"},
{"lineNum":" 1156","line":"#else"},
{"lineNum":" 1157","line":"      void"},
{"lineNum":" 1158","line":"      erase(iterator __first, iterator __last)"},
{"lineNum":" 1159","line":"      { _M_erase_aux(__first, __last); }"},
{"lineNum":" 1160","line":""},
{"lineNum":" 1161","line":"      void"},
{"lineNum":" 1162","line":"      erase(const_iterator __first, const_iterator __last)"},
{"lineNum":" 1163","line":"      { _M_erase_aux(__first, __last); }"},
{"lineNum":" 1164","line":"#endif"},
{"lineNum":" 1165","line":"      void"},
{"lineNum":" 1166","line":"      erase(const key_type* __first, const key_type* __last);"},
{"lineNum":" 1167","line":""},
{"lineNum":" 1168","line":"      void"},
{"lineNum":" 1169","line":"      clear() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1170","line":"      {"},
{"lineNum":" 1171","line":"        _M_erase(_M_begin());"},
{"lineNum":" 1172","line":"\t_M_impl._M_reset();"},
{"lineNum":" 1173","line":"      }"},
{"lineNum":" 1174","line":""},
{"lineNum":" 1175","line":"      // Set operations."},
{"lineNum":" 1176","line":"      iterator"},
{"lineNum":" 1177","line":"      find(const key_type& __k);"},
{"lineNum":" 1178","line":""},
{"lineNum":" 1179","line":"      const_iterator"},
{"lineNum":" 1180","line":"      find(const key_type& __k) const;"},
{"lineNum":" 1181","line":""},
{"lineNum":" 1182","line":"      size_type"},
{"lineNum":" 1183","line":"      count(const key_type& __k) const;"},
{"lineNum":" 1184","line":""},
{"lineNum":" 1185","line":"      iterator"},
{"lineNum":" 1186","line":"      lower_bound(const key_type& __k)"},
{"lineNum":" 1187","line":"      { return _M_lower_bound(_M_begin(), _M_end(), __k); }"},
{"lineNum":" 1188","line":""},
{"lineNum":" 1189","line":"      const_iterator"},
{"lineNum":" 1190","line":"      lower_bound(const key_type& __k) const"},
{"lineNum":" 1191","line":"      { return _M_lower_bound(_M_begin(), _M_end(), __k); }"},
{"lineNum":" 1192","line":""},
{"lineNum":" 1193","line":"      iterator"},
{"lineNum":" 1194","line":"      upper_bound(const key_type& __k)"},
{"lineNum":" 1195","line":"      { return _M_upper_bound(_M_begin(), _M_end(), __k); }"},
{"lineNum":" 1196","line":""},
{"lineNum":" 1197","line":"      const_iterator"},
{"lineNum":" 1198","line":"      upper_bound(const key_type& __k) const"},
{"lineNum":" 1199","line":"      { return _M_upper_bound(_M_begin(), _M_end(), __k); }"},
{"lineNum":" 1200","line":""},
{"lineNum":" 1201","line":"      pair<iterator, iterator>"},
{"lineNum":" 1202","line":"      equal_range(const key_type& __k);"},
{"lineNum":" 1203","line":""},
{"lineNum":" 1204","line":"      pair<const_iterator, const_iterator>"},
{"lineNum":" 1205","line":"      equal_range(const key_type& __k) const;"},
{"lineNum":" 1206","line":""},
{"lineNum":" 1207","line":"#if __cplusplus > 201103L"},
{"lineNum":" 1208","line":"      template<typename _Kt,"},
{"lineNum":" 1209","line":"\t       typename _Req ="},
{"lineNum":" 1210","line":"\t\t typename __has_is_transparent<_Compare, _Kt>::type>"},
{"lineNum":" 1211","line":"\titerator"},
{"lineNum":" 1212","line":"\t_M_find_tr(const _Kt& __k)"},
{"lineNum":" 1213","line":"\t{"},
{"lineNum":" 1214","line":"\t  const _Rb_tree* __const_this = this;"},
{"lineNum":" 1215","line":"\t  return __const_this->_M_find_tr(__k)._M_const_cast();"},
{"lineNum":" 1216","line":"\t}"},
{"lineNum":" 1217","line":""},
{"lineNum":" 1218","line":"      template<typename _Kt,"},
{"lineNum":" 1219","line":"\t       typename _Req ="},
{"lineNum":" 1220","line":"\t\t typename __has_is_transparent<_Compare, _Kt>::type>"},
{"lineNum":" 1221","line":"\tconst_iterator"},
{"lineNum":" 1222","line":"\t_M_find_tr(const _Kt& __k) const"},
{"lineNum":" 1223","line":"\t{"},
{"lineNum":" 1224","line":"\t  auto __j = _M_lower_bound_tr(__k);"},
{"lineNum":" 1225","line":"\t  if (__j != end() && _M_impl._M_key_compare(__k, _S_key(__j._M_node)))"},
{"lineNum":" 1226","line":"\t    __j = end();"},
{"lineNum":" 1227","line":"\t  return __j;"},
{"lineNum":" 1228","line":"\t}"},
{"lineNum":" 1229","line":""},
{"lineNum":" 1230","line":"      template<typename _Kt,"},
{"lineNum":" 1231","line":"\t       typename _Req ="},
{"lineNum":" 1232","line":"\t\t typename __has_is_transparent<_Compare, _Kt>::type>"},
{"lineNum":" 1233","line":"\tsize_type"},
{"lineNum":" 1234","line":"\t_M_count_tr(const _Kt& __k) const"},
{"lineNum":" 1235","line":"\t{"},
{"lineNum":" 1236","line":"\t  auto __p = _M_equal_range_tr(__k);"},
{"lineNum":" 1237","line":"\t  return std::distance(__p.first, __p.second);"},
{"lineNum":" 1238","line":"\t}"},
{"lineNum":" 1239","line":""},
{"lineNum":" 1240","line":"      template<typename _Kt,"},
{"lineNum":" 1241","line":"\t       typename _Req ="},
{"lineNum":" 1242","line":"\t\t typename __has_is_transparent<_Compare, _Kt>::type>"},
{"lineNum":" 1243","line":"\titerator"},
{"lineNum":" 1244","line":"\t_M_lower_bound_tr(const _Kt& __k)"},
{"lineNum":" 1245","line":"\t{"},
{"lineNum":" 1246","line":"\t  const _Rb_tree* __const_this = this;"},
{"lineNum":" 1247","line":"\t  return __const_this->_M_lower_bound_tr(__k)._M_const_cast();"},
{"lineNum":" 1248","line":"\t}"},
{"lineNum":" 1249","line":""},
{"lineNum":" 1250","line":"      template<typename _Kt,"},
{"lineNum":" 1251","line":"\t       typename _Req ="},
{"lineNum":" 1252","line":"\t\t typename __has_is_transparent<_Compare, _Kt>::type>"},
{"lineNum":" 1253","line":"\tconst_iterator"},
{"lineNum":" 1254","line":"\t_M_lower_bound_tr(const _Kt& __k) const"},
{"lineNum":" 1255","line":"\t{"},
{"lineNum":" 1256","line":"\t  auto __x = _M_begin();"},
{"lineNum":" 1257","line":"\t  auto __y = _M_end();"},
{"lineNum":" 1258","line":"\t  while (__x != 0)"},
{"lineNum":" 1259","line":"\t    if (!_M_impl._M_key_compare(_S_key(__x), __k))"},
{"lineNum":" 1260","line":"\t      {"},
{"lineNum":" 1261","line":"\t\t__y = __x;"},
{"lineNum":" 1262","line":"\t\t__x = _S_left(__x);"},
{"lineNum":" 1263","line":"\t      }"},
{"lineNum":" 1264","line":"\t    else"},
{"lineNum":" 1265","line":"\t      __x = _S_right(__x);"},
{"lineNum":" 1266","line":"\t  return const_iterator(__y);"},
{"lineNum":" 1267","line":"\t}"},
{"lineNum":" 1268","line":""},
{"lineNum":" 1269","line":"      template<typename _Kt,"},
{"lineNum":" 1270","line":"\t       typename _Req ="},
{"lineNum":" 1271","line":"\t\t typename __has_is_transparent<_Compare, _Kt>::type>"},
{"lineNum":" 1272","line":"\titerator"},
{"lineNum":" 1273","line":"\t_M_upper_bound_tr(const _Kt& __k)"},
{"lineNum":" 1274","line":"\t{"},
{"lineNum":" 1275","line":"\t  const _Rb_tree* __const_this = this;"},
{"lineNum":" 1276","line":"\t  return __const_this->_M_upper_bound_tr(__k)._M_const_cast();"},
{"lineNum":" 1277","line":"\t}"},
{"lineNum":" 1278","line":""},
{"lineNum":" 1279","line":"      template<typename _Kt,"},
{"lineNum":" 1280","line":"\t       typename _Req ="},
{"lineNum":" 1281","line":"\t\t typename __has_is_transparent<_Compare, _Kt>::type>"},
{"lineNum":" 1282","line":"\tconst_iterator"},
{"lineNum":" 1283","line":"\t_M_upper_bound_tr(const _Kt& __k) const"},
{"lineNum":" 1284","line":"\t{"},
{"lineNum":" 1285","line":"\t  auto __x = _M_begin();"},
{"lineNum":" 1286","line":"\t  auto __y = _M_end();"},
{"lineNum":" 1287","line":"\t  while (__x != 0)"},
{"lineNum":" 1288","line":"\t    if (_M_impl._M_key_compare(__k, _S_key(__x)))"},
{"lineNum":" 1289","line":"\t      {"},
{"lineNum":" 1290","line":"\t\t__y = __x;"},
{"lineNum":" 1291","line":"\t\t__x = _S_left(__x);"},
{"lineNum":" 1292","line":"\t      }"},
{"lineNum":" 1293","line":"\t    else"},
{"lineNum":" 1294","line":"\t      __x = _S_right(__x);"},
{"lineNum":" 1295","line":"\t  return const_iterator(__y);"},
{"lineNum":" 1296","line":"\t}"},
{"lineNum":" 1297","line":""},
{"lineNum":" 1298","line":"      template<typename _Kt,"},
{"lineNum":" 1299","line":"\t       typename _Req ="},
{"lineNum":" 1300","line":"\t\t typename __has_is_transparent<_Compare, _Kt>::type>"},
{"lineNum":" 1301","line":"\tpair<iterator, iterator>"},
{"lineNum":" 1302","line":"\t_M_equal_range_tr(const _Kt& __k)"},
{"lineNum":" 1303","line":"\t{"},
{"lineNum":" 1304","line":"\t  const _Rb_tree* __const_this = this;"},
{"lineNum":" 1305","line":"\t  auto __ret = __const_this->_M_equal_range_tr(__k);"},
{"lineNum":" 1306","line":"\t  return { __ret.first._M_const_cast(), __ret.second._M_const_cast() };"},
{"lineNum":" 1307","line":"\t}"},
{"lineNum":" 1308","line":""},
{"lineNum":" 1309","line":"      template<typename _Kt,"},
{"lineNum":" 1310","line":"\t       typename _Req ="},
{"lineNum":" 1311","line":"\t\t typename __has_is_transparent<_Compare, _Kt>::type>"},
{"lineNum":" 1312","line":"\tpair<const_iterator, const_iterator>"},
{"lineNum":" 1313","line":"\t_M_equal_range_tr(const _Kt& __k) const"},
{"lineNum":" 1314","line":"\t{"},
{"lineNum":" 1315","line":"\t  auto __low = _M_lower_bound_tr(__k);"},
{"lineNum":" 1316","line":"\t  auto __high = __low;"},
{"lineNum":" 1317","line":"\t  auto& __cmp = _M_impl._M_key_compare;"},
{"lineNum":" 1318","line":"\t  while (__high != end() && !__cmp(__k, _S_key(__high._M_node)))"},
{"lineNum":" 1319","line":"\t    ++__high;"},
{"lineNum":" 1320","line":"\t  return { __low, __high };"},
{"lineNum":" 1321","line":"\t}"},
{"lineNum":" 1322","line":"#endif"},
{"lineNum":" 1323","line":""},
{"lineNum":" 1324","line":"      // Debugging."},
{"lineNum":" 1325","line":"      bool"},
{"lineNum":" 1326","line":"      __rb_verify() const;"},
{"lineNum":" 1327","line":""},
{"lineNum":" 1328","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1329","line":"      _Rb_tree&"},
{"lineNum":" 1330","line":"      operator=(_Rb_tree&&)"},
{"lineNum":" 1331","line":"      noexcept(_Alloc_traits::_S_nothrow_move()"},
{"lineNum":" 1332","line":"\t       && is_nothrow_move_assignable<_Compare>::value);"},
{"lineNum":" 1333","line":""},
{"lineNum":" 1334","line":"      template<typename _Iterator>"},
{"lineNum":" 1335","line":"\tvoid"},
{"lineNum":" 1336","line":"\t_M_assign_unique(_Iterator, _Iterator);"},
{"lineNum":" 1337","line":""},
{"lineNum":" 1338","line":"      template<typename _Iterator>"},
{"lineNum":" 1339","line":"\tvoid"},
{"lineNum":" 1340","line":"\t_M_assign_equal(_Iterator, _Iterator);"},
{"lineNum":" 1341","line":""},
{"lineNum":" 1342","line":"    private:"},
{"lineNum":" 1343","line":"      // Move elements from container with equal allocator."},
{"lineNum":" 1344","line":"      void"},
{"lineNum":" 1345","line":"      _M_move_data(_Rb_tree& __x, std::true_type)"},
{"lineNum":" 1346","line":"      { _M_impl._M_move_data(__x._M_impl); }"},
{"lineNum":" 1347","line":""},
{"lineNum":" 1348","line":"      // Move elements from container with possibly non-equal allocator,"},
{"lineNum":" 1349","line":"      // which might result in a copy not a move."},
{"lineNum":" 1350","line":"      void"},
{"lineNum":" 1351","line":"      _M_move_data(_Rb_tree&, std::false_type);"},
{"lineNum":" 1352","line":""},
{"lineNum":" 1353","line":"      // Move assignment from container with equal allocator."},
{"lineNum":" 1354","line":"      void"},
{"lineNum":" 1355","line":"      _M_move_assign(_Rb_tree&, std::true_type);"},
{"lineNum":" 1356","line":""},
{"lineNum":" 1357","line":"      // Move assignment from container with possibly non-equal allocator,"},
{"lineNum":" 1358","line":"      // which might result in a copy not a move."},
{"lineNum":" 1359","line":"      void"},
{"lineNum":" 1360","line":"      _M_move_assign(_Rb_tree&, std::false_type);"},
{"lineNum":" 1361","line":"#endif"},
{"lineNum":" 1362","line":""},
{"lineNum":" 1363","line":"#if __cplusplus > 201402L"},
{"lineNum":" 1364","line":"    public:"},
{"lineNum":" 1365","line":"      /// Re-insert an extracted node."},
{"lineNum":" 1366","line":"      insert_return_type"},
{"lineNum":" 1367","line":"      _M_reinsert_node_unique(node_type&& __nh)"},
{"lineNum":" 1368","line":"      {"},
{"lineNum":" 1369","line":"\tinsert_return_type __ret;"},
{"lineNum":" 1370","line":"\tif (__nh.empty())"},
{"lineNum":" 1371","line":"\t  __ret.position = end();"},
{"lineNum":" 1372","line":"\telse"},
{"lineNum":" 1373","line":"\t  {"},
{"lineNum":" 1374","line":"\t    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);"},
{"lineNum":" 1375","line":""},
{"lineNum":" 1376","line":"\t    auto __res = _M_get_insert_unique_pos(__nh._M_key());"},
{"lineNum":" 1377","line":"\t    if (__res.second)"},
{"lineNum":" 1378","line":"\t      {"},
{"lineNum":" 1379","line":"\t\t__ret.position"},
{"lineNum":" 1380","line":"\t\t  = _M_insert_node(__res.first, __res.second, __nh._M_ptr);"},
{"lineNum":" 1381","line":"\t\t__nh._M_ptr = nullptr;"},
{"lineNum":" 1382","line":"\t\t__ret.inserted = true;"},
{"lineNum":" 1383","line":"\t      }"},
{"lineNum":" 1384","line":"\t    else"},
{"lineNum":" 1385","line":"\t      {"},
{"lineNum":" 1386","line":"\t\t__ret.node = std::move(__nh);"},
{"lineNum":" 1387","line":"\t\t__ret.position = iterator(__res.first);"},
{"lineNum":" 1388","line":"\t\t__ret.inserted = false;"},
{"lineNum":" 1389","line":"\t      }"},
{"lineNum":" 1390","line":"\t  }"},
{"lineNum":" 1391","line":"\treturn __ret;"},
{"lineNum":" 1392","line":"      }"},
{"lineNum":" 1393","line":""},
{"lineNum":" 1394","line":"      /// Re-insert an extracted node."},
{"lineNum":" 1395","line":"      iterator"},
{"lineNum":" 1396","line":"      _M_reinsert_node_equal(node_type&& __nh)"},
{"lineNum":" 1397","line":"      {"},
{"lineNum":" 1398","line":"\titerator __ret;"},
{"lineNum":" 1399","line":"\tif (__nh.empty())"},
{"lineNum":" 1400","line":"\t  __ret = end();"},
{"lineNum":" 1401","line":"\telse"},
{"lineNum":" 1402","line":"\t  {"},
{"lineNum":" 1403","line":"\t    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);"},
{"lineNum":" 1404","line":"\t    auto __res = _M_get_insert_equal_pos(__nh._M_key());"},
{"lineNum":" 1405","line":"\t    if (__res.second)"},
{"lineNum":" 1406","line":"\t      __ret = _M_insert_node(__res.first, __res.second, __nh._M_ptr);"},
{"lineNum":" 1407","line":"\t    else"},
{"lineNum":" 1408","line":"\t      __ret = _M_insert_equal_lower_node(__nh._M_ptr);"},
{"lineNum":" 1409","line":"\t    __nh._M_ptr = nullptr;"},
{"lineNum":" 1410","line":"\t  }"},
{"lineNum":" 1411","line":"\treturn __ret;"},
{"lineNum":" 1412","line":"      }"},
{"lineNum":" 1413","line":""},
{"lineNum":" 1414","line":"      /// Re-insert an extracted node."},
{"lineNum":" 1415","line":"      iterator"},
{"lineNum":" 1416","line":"      _M_reinsert_node_hint_unique(const_iterator __hint, node_type&& __nh)"},
{"lineNum":" 1417","line":"      {"},
{"lineNum":" 1418","line":"\titerator __ret;"},
{"lineNum":" 1419","line":"\tif (__nh.empty())"},
{"lineNum":" 1420","line":"\t  __ret = end();"},
{"lineNum":" 1421","line":"\telse"},
{"lineNum":" 1422","line":"\t  {"},
{"lineNum":" 1423","line":"\t    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);"},
{"lineNum":" 1424","line":"\t    auto __res = _M_get_insert_hint_unique_pos(__hint, __nh._M_key());"},
{"lineNum":" 1425","line":"\t    if (__res.second)"},
{"lineNum":" 1426","line":"\t      {"},
{"lineNum":" 1427","line":"\t\t__ret = _M_insert_node(__res.first, __res.second, __nh._M_ptr);"},
{"lineNum":" 1428","line":"\t\t__nh._M_ptr = nullptr;"},
{"lineNum":" 1429","line":"\t      }"},
{"lineNum":" 1430","line":"\t    else"},
{"lineNum":" 1431","line":"\t      __ret = iterator(__res.first);"},
{"lineNum":" 1432","line":"\t  }"},
{"lineNum":" 1433","line":"\treturn __ret;"},
{"lineNum":" 1434","line":"      }"},
{"lineNum":" 1435","line":""},
{"lineNum":" 1436","line":"      /// Re-insert an extracted node."},
{"lineNum":" 1437","line":"      iterator"},
{"lineNum":" 1438","line":"      _M_reinsert_node_hint_equal(const_iterator __hint, node_type&& __nh)"},
{"lineNum":" 1439","line":"      {"},
{"lineNum":" 1440","line":"\titerator __ret;"},
{"lineNum":" 1441","line":"\tif (__nh.empty())"},
{"lineNum":" 1442","line":"\t  __ret = end();"},
{"lineNum":" 1443","line":"\telse"},
{"lineNum":" 1444","line":"\t  {"},
{"lineNum":" 1445","line":"\t    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);"},
{"lineNum":" 1446","line":"\t    auto __res = _M_get_insert_hint_equal_pos(__hint, __nh._M_key());"},
{"lineNum":" 1447","line":"\t    if (__res.second)"},
{"lineNum":" 1448","line":"\t      __ret = _M_insert_node(__res.first, __res.second, __nh._M_ptr);"},
{"lineNum":" 1449","line":"\t    else"},
{"lineNum":" 1450","line":"\t      __ret = _M_insert_equal_lower_node(__nh._M_ptr);"},
{"lineNum":" 1451","line":"\t    __nh._M_ptr = nullptr;"},
{"lineNum":" 1452","line":"\t  }"},
{"lineNum":" 1453","line":"\treturn __ret;"},
{"lineNum":" 1454","line":"      }"},
{"lineNum":" 1455","line":""},
{"lineNum":" 1456","line":"      /// Extract a node."},
{"lineNum":" 1457","line":"      node_type"},
{"lineNum":" 1458","line":"      extract(const_iterator __pos)"},
{"lineNum":" 1459","line":"      {"},
{"lineNum":" 1460","line":"\tauto __ptr = _Rb_tree_rebalance_for_erase("},
{"lineNum":" 1461","line":"\t    __pos._M_const_cast()._M_node, _M_impl._M_header);"},
{"lineNum":" 1462","line":"\t--_M_impl._M_node_count;"},
{"lineNum":" 1463","line":"\treturn { static_cast<_Link_type>(__ptr), _M_get_Node_allocator() };"},
{"lineNum":" 1464","line":"      }"},
{"lineNum":" 1465","line":""},
{"lineNum":" 1466","line":"      /// Extract a node."},
{"lineNum":" 1467","line":"      node_type"},
{"lineNum":" 1468","line":"      extract(const key_type& __k)"},
{"lineNum":" 1469","line":"      {"},
{"lineNum":" 1470","line":"\tnode_type __nh;"},
{"lineNum":" 1471","line":"\tauto __pos = find(__k);"},
{"lineNum":" 1472","line":"\tif (__pos != end())"},
{"lineNum":" 1473","line":"\t  __nh = extract(const_iterator(__pos));"},
{"lineNum":" 1474","line":"\treturn __nh;"},
{"lineNum":" 1475","line":"      }"},
{"lineNum":" 1476","line":""},
{"lineNum":" 1477","line":"      template<typename _Compare2>"},
{"lineNum":" 1478","line":"\tusing _Compatible_tree"},
{"lineNum":" 1479","line":"\t  = _Rb_tree<_Key, _Val, _KeyOfValue, _Compare2, _Alloc>;"},
{"lineNum":" 1480","line":""},
{"lineNum":" 1481","line":"      template<typename, typename>"},
{"lineNum":" 1482","line":"\tfriend class _Rb_tree_merge_helper;"},
{"lineNum":" 1483","line":""},
{"lineNum":" 1484","line":"      /// Merge from a compatible container into one with unique keys."},
{"lineNum":" 1485","line":"      template<typename _Compare2>"},
{"lineNum":" 1486","line":"\tvoid"},
{"lineNum":" 1487","line":"\t_M_merge_unique(_Compatible_tree<_Compare2>& __src) noexcept"},
{"lineNum":" 1488","line":"\t{"},
{"lineNum":" 1489","line":"\t  using _Merge_helper = _Rb_tree_merge_helper<_Rb_tree, _Compare2>;"},
{"lineNum":" 1490","line":"\t  for (auto __i = __src.begin(), __end = __src.end(); __i != __end;)"},
{"lineNum":" 1491","line":"\t    {"},
{"lineNum":" 1492","line":"\t      auto __pos = __i++;"},
{"lineNum":" 1493","line":"\t      auto __res = _M_get_insert_unique_pos(_KeyOfValue()(*__pos));"},
{"lineNum":" 1494","line":"\t      if (__res.second)"},
{"lineNum":" 1495","line":"\t\t{"},
{"lineNum":" 1496","line":"\t\t  auto& __src_impl = _Merge_helper::_S_get_impl(__src);"},
{"lineNum":" 1497","line":"\t\t  auto __ptr = _Rb_tree_rebalance_for_erase("},
{"lineNum":" 1498","line":"\t\t      __pos._M_node, __src_impl._M_header);"},
{"lineNum":" 1499","line":"\t\t  --__src_impl._M_node_count;"},
{"lineNum":" 1500","line":"\t\t  _M_insert_node(__res.first, __res.second,"},
{"lineNum":" 1501","line":"\t\t\t\t static_cast<_Link_type>(__ptr));"},
{"lineNum":" 1502","line":"\t\t}"},
{"lineNum":" 1503","line":"\t    }"},
{"lineNum":" 1504","line":"\t}"},
{"lineNum":" 1505","line":""},
{"lineNum":" 1506","line":"      /// Merge from a compatible container into one with equivalent keys."},
{"lineNum":" 1507","line":"      template<typename _Compare2>"},
{"lineNum":" 1508","line":"\tvoid"},
{"lineNum":" 1509","line":"\t_M_merge_equal(_Compatible_tree<_Compare2>& __src) noexcept"},
{"lineNum":" 1510","line":"\t{"},
{"lineNum":" 1511","line":"\t  using _Merge_helper = _Rb_tree_merge_helper<_Rb_tree, _Compare2>;"},
{"lineNum":" 1512","line":"\t  for (auto __i = __src.begin(), __end = __src.end(); __i != __end;)"},
{"lineNum":" 1513","line":"\t    {"},
{"lineNum":" 1514","line":"\t      auto __pos = __i++;"},
{"lineNum":" 1515","line":"\t      auto __res = _M_get_insert_equal_pos(_KeyOfValue()(*__pos));"},
{"lineNum":" 1516","line":"\t      if (__res.second)"},
{"lineNum":" 1517","line":"\t\t{"},
{"lineNum":" 1518","line":"\t\t  auto& __src_impl = _Merge_helper::_S_get_impl(__src);"},
{"lineNum":" 1519","line":"\t\t  auto __ptr = _Rb_tree_rebalance_for_erase("},
{"lineNum":" 1520","line":"\t\t      __pos._M_node, __src_impl._M_header);"},
{"lineNum":" 1521","line":"\t\t  --__src_impl._M_node_count;"},
{"lineNum":" 1522","line":"\t\t  _M_insert_node(__res.first, __res.second,"},
{"lineNum":" 1523","line":"\t\t\t\t static_cast<_Link_type>(__ptr));"},
{"lineNum":" 1524","line":"\t\t}"},
{"lineNum":" 1525","line":"\t    }"},
{"lineNum":" 1526","line":"\t}"},
{"lineNum":" 1527","line":"#endif // C++17"},
{"lineNum":" 1528","line":"    };"},
{"lineNum":" 1529","line":""},
{"lineNum":" 1530","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1531","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1532","line":"    inline bool"},
{"lineNum":" 1533","line":"    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,"},
{"lineNum":" 1534","line":"\t       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)"},
{"lineNum":" 1535","line":"    {"},
{"lineNum":" 1536","line":"      return __x.size() == __y.size()"},
{"lineNum":" 1537","line":"\t     && std::equal(__x.begin(), __x.end(), __y.begin());"},
{"lineNum":" 1538","line":"    }"},
{"lineNum":" 1539","line":""},
{"lineNum":" 1540","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1541","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1542","line":"    inline bool"},
{"lineNum":" 1543","line":"    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,"},
{"lineNum":" 1544","line":"\t      const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)"},
{"lineNum":" 1545","line":"    {"},
{"lineNum":" 1546","line":"      return std::lexicographical_compare(__x.begin(), __x.end(),"},
{"lineNum":" 1547","line":"\t\t\t\t\t  __y.begin(), __y.end());"},
{"lineNum":" 1548","line":"    }"},
{"lineNum":" 1549","line":""},
{"lineNum":" 1550","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1551","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1552","line":"    inline bool"},
{"lineNum":" 1553","line":"    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,"},
{"lineNum":" 1554","line":"\t       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)"},
{"lineNum":" 1555","line":"    { return !(__x == __y); }"},
{"lineNum":" 1556","line":""},
{"lineNum":" 1557","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1558","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1559","line":"    inline bool"},
{"lineNum":" 1560","line":"    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,"},
{"lineNum":" 1561","line":"\t      const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)"},
{"lineNum":" 1562","line":"    { return __y < __x; }"},
{"lineNum":" 1563","line":""},
{"lineNum":" 1564","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1565","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1566","line":"    inline bool"},
{"lineNum":" 1567","line":"    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,"},
{"lineNum":" 1568","line":"\t       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)"},
{"lineNum":" 1569","line":"    { return !(__y < __x); }"},
{"lineNum":" 1570","line":""},
{"lineNum":" 1571","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1572","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1573","line":"    inline bool"},
{"lineNum":" 1574","line":"    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,"},
{"lineNum":" 1575","line":"\t       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)"},
{"lineNum":" 1576","line":"    { return !(__x < __y); }"},
{"lineNum":" 1577","line":""},
{"lineNum":" 1578","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1579","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1580","line":"    inline void"},
{"lineNum":" 1581","line":"    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,"},
{"lineNum":" 1582","line":"\t _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)"},
{"lineNum":" 1583","line":"    { __x.swap(__y); }"},
{"lineNum":" 1584","line":""},
{"lineNum":" 1585","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1586","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1587","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1588","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 1589","line":"    _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)"},
{"lineNum":" 1590","line":"    : _M_impl(__x._M_impl._M_key_compare, std::move(__a))"},
{"lineNum":" 1591","line":"    {"},
{"lineNum":" 1592","line":"      using __eq = typename _Alloc_traits::is_always_equal;"},
{"lineNum":" 1593","line":"      if (__x._M_root() != nullptr)"},
{"lineNum":" 1594","line":"\t_M_move_data(__x, __eq());"},
{"lineNum":" 1595","line":"    }"},
{"lineNum":" 1596","line":""},
{"lineNum":" 1597","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1598","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1599","line":"    void"},
{"lineNum":" 1600","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 1601","line":"    _M_move_data(_Rb_tree& __x, std::false_type)"},
{"lineNum":" 1602","line":"    {"},
{"lineNum":" 1603","line":"      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())"},
{"lineNum":" 1604","line":"\t_M_move_data(__x, std::true_type());"},
{"lineNum":" 1605","line":"      else"},
{"lineNum":" 1606","line":"\t{"},
{"lineNum":" 1607","line":"\t  _Alloc_node __an(*this);"},
{"lineNum":" 1608","line":"\t  auto __lbd ="},
{"lineNum":" 1609","line":"\t    [&__an](const value_type& __cval)"},
{"lineNum":" 1610","line":"\t    {"},
{"lineNum":" 1611","line":"\t      auto& __val = const_cast<value_type&>(__cval);"},
{"lineNum":" 1612","line":"\t      return __an(std::move_if_noexcept(__val));"},
{"lineNum":" 1613","line":"\t    };"},
{"lineNum":" 1614","line":"\t  _M_root() = _M_copy(__x, __lbd);"},
{"lineNum":" 1615","line":"\t}"},
{"lineNum":" 1616","line":"    }"},
{"lineNum":" 1617","line":""},
{"lineNum":" 1618","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1619","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1620","line":"    inline void"},
{"lineNum":" 1621","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 1622","line":"    _M_move_assign(_Rb_tree& __x, true_type)"},
{"lineNum":" 1623","line":"    {"},
{"lineNum":" 1624","line":"      clear();"},
{"lineNum":" 1625","line":"      if (__x._M_root() != nullptr)"},
{"lineNum":" 1626","line":"\t_M_move_data(__x, std::true_type());"},
{"lineNum":" 1627","line":"      std::__alloc_on_move(_M_get_Node_allocator(),"},
{"lineNum":" 1628","line":"\t\t\t   __x._M_get_Node_allocator());"},
{"lineNum":" 1629","line":"    }"},
{"lineNum":" 1630","line":""},
{"lineNum":" 1631","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1632","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1633","line":"    void"},
{"lineNum":" 1634","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 1635","line":"    _M_move_assign(_Rb_tree& __x, false_type)"},
{"lineNum":" 1636","line":"    {"},
{"lineNum":" 1637","line":"      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())"},
{"lineNum":" 1638","line":"\treturn _M_move_assign(__x, true_type{});"},
{"lineNum":" 1639","line":""},
{"lineNum":" 1640","line":"      // Try to move each node reusing existing nodes and copying __x nodes"},
{"lineNum":" 1641","line":"      // structure."},
{"lineNum":" 1642","line":"      _Reuse_or_alloc_node __roan(*this);"},
{"lineNum":" 1643","line":"      _M_impl._M_reset();"},
{"lineNum":" 1644","line":"      if (__x._M_root() != nullptr)"},
{"lineNum":" 1645","line":"\t{"},
{"lineNum":" 1646","line":"\t  auto __lbd ="},
{"lineNum":" 1647","line":"\t    [&__roan](const value_type& __cval)"},
{"lineNum":" 1648","line":"\t    {"},
{"lineNum":" 1649","line":"\t      auto& __val = const_cast<value_type&>(__cval);"},
{"lineNum":" 1650","line":"\t      return __roan(std::move_if_noexcept(__val));"},
{"lineNum":" 1651","line":"\t    };"},
{"lineNum":" 1652","line":"\t  _M_root() = _M_copy(__x, __lbd);"},
{"lineNum":" 1653","line":"\t  __x.clear();"},
{"lineNum":" 1654","line":"\t}"},
{"lineNum":" 1655","line":"    }"},
{"lineNum":" 1656","line":""},
{"lineNum":" 1657","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1658","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1659","line":"    inline _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&"},
{"lineNum":" 1660","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 1661","line":"    operator=(_Rb_tree&& __x)"},
{"lineNum":" 1662","line":"    noexcept(_Alloc_traits::_S_nothrow_move()"},
{"lineNum":" 1663","line":"\t     && is_nothrow_move_assignable<_Compare>::value)"},
{"lineNum":" 1664","line":"    {"},
{"lineNum":" 1665","line":"      _M_impl._M_key_compare = std::move(__x._M_impl._M_key_compare);"},
{"lineNum":" 1666","line":"      _M_move_assign(__x, __bool_constant<_Alloc_traits::_S_nothrow_move()>());"},
{"lineNum":" 1667","line":"      return *this;"},
{"lineNum":" 1668","line":"    }"},
{"lineNum":" 1669","line":""},
{"lineNum":" 1670","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1671","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1672","line":"    template<typename _Iterator>"},
{"lineNum":" 1673","line":"      void"},
{"lineNum":" 1674","line":"      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 1675","line":"      _M_assign_unique(_Iterator __first, _Iterator __last)"},
{"lineNum":" 1676","line":"      {"},
{"lineNum":" 1677","line":"\t_Reuse_or_alloc_node __roan(*this);"},
{"lineNum":" 1678","line":"\t_M_impl._M_reset();"},
{"lineNum":" 1679","line":"\tfor (; __first != __last; ++__first)"},
{"lineNum":" 1680","line":"\t  _M_insert_unique_(end(), *__first, __roan);"},
{"lineNum":" 1681","line":"      }"},
{"lineNum":" 1682","line":""},
{"lineNum":" 1683","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1684","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1685","line":"    template<typename _Iterator>"},
{"lineNum":" 1686","line":"      void"},
{"lineNum":" 1687","line":"      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 1688","line":"      _M_assign_equal(_Iterator __first, _Iterator __last)"},
{"lineNum":" 1689","line":"      {"},
{"lineNum":" 1690","line":"\t_Reuse_or_alloc_node __roan(*this);"},
{"lineNum":" 1691","line":"\t_M_impl._M_reset();"},
{"lineNum":" 1692","line":"\tfor (; __first != __last; ++__first)"},
{"lineNum":" 1693","line":"\t  _M_insert_equal_(end(), *__first, __roan);"},
{"lineNum":" 1694","line":"      }"},
{"lineNum":" 1695","line":"#endif"},
{"lineNum":" 1696","line":""},
{"lineNum":" 1697","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1698","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1699","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&"},
{"lineNum":" 1700","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 1701","line":"    operator=(const _Rb_tree& __x)"},
{"lineNum":" 1702","line":"    {"},
{"lineNum":" 1703","line":"      if (this != &__x)"},
{"lineNum":" 1704","line":"\t{"},
{"lineNum":" 1705","line":"\t  // Note that _Key may be a constant type."},
{"lineNum":" 1706","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1707","line":"\t  if (_Alloc_traits::_S_propagate_on_copy_assign())"},
{"lineNum":" 1708","line":"\t    {"},
{"lineNum":" 1709","line":"\t      auto& __this_alloc = this->_M_get_Node_allocator();"},
{"lineNum":" 1710","line":"\t      auto& __that_alloc = __x._M_get_Node_allocator();"},
{"lineNum":" 1711","line":"\t      if (!_Alloc_traits::_S_always_equal()"},
{"lineNum":" 1712","line":"\t\t  && __this_alloc != __that_alloc)"},
{"lineNum":" 1713","line":"\t\t{"},
{"lineNum":" 1714","line":"\t\t  // Replacement allocator cannot free existing storage, we need"},
{"lineNum":" 1715","line":"\t\t  // to erase nodes first."},
{"lineNum":" 1716","line":"\t\t  clear();"},
{"lineNum":" 1717","line":"\t\t  std::__alloc_on_copy(__this_alloc, __that_alloc);"},
{"lineNum":" 1718","line":"\t\t}"},
{"lineNum":" 1719","line":"\t    }"},
{"lineNum":" 1720","line":"#endif"},
{"lineNum":" 1721","line":""},
{"lineNum":" 1722","line":"\t  _Reuse_or_alloc_node __roan(*this);"},
{"lineNum":" 1723","line":"\t  _M_impl._M_reset();"},
{"lineNum":" 1724","line":"\t  _M_impl._M_key_compare = __x._M_impl._M_key_compare;"},
{"lineNum":" 1725","line":"\t  if (__x._M_root() != 0)"},
{"lineNum":" 1726","line":"\t    _M_root() = _M_copy(__x, __roan);"},
{"lineNum":" 1727","line":"\t}"},
{"lineNum":" 1728","line":""},
{"lineNum":" 1729","line":"      return *this;"},
{"lineNum":" 1730","line":"    }"},
{"lineNum":" 1731","line":""},
{"lineNum":" 1732","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1733","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1734","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1735","line":"    template<typename _Arg, typename _NodeGen>"},
{"lineNum":" 1736","line":"#else"},
{"lineNum":" 1737","line":"    template<typename _NodeGen>"},
{"lineNum":" 1738","line":"#endif"},
{"lineNum":" 1739","line":"      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator"},
{"lineNum":" 1740","line":"      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::","class":"lineCov","hits":"2","order":"951","possible_hits":"2",},
{"lineNum":" 1741","line":"      _M_insert_(_Base_ptr __x, _Base_ptr __p,"},
{"lineNum":" 1742","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1743","line":"\t\t _Arg&& __v,"},
{"lineNum":" 1744","line":"#else"},
{"lineNum":" 1745","line":"\t\t const _Val& __v,"},
{"lineNum":" 1746","line":"#endif"},
{"lineNum":" 1747","line":"\t\t _NodeGen& __node_gen)"},
{"lineNum":" 1748","line":"      {"},
{"lineNum":" 1749","line":"\tbool __insert_left = (__x != 0 || __p == _M_end()","class":"lineCov","hits":"2","order":"953","possible_hits":"2",},
{"lineNum":" 1750","line":"\t\t\t      || _M_impl._M_key_compare(_KeyOfValue()(__v),","class":"lineCov","hits":"2","order":"952","possible_hits":"2",},
{"lineNum":" 1751","line":"\t\t\t\t\t\t\t_S_key(__p)));"},
{"lineNum":" 1752","line":""},
{"lineNum":" 1753","line":"\t_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));","class":"lineCov","hits":"1","order":"954","possible_hits":"1",},
{"lineNum":" 1754","line":""},
{"lineNum":" 1755","line":"\t_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,","class":"lineCov","hits":"1","order":"974","possible_hits":"1",},
{"lineNum":" 1756","line":"\t\t\t\t      this->_M_impl._M_header);"},
{"lineNum":" 1757","line":"\t++_M_impl._M_node_count;","class":"lineCov","hits":"1","order":"975","possible_hits":"1",},
{"lineNum":" 1758","line":"\treturn iterator(__z);","class":"lineCov","hits":"1","order":"976","possible_hits":"1",},
{"lineNum":" 1759","line":"      }","class":"linePartCov","hits":"1","order":"977","possible_hits":"2",},
{"lineNum":" 1760","line":""},
{"lineNum":" 1761","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1762","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1763","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1764","line":"    template<typename _Arg>"},
{"lineNum":" 1765","line":"#endif"},
{"lineNum":" 1766","line":"    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator"},
{"lineNum":" 1767","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 1768","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1769","line":"    _M_insert_lower(_Base_ptr __p, _Arg&& __v)"},
{"lineNum":" 1770","line":"#else"},
{"lineNum":" 1771","line":"    _M_insert_lower(_Base_ptr __p, const _Val& __v)"},
{"lineNum":" 1772","line":"#endif"},
{"lineNum":" 1773","line":"    {"},
{"lineNum":" 1774","line":"      bool __insert_left = (__p == _M_end()"},
{"lineNum":" 1775","line":"\t\t\t    || !_M_impl._M_key_compare(_S_key(__p),"},
{"lineNum":" 1776","line":"\t\t\t\t\t\t       _KeyOfValue()(__v)));"},
{"lineNum":" 1777","line":""},
{"lineNum":" 1778","line":"      _Link_type __z = _M_create_node(_GLIBCXX_FORWARD(_Arg, __v));"},
{"lineNum":" 1779","line":""},
{"lineNum":" 1780","line":"      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,"},
{"lineNum":" 1781","line":"\t\t\t\t    this->_M_impl._M_header);"},
{"lineNum":" 1782","line":"      ++_M_impl._M_node_count;"},
{"lineNum":" 1783","line":"      return iterator(__z);"},
{"lineNum":" 1784","line":"    }"},
{"lineNum":" 1785","line":""},
{"lineNum":" 1786","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1787","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1788","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1789","line":"    template<typename _Arg>"},
{"lineNum":" 1790","line":"#endif"},
{"lineNum":" 1791","line":"    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator"},
{"lineNum":" 1792","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 1793","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1794","line":"    _M_insert_equal_lower(_Arg&& __v)"},
{"lineNum":" 1795","line":"#else"},
{"lineNum":" 1796","line":"    _M_insert_equal_lower(const _Val& __v)"},
{"lineNum":" 1797","line":"#endif"},
{"lineNum":" 1798","line":"    {"},
{"lineNum":" 1799","line":"      _Link_type __x = _M_begin();"},
{"lineNum":" 1800","line":"      _Base_ptr __y = _M_end();"},
{"lineNum":" 1801","line":"      while (__x != 0)"},
{"lineNum":" 1802","line":"\t{"},
{"lineNum":" 1803","line":"\t  __y = __x;"},
{"lineNum":" 1804","line":"\t  __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?"},
{"lineNum":" 1805","line":"\t        _S_left(__x) : _S_right(__x);"},
{"lineNum":" 1806","line":"\t}"},
{"lineNum":" 1807","line":"      return _M_insert_lower(__y, _GLIBCXX_FORWARD(_Arg, __v));"},
{"lineNum":" 1808","line":"    }"},
{"lineNum":" 1809","line":""},
{"lineNum":" 1810","line":"  template<typename _Key, typename _Val, typename _KoV,"},
{"lineNum":" 1811","line":"\t   typename _Compare, typename _Alloc>"},
{"lineNum":" 1812","line":"    template<typename _NodeGen>"},
{"lineNum":" 1813","line":"      typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type"},
{"lineNum":" 1814","line":"      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::","class":"lineCov","hits":"1","order":"1416","possible_hits":"1",},
{"lineNum":" 1815","line":"      _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen& __node_gen)"},
{"lineNum":" 1816","line":"      {"},
{"lineNum":" 1817","line":"\t// Structural copy. __x and __p must be non-null."},
{"lineNum":" 1818","line":"\t_Link_type __top = _M_clone_node(__x, __node_gen);","class":"lineCov","hits":"1","order":"1417","possible_hits":"1",},
{"lineNum":" 1819","line":"\t__top->_M_parent = __p;","class":"lineCov","hits":"1","order":"1426","possible_hits":"1",},
{"lineNum":" 1820","line":""},
{"lineNum":" 1821","line":"\t__try"},
{"lineNum":" 1822","line":"\t  {"},
{"lineNum":" 1823","line":"\t    if (__x->_M_right)","class":"lineCov","hits":"1","order":"1427","possible_hits":"1",},
{"lineNum":" 1824","line":"\t      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);","class":"lineCov","hits":"1","order":"1482","possible_hits":"1",},
{"lineNum":" 1825","line":"\t    __p = __top;","class":"lineCov","hits":"1","order":"1428","possible_hits":"1",},
{"lineNum":" 1826","line":"\t    __x = _S_left(__x);","class":"lineCov","hits":"1","order":"1429","possible_hits":"1",},
{"lineNum":" 1827","line":""},
{"lineNum":" 1828","line":"\t    while (__x != 0)","class":"lineCov","hits":"2","order":"1432","possible_hits":"2",},
{"lineNum":" 1829","line":"\t      {"},
{"lineNum":" 1830","line":"\t\t_Link_type __y = _M_clone_node(__x, __node_gen);","class":"lineCov","hits":"1","order":"1485","possible_hits":"1",},
{"lineNum":" 1831","line":"\t\t__p->_M_left = __y;","class":"lineCov","hits":"1","order":"1486","possible_hits":"1",},
{"lineNum":" 1832","line":"\t\t__y->_M_parent = __p;","class":"lineCov","hits":"1","order":"1487","possible_hits":"1",},
{"lineNum":" 1833","line":"\t\tif (__x->_M_right)","class":"lineCov","hits":"1","order":"1488","possible_hits":"1",},
{"lineNum":" 1834","line":"\t\t  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1835","line":"\t\t__p = __y;","class":"lineCov","hits":"1","order":"1489","possible_hits":"1",},
{"lineNum":" 1836","line":"\t\t__x = _S_left(__x);","class":"lineCov","hits":"1","order":"1490","possible_hits":"1",},
{"lineNum":" 1837","line":"\t      }"},
{"lineNum":" 1838","line":"\t  }"},
{"lineNum":" 1839","line":"\t__catch(...)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1840","line":"\t  {"},
{"lineNum":" 1841","line":"\t    _M_erase(__top);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1842","line":"\t    __throw_exception_again;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1843","line":"\t  }"},
{"lineNum":" 1844","line":"\treturn __top;","class":"lineCov","hits":"1","order":"1433","possible_hits":"1",},
{"lineNum":" 1845","line":"      }","class":"linePartCov","hits":"1","order":"1434","possible_hits":"2",},
{"lineNum":" 1846","line":""},
{"lineNum":" 1847","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1848","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1849","line":"    void"},
{"lineNum":" 1850","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::","class":"lineCov","hits":"1","order":"788","possible_hits":"1",},
{"lineNum":" 1851","line":"    _M_erase(_Link_type __x)"},
{"lineNum":" 1852","line":"    {"},
{"lineNum":" 1853","line":"      // Erase without rebalancing."},
{"lineNum":" 1854","line":"      while (__x != 0)","class":"lineCov","hits":"2","order":"789","possible_hits":"2",},
{"lineNum":" 1855","line":"\t{"},
{"lineNum":" 1856","line":"\t  _M_erase(_S_right(__x));","class":"lineCov","hits":"1","order":"1466","possible_hits":"1",},
{"lineNum":" 1857","line":"\t  _Link_type __y = _S_left(__x);","class":"lineCov","hits":"1","order":"1467","possible_hits":"1",},
{"lineNum":" 1858","line":"\t  _M_drop_node(__x);","class":"lineCov","hits":"1","order":"1468","possible_hits":"1",},
{"lineNum":" 1859","line":"\t  __x = __y;","class":"lineCov","hits":"1","order":"1478","possible_hits":"1",},
{"lineNum":" 1860","line":"\t}"},
{"lineNum":" 1861","line":"    }","class":"linePartCov","hits":"1","order":"790","possible_hits":"2",},
{"lineNum":" 1862","line":""},
{"lineNum":" 1863","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1864","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1865","line":"    typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 1866","line":"\t\t      _Compare, _Alloc>::iterator"},
{"lineNum":" 1867","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::","class":"lineCov","hits":"2","order":"910","possible_hits":"2",},
{"lineNum":" 1868","line":"    _M_lower_bound(_Link_type __x, _Base_ptr __y,"},
{"lineNum":" 1869","line":"\t\t   const _Key& __k)"},
{"lineNum":" 1870","line":"    {"},
{"lineNum":" 1871","line":"      while (__x != 0)","class":"lineCov","hits":"2","order":"911","possible_hits":"2",},
{"lineNum":" 1872","line":"\tif (!_M_impl._M_key_compare(_S_key(__x), __k))","class":"lineCov","hits":"1","order":"1142","possible_hits":"1",},
{"lineNum":" 1873","line":"\t  __y = __x, __x = _S_left(__x);","class":"lineCov","hits":"1","order":"1290","possible_hits":"1",},
{"lineNum":" 1874","line":"\telse"},
{"lineNum":" 1875","line":"\t  __x = _S_right(__x);","class":"lineCov","hits":"1","order":"1186","possible_hits":"1",},
{"lineNum":" 1876","line":"      return iterator(__y);","class":"lineCov","hits":"1","order":"912","possible_hits":"1",},
{"lineNum":" 1877","line":"    }","class":"linePartCov","hits":"1","order":"913","possible_hits":"2",},
{"lineNum":" 1878","line":""},
{"lineNum":" 1879","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1880","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1881","line":"    typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 1882","line":"\t\t      _Compare, _Alloc>::const_iterator"},
{"lineNum":" 1883","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 1884","line":"    _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,"},
{"lineNum":" 1885","line":"\t\t   const _Key& __k) const"},
{"lineNum":" 1886","line":"    {"},
{"lineNum":" 1887","line":"      while (__x != 0)"},
{"lineNum":" 1888","line":"\tif (!_M_impl._M_key_compare(_S_key(__x), __k))"},
{"lineNum":" 1889","line":"\t  __y = __x, __x = _S_left(__x);"},
{"lineNum":" 1890","line":"\telse"},
{"lineNum":" 1891","line":"\t  __x = _S_right(__x);"},
{"lineNum":" 1892","line":"      return const_iterator(__y);"},
{"lineNum":" 1893","line":"    }"},
{"lineNum":" 1894","line":""},
{"lineNum":" 1895","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1896","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1897","line":"    typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 1898","line":"\t\t      _Compare, _Alloc>::iterator"},
{"lineNum":" 1899","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 1900","line":"    _M_upper_bound(_Link_type __x, _Base_ptr __y,"},
{"lineNum":" 1901","line":"\t\t   const _Key& __k)"},
{"lineNum":" 1902","line":"    {"},
{"lineNum":" 1903","line":"      while (__x != 0)"},
{"lineNum":" 1904","line":"\tif (_M_impl._M_key_compare(__k, _S_key(__x)))"},
{"lineNum":" 1905","line":"\t  __y = __x, __x = _S_left(__x);"},
{"lineNum":" 1906","line":"\telse"},
{"lineNum":" 1907","line":"\t  __x = _S_right(__x);"},
{"lineNum":" 1908","line":"      return iterator(__y);"},
{"lineNum":" 1909","line":"    }"},
{"lineNum":" 1910","line":""},
{"lineNum":" 1911","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1912","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1913","line":"    typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 1914","line":"\t\t      _Compare, _Alloc>::const_iterator"},
{"lineNum":" 1915","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 1916","line":"    _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,"},
{"lineNum":" 1917","line":"\t\t   const _Key& __k) const"},
{"lineNum":" 1918","line":"    {"},
{"lineNum":" 1919","line":"      while (__x != 0)"},
{"lineNum":" 1920","line":"\tif (_M_impl._M_key_compare(__k, _S_key(__x)))"},
{"lineNum":" 1921","line":"\t  __y = __x, __x = _S_left(__x);"},
{"lineNum":" 1922","line":"\telse"},
{"lineNum":" 1923","line":"\t  __x = _S_right(__x);"},
{"lineNum":" 1924","line":"      return const_iterator(__y);"},
{"lineNum":" 1925","line":"    }"},
{"lineNum":" 1926","line":""},
{"lineNum":" 1927","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1928","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1929","line":"    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 1930","line":"\t\t\t   _Compare, _Alloc>::iterator,"},
{"lineNum":" 1931","line":"\t typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 1932","line":"\t\t\t   _Compare, _Alloc>::iterator>"},
{"lineNum":" 1933","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 1934","line":"    equal_range(const _Key& __k)"},
{"lineNum":" 1935","line":"    {"},
{"lineNum":" 1936","line":"      _Link_type __x = _M_begin();"},
{"lineNum":" 1937","line":"      _Base_ptr __y = _M_end();"},
{"lineNum":" 1938","line":"      while (__x != 0)"},
{"lineNum":" 1939","line":"\t{"},
{"lineNum":" 1940","line":"\t  if (_M_impl._M_key_compare(_S_key(__x), __k))"},
{"lineNum":" 1941","line":"\t    __x = _S_right(__x);"},
{"lineNum":" 1942","line":"\t  else if (_M_impl._M_key_compare(__k, _S_key(__x)))"},
{"lineNum":" 1943","line":"\t    __y = __x, __x = _S_left(__x);"},
{"lineNum":" 1944","line":"\t  else"},
{"lineNum":" 1945","line":"\t    {"},
{"lineNum":" 1946","line":"\t      _Link_type __xu(__x);"},
{"lineNum":" 1947","line":"\t      _Base_ptr __yu(__y);"},
{"lineNum":" 1948","line":"\t      __y = __x, __x = _S_left(__x);"},
{"lineNum":" 1949","line":"\t      __xu = _S_right(__xu);"},
{"lineNum":" 1950","line":"\t      return pair<iterator,"},
{"lineNum":" 1951","line":"\t\t          iterator>(_M_lower_bound(__x, __y, __k),"},
{"lineNum":" 1952","line":"\t\t\t\t    _M_upper_bound(__xu, __yu, __k));"},
{"lineNum":" 1953","line":"\t    }"},
{"lineNum":" 1954","line":"\t}"},
{"lineNum":" 1955","line":"      return pair<iterator, iterator>(iterator(__y),"},
{"lineNum":" 1956","line":"\t\t\t\t      iterator(__y));"},
{"lineNum":" 1957","line":"    }"},
{"lineNum":" 1958","line":""},
{"lineNum":" 1959","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1960","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1961","line":"    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 1962","line":"\t\t\t   _Compare, _Alloc>::const_iterator,"},
{"lineNum":" 1963","line":"\t typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 1964","line":"\t\t\t   _Compare, _Alloc>::const_iterator>"},
{"lineNum":" 1965","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 1966","line":"    equal_range(const _Key& __k) const"},
{"lineNum":" 1967","line":"    {"},
{"lineNum":" 1968","line":"      _Const_Link_type __x = _M_begin();"},
{"lineNum":" 1969","line":"      _Const_Base_ptr __y = _M_end();"},
{"lineNum":" 1970","line":"      while (__x != 0)"},
{"lineNum":" 1971","line":"\t{"},
{"lineNum":" 1972","line":"\t  if (_M_impl._M_key_compare(_S_key(__x), __k))"},
{"lineNum":" 1973","line":"\t    __x = _S_right(__x);"},
{"lineNum":" 1974","line":"\t  else if (_M_impl._M_key_compare(__k, _S_key(__x)))"},
{"lineNum":" 1975","line":"\t    __y = __x, __x = _S_left(__x);"},
{"lineNum":" 1976","line":"\t  else"},
{"lineNum":" 1977","line":"\t    {"},
{"lineNum":" 1978","line":"\t      _Const_Link_type __xu(__x);"},
{"lineNum":" 1979","line":"\t      _Const_Base_ptr __yu(__y);"},
{"lineNum":" 1980","line":"\t      __y = __x, __x = _S_left(__x);"},
{"lineNum":" 1981","line":"\t      __xu = _S_right(__xu);"},
{"lineNum":" 1982","line":"\t      return pair<const_iterator,"},
{"lineNum":" 1983","line":"\t\t          const_iterator>(_M_lower_bound(__x, __y, __k),"},
{"lineNum":" 1984","line":"\t\t\t\t\t  _M_upper_bound(__xu, __yu, __k));"},
{"lineNum":" 1985","line":"\t    }"},
{"lineNum":" 1986","line":"\t}"},
{"lineNum":" 1987","line":"      return pair<const_iterator, const_iterator>(const_iterator(__y),"},
{"lineNum":" 1988","line":"\t\t\t\t\t\t  const_iterator(__y));"},
{"lineNum":" 1989","line":"    }"},
{"lineNum":" 1990","line":""},
{"lineNum":" 1991","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 1992","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 1993","line":"    void"},
{"lineNum":" 1994","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 1995","line":"    swap(_Rb_tree& __t)"},
{"lineNum":" 1996","line":"    _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value)"},
{"lineNum":" 1997","line":"    {"},
{"lineNum":" 1998","line":"      if (_M_root() == 0)"},
{"lineNum":" 1999","line":"\t{"},
{"lineNum":" 2000","line":"\t  if (__t._M_root() != 0)"},
{"lineNum":" 2001","line":"\t    _M_impl._M_move_data(__t._M_impl);"},
{"lineNum":" 2002","line":"\t}"},
{"lineNum":" 2003","line":"      else if (__t._M_root() == 0)"},
{"lineNum":" 2004","line":"\t__t._M_impl._M_move_data(_M_impl);"},
{"lineNum":" 2005","line":"      else"},
{"lineNum":" 2006","line":"\t{"},
{"lineNum":" 2007","line":"\t  std::swap(_M_root(),__t._M_root());"},
{"lineNum":" 2008","line":"\t  std::swap(_M_leftmost(),__t._M_leftmost());"},
{"lineNum":" 2009","line":"\t  std::swap(_M_rightmost(),__t._M_rightmost());"},
{"lineNum":" 2010","line":""},
{"lineNum":" 2011","line":"\t  _M_root()->_M_parent = _M_end();"},
{"lineNum":" 2012","line":"\t  __t._M_root()->_M_parent = __t._M_end();"},
{"lineNum":" 2013","line":"\t  std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);"},
{"lineNum":" 2014","line":"\t}"},
{"lineNum":" 2015","line":"      // No need to swap header\'s color as it does not change."},
{"lineNum":" 2016","line":"      std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);"},
{"lineNum":" 2017","line":""},
{"lineNum":" 2018","line":"      _Alloc_traits::_S_on_swap(_M_get_Node_allocator(),"},
{"lineNum":" 2019","line":"\t\t\t\t__t._M_get_Node_allocator());"},
{"lineNum":" 2020","line":"    }"},
{"lineNum":" 2021","line":""},
{"lineNum":" 2022","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2023","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2024","line":"    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 2025","line":"\t\t\t   _Compare, _Alloc>::_Base_ptr,"},
{"lineNum":" 2026","line":"\t typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 2027","line":"\t\t\t   _Compare, _Alloc>::_Base_ptr>"},
{"lineNum":" 2028","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::","class":"lineCov","hits":"2","order":"933","possible_hits":"2",},
{"lineNum":" 2029","line":"    _M_get_insert_unique_pos(const key_type& __k)"},
{"lineNum":" 2030","line":"    {"},
{"lineNum":" 2031","line":"      typedef pair<_Base_ptr, _Base_ptr> _Res;"},
{"lineNum":" 2032","line":"      _Link_type __x = _M_begin();","class":"lineCov","hits":"1","order":"934","possible_hits":"1",},
{"lineNum":" 2033","line":"      _Base_ptr __y = _M_end();","class":"lineCov","hits":"1","order":"935","possible_hits":"1",},
{"lineNum":" 2034","line":"      bool __comp = true;","class":"lineCov","hits":"1","order":"936","possible_hits":"1",},
{"lineNum":" 2035","line":"      while (__x != 0)","class":"lineCov","hits":"2","order":"937","possible_hits":"2",},
{"lineNum":" 2036","line":"\t{"},
{"lineNum":" 2037","line":"\t  __y = __x;","class":"lineCov","hits":"1","order":"1189","possible_hits":"1",},
{"lineNum":" 2038","line":"\t  __comp = _M_impl._M_key_compare(__k, _S_key(__x));","class":"lineCov","hits":"1","order":"1190","possible_hits":"1",},
{"lineNum":" 2039","line":"\t  __x = __comp ? _S_left(__x) : _S_right(__x);","class":"lineCov","hits":"1","order":"1191","possible_hits":"1",},
{"lineNum":" 2040","line":"\t}"},
{"lineNum":" 2041","line":"      iterator __j = iterator(__y);","class":"lineCov","hits":"1","order":"938","possible_hits":"1",},
{"lineNum":" 2042","line":"      if (__comp)","class":"lineCov","hits":"1","order":"939","possible_hits":"1",},
{"lineNum":" 2043","line":"\t{"},
{"lineNum":" 2044","line":"\t  if (__j == begin())","class":"lineCov","hits":"1","order":"940","possible_hits":"1",},
{"lineNum":" 2045","line":"\t    return _Res(__x, __y);","class":"lineCov","hits":"1","order":"943","possible_hits":"1",},
{"lineNum":" 2046","line":"\t  else"},
{"lineNum":" 2047","line":"\t    --__j;","class":"lineCov","hits":"1","order":"1294","possible_hits":"1",},
{"lineNum":" 2048","line":"\t}"},
{"lineNum":" 2049","line":"      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))","class":"lineCov","hits":"1","order":"1192","possible_hits":"1",},
{"lineNum":" 2050","line":"\treturn _Res(__x, __y);","class":"lineCov","hits":"1","order":"1197","possible_hits":"1",},
{"lineNum":" 2051","line":"      return _Res(__j._M_node, 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2052","line":"    }","class":"lineCov","hits":"1","order":"944","possible_hits":"1",},
{"lineNum":" 2053","line":""},
{"lineNum":" 2054","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2055","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2056","line":"    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 2057","line":"\t\t\t   _Compare, _Alloc>::_Base_ptr,"},
{"lineNum":" 2058","line":"\t typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 2059","line":"\t\t\t   _Compare, _Alloc>::_Base_ptr>"},
{"lineNum":" 2060","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2061","line":"    _M_get_insert_equal_pos(const key_type& __k)"},
{"lineNum":" 2062","line":"    {"},
{"lineNum":" 2063","line":"      typedef pair<_Base_ptr, _Base_ptr> _Res;"},
{"lineNum":" 2064","line":"      _Link_type __x = _M_begin();"},
{"lineNum":" 2065","line":"      _Base_ptr __y = _M_end();"},
{"lineNum":" 2066","line":"      while (__x != 0)"},
{"lineNum":" 2067","line":"\t{"},
{"lineNum":" 2068","line":"\t  __y = __x;"},
{"lineNum":" 2069","line":"\t  __x = _M_impl._M_key_compare(__k, _S_key(__x)) ?"},
{"lineNum":" 2070","line":"\t        _S_left(__x) : _S_right(__x);"},
{"lineNum":" 2071","line":"\t}"},
{"lineNum":" 2072","line":"      return _Res(__x, __y);"},
{"lineNum":" 2073","line":"    }"},
{"lineNum":" 2074","line":""},
{"lineNum":" 2075","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2076","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2077","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 2078","line":"    template<typename _Arg>"},
{"lineNum":" 2079","line":"#endif"},
{"lineNum":" 2080","line":"    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 2081","line":"\t\t\t   _Compare, _Alloc>::iterator, bool>"},
{"lineNum":" 2082","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::","class":"lineCov","hits":"2","order":"928","possible_hits":"2",},
{"lineNum":" 2083","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 2084","line":"    _M_insert_unique(_Arg&& __v)"},
{"lineNum":" 2085","line":"#else"},
{"lineNum":" 2086","line":"    _M_insert_unique(const _Val& __v)"},
{"lineNum":" 2087","line":"#endif"},
{"lineNum":" 2088","line":"    {"},
{"lineNum":" 2089","line":"      typedef pair<iterator, bool> _Res;"},
{"lineNum":" 2090","line":"      pair<_Base_ptr, _Base_ptr> __res","class":"lineCov","hits":"1","order":"932","possible_hits":"1",},
{"lineNum":" 2091","line":"\t= _M_get_insert_unique_pos(_KeyOfValue()(__v));","class":"lineCov","hits":"1","order":"929","possible_hits":"1",},
{"lineNum":" 2092","line":""},
{"lineNum":" 2093","line":"      if (__res.second)","class":"lineCov","hits":"1","order":"945","possible_hits":"1",},
{"lineNum":" 2094","line":"\t{"},
{"lineNum":" 2095","line":"\t  _Alloc_node __an(*this);","class":"lineCov","hits":"1","order":"946","possible_hits":"1",},
{"lineNum":" 2096","line":"\t  return _Res(_M_insert_(__res.first, __res.second,","class":"lineCov","hits":"1","order":"950","possible_hits":"1",},
{"lineNum":" 2097","line":"\t\t\t\t _GLIBCXX_FORWARD(_Arg, __v), __an),"},
{"lineNum":" 2098","line":"\t\t      true);","class":"lineCov","hits":"2","order":"949","possible_hits":"2",},
{"lineNum":" 2099","line":"\t}"},
{"lineNum":" 2100","line":""},
{"lineNum":" 2101","line":"      return _Res(iterator(__res.first), false);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2102","line":"    }","class":"lineCov","hits":"1","order":"978","possible_hits":"1",},
{"lineNum":" 2103","line":""},
{"lineNum":" 2104","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2105","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2106","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 2107","line":"    template<typename _Arg>"},
{"lineNum":" 2108","line":"#endif"},
{"lineNum":" 2109","line":"    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator"},
{"lineNum":" 2110","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2111","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 2112","line":"    _M_insert_equal(_Arg&& __v)"},
{"lineNum":" 2113","line":"#else"},
{"lineNum":" 2114","line":"    _M_insert_equal(const _Val& __v)"},
{"lineNum":" 2115","line":"#endif"},
{"lineNum":" 2116","line":"    {"},
{"lineNum":" 2117","line":"      pair<_Base_ptr, _Base_ptr> __res"},
{"lineNum":" 2118","line":"\t= _M_get_insert_equal_pos(_KeyOfValue()(__v));"},
{"lineNum":" 2119","line":"      _Alloc_node __an(*this);"},
{"lineNum":" 2120","line":"      return _M_insert_(__res.first, __res.second,"},
{"lineNum":" 2121","line":"\t\t\t_GLIBCXX_FORWARD(_Arg, __v), __an);"},
{"lineNum":" 2122","line":"    }"},
{"lineNum":" 2123","line":""},
{"lineNum":" 2124","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2125","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2126","line":"    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 2127","line":"\t\t\t   _Compare, _Alloc>::_Base_ptr,"},
{"lineNum":" 2128","line":"         typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 2129","line":"\t\t\t   _Compare, _Alloc>::_Base_ptr>"},
{"lineNum":" 2130","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2131","line":"    _M_get_insert_hint_unique_pos(const_iterator __position,"},
{"lineNum":" 2132","line":"\t\t\t\t  const key_type& __k)"},
{"lineNum":" 2133","line":"    {"},
{"lineNum":" 2134","line":"      iterator __pos = __position._M_const_cast();"},
{"lineNum":" 2135","line":"      typedef pair<_Base_ptr, _Base_ptr> _Res;"},
{"lineNum":" 2136","line":""},
{"lineNum":" 2137","line":"      // end()"},
{"lineNum":" 2138","line":"      if (__pos._M_node == _M_end())"},
{"lineNum":" 2139","line":"\t{"},
{"lineNum":" 2140","line":"\t  if (size() > 0"},
{"lineNum":" 2141","line":"\t      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))"},
{"lineNum":" 2142","line":"\t    return _Res(0, _M_rightmost());"},
{"lineNum":" 2143","line":"\t  else"},
{"lineNum":" 2144","line":"\t    return _M_get_insert_unique_pos(__k);"},
{"lineNum":" 2145","line":"\t}"},
{"lineNum":" 2146","line":"      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))"},
{"lineNum":" 2147","line":"\t{"},
{"lineNum":" 2148","line":"\t  // First, try before..."},
{"lineNum":" 2149","line":"\t  iterator __before = __pos;"},
{"lineNum":" 2150","line":"\t  if (__pos._M_node == _M_leftmost()) // begin()"},
{"lineNum":" 2151","line":"\t    return _Res(_M_leftmost(), _M_leftmost());"},
{"lineNum":" 2152","line":"\t  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))"},
{"lineNum":" 2153","line":"\t    {"},
{"lineNum":" 2154","line":"\t      if (_S_right(__before._M_node) == 0)"},
{"lineNum":" 2155","line":"\t\treturn _Res(0, __before._M_node);"},
{"lineNum":" 2156","line":"\t      else"},
{"lineNum":" 2157","line":"\t\treturn _Res(__pos._M_node, __pos._M_node);"},
{"lineNum":" 2158","line":"\t    }"},
{"lineNum":" 2159","line":"\t  else"},
{"lineNum":" 2160","line":"\t    return _M_get_insert_unique_pos(__k);"},
{"lineNum":" 2161","line":"\t}"},
{"lineNum":" 2162","line":"      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))"},
{"lineNum":" 2163","line":"\t{"},
{"lineNum":" 2164","line":"\t  // ... then try after."},
{"lineNum":" 2165","line":"\t  iterator __after = __pos;"},
{"lineNum":" 2166","line":"\t  if (__pos._M_node == _M_rightmost())"},
{"lineNum":" 2167","line":"\t    return _Res(0, _M_rightmost());"},
{"lineNum":" 2168","line":"\t  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))"},
{"lineNum":" 2169","line":"\t    {"},
{"lineNum":" 2170","line":"\t      if (_S_right(__pos._M_node) == 0)"},
{"lineNum":" 2171","line":"\t\treturn _Res(0, __pos._M_node);"},
{"lineNum":" 2172","line":"\t      else"},
{"lineNum":" 2173","line":"\t\treturn _Res(__after._M_node, __after._M_node);"},
{"lineNum":" 2174","line":"\t    }"},
{"lineNum":" 2175","line":"\t  else"},
{"lineNum":" 2176","line":"\t    return _M_get_insert_unique_pos(__k);"},
{"lineNum":" 2177","line":"\t}"},
{"lineNum":" 2178","line":"      else"},
{"lineNum":" 2179","line":"\t// Equivalent keys."},
{"lineNum":" 2180","line":"\treturn _Res(__pos._M_node, 0);"},
{"lineNum":" 2181","line":"    }"},
{"lineNum":" 2182","line":""},
{"lineNum":" 2183","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2184","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2185","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 2186","line":"    template<typename _Arg, typename _NodeGen>"},
{"lineNum":" 2187","line":"#else"},
{"lineNum":" 2188","line":"    template<typename _NodeGen>"},
{"lineNum":" 2189","line":"#endif"},
{"lineNum":" 2190","line":"      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator"},
{"lineNum":" 2191","line":"      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2192","line":"      _M_insert_unique_(const_iterator __position,"},
{"lineNum":" 2193","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 2194","line":"\t\t\t_Arg&& __v,"},
{"lineNum":" 2195","line":"#else"},
{"lineNum":" 2196","line":"\t\t\tconst _Val& __v,"},
{"lineNum":" 2197","line":"#endif"},
{"lineNum":" 2198","line":"\t\t\t_NodeGen& __node_gen)"},
{"lineNum":" 2199","line":"    {"},
{"lineNum":" 2200","line":"      pair<_Base_ptr, _Base_ptr> __res"},
{"lineNum":" 2201","line":"\t= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));"},
{"lineNum":" 2202","line":""},
{"lineNum":" 2203","line":"      if (__res.second)"},
{"lineNum":" 2204","line":"\treturn _M_insert_(__res.first, __res.second,"},
{"lineNum":" 2205","line":"\t\t\t  _GLIBCXX_FORWARD(_Arg, __v),"},
{"lineNum":" 2206","line":"\t\t\t  __node_gen);"},
{"lineNum":" 2207","line":"      return iterator(__res.first);"},
{"lineNum":" 2208","line":"    }"},
{"lineNum":" 2209","line":""},
{"lineNum":" 2210","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2211","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2212","line":"    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 2213","line":"\t\t\t   _Compare, _Alloc>::_Base_ptr,"},
{"lineNum":" 2214","line":"         typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 2215","line":"\t\t\t   _Compare, _Alloc>::_Base_ptr>"},
{"lineNum":" 2216","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2217","line":"    _M_get_insert_hint_equal_pos(const_iterator __position, const key_type& __k)"},
{"lineNum":" 2218","line":"    {"},
{"lineNum":" 2219","line":"      iterator __pos = __position._M_const_cast();"},
{"lineNum":" 2220","line":"      typedef pair<_Base_ptr, _Base_ptr> _Res;"},
{"lineNum":" 2221","line":""},
{"lineNum":" 2222","line":"      // end()"},
{"lineNum":" 2223","line":"      if (__pos._M_node == _M_end())"},
{"lineNum":" 2224","line":"\t{"},
{"lineNum":" 2225","line":"\t  if (size() > 0"},
{"lineNum":" 2226","line":"\t      && !_M_impl._M_key_compare(__k, _S_key(_M_rightmost())))"},
{"lineNum":" 2227","line":"\t    return _Res(0, _M_rightmost());"},
{"lineNum":" 2228","line":"\t  else"},
{"lineNum":" 2229","line":"\t    return _M_get_insert_equal_pos(__k);"},
{"lineNum":" 2230","line":"\t}"},
{"lineNum":" 2231","line":"      else if (!_M_impl._M_key_compare(_S_key(__pos._M_node), __k))"},
{"lineNum":" 2232","line":"\t{"},
{"lineNum":" 2233","line":"\t  // First, try before..."},
{"lineNum":" 2234","line":"\t  iterator __before = __pos;"},
{"lineNum":" 2235","line":"\t  if (__pos._M_node == _M_leftmost()) // begin()"},
{"lineNum":" 2236","line":"\t    return _Res(_M_leftmost(), _M_leftmost());"},
{"lineNum":" 2237","line":"\t  else if (!_M_impl._M_key_compare(__k, _S_key((--__before)._M_node)))"},
{"lineNum":" 2238","line":"\t    {"},
{"lineNum":" 2239","line":"\t      if (_S_right(__before._M_node) == 0)"},
{"lineNum":" 2240","line":"\t\treturn _Res(0, __before._M_node);"},
{"lineNum":" 2241","line":"\t      else"},
{"lineNum":" 2242","line":"\t\treturn _Res(__pos._M_node, __pos._M_node);"},
{"lineNum":" 2243","line":"\t    }"},
{"lineNum":" 2244","line":"\t  else"},
{"lineNum":" 2245","line":"\t    return _M_get_insert_equal_pos(__k);"},
{"lineNum":" 2246","line":"\t}"},
{"lineNum":" 2247","line":"      else"},
{"lineNum":" 2248","line":"\t{"},
{"lineNum":" 2249","line":"\t  // ... then try after."},
{"lineNum":" 2250","line":"\t  iterator __after = __pos;"},
{"lineNum":" 2251","line":"\t  if (__pos._M_node == _M_rightmost())"},
{"lineNum":" 2252","line":"\t    return _Res(0, _M_rightmost());"},
{"lineNum":" 2253","line":"\t  else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node), __k))"},
{"lineNum":" 2254","line":"\t    {"},
{"lineNum":" 2255","line":"\t      if (_S_right(__pos._M_node) == 0)"},
{"lineNum":" 2256","line":"\t\treturn _Res(0, __pos._M_node);"},
{"lineNum":" 2257","line":"\t      else"},
{"lineNum":" 2258","line":"\t\treturn _Res(__after._M_node, __after._M_node);"},
{"lineNum":" 2259","line":"\t    }"},
{"lineNum":" 2260","line":"\t  else"},
{"lineNum":" 2261","line":"\t    return _Res(0, 0);"},
{"lineNum":" 2262","line":"\t}"},
{"lineNum":" 2263","line":"    }"},
{"lineNum":" 2264","line":""},
{"lineNum":" 2265","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2266","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2267","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 2268","line":"    template<typename _Arg, typename _NodeGen>"},
{"lineNum":" 2269","line":"#else"},
{"lineNum":" 2270","line":"    template<typename _NodeGen>"},
{"lineNum":" 2271","line":"#endif"},
{"lineNum":" 2272","line":"      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator"},
{"lineNum":" 2273","line":"      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2274","line":"      _M_insert_equal_(const_iterator __position,"},
{"lineNum":" 2275","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 2276","line":"\t\t       _Arg&& __v,"},
{"lineNum":" 2277","line":"#else"},
{"lineNum":" 2278","line":"\t\t       const _Val& __v,"},
{"lineNum":" 2279","line":"#endif"},
{"lineNum":" 2280","line":"\t\t       _NodeGen& __node_gen)"},
{"lineNum":" 2281","line":"      {"},
{"lineNum":" 2282","line":"\tpair<_Base_ptr, _Base_ptr> __res"},
{"lineNum":" 2283","line":"\t  = _M_get_insert_hint_equal_pos(__position, _KeyOfValue()(__v));"},
{"lineNum":" 2284","line":""},
{"lineNum":" 2285","line":"\tif (__res.second)"},
{"lineNum":" 2286","line":"\t  return _M_insert_(__res.first, __res.second,"},
{"lineNum":" 2287","line":"\t\t\t    _GLIBCXX_FORWARD(_Arg, __v),"},
{"lineNum":" 2288","line":"\t\t\t    __node_gen);"},
{"lineNum":" 2289","line":""},
{"lineNum":" 2290","line":"\treturn _M_insert_equal_lower(_GLIBCXX_FORWARD(_Arg, __v));"},
{"lineNum":" 2291","line":"      }"},
{"lineNum":" 2292","line":""},
{"lineNum":" 2293","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 2294","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2295","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2296","line":"    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator"},
{"lineNum":" 2297","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2298","line":"    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)"},
{"lineNum":" 2299","line":"    {"},
{"lineNum":" 2300","line":"      bool __insert_left = (__x != 0 || __p == _M_end()"},
{"lineNum":" 2301","line":"\t\t\t    || _M_impl._M_key_compare(_S_key(__z),"},
{"lineNum":" 2302","line":"\t\t\t\t\t\t      _S_key(__p)));"},
{"lineNum":" 2303","line":""},
{"lineNum":" 2304","line":"      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,"},
{"lineNum":" 2305","line":"\t\t\t\t    this->_M_impl._M_header);"},
{"lineNum":" 2306","line":"      ++_M_impl._M_node_count;"},
{"lineNum":" 2307","line":"      return iterator(__z);"},
{"lineNum":" 2308","line":"    }"},
{"lineNum":" 2309","line":""},
{"lineNum":" 2310","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2311","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2312","line":"    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator"},
{"lineNum":" 2313","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2314","line":"    _M_insert_lower_node(_Base_ptr __p, _Link_type __z)"},
{"lineNum":" 2315","line":"    {"},
{"lineNum":" 2316","line":"      bool __insert_left = (__p == _M_end()"},
{"lineNum":" 2317","line":"\t\t\t    || !_M_impl._M_key_compare(_S_key(__p),"},
{"lineNum":" 2318","line":"\t\t\t\t\t\t       _S_key(__z)));"},
{"lineNum":" 2319","line":""},
{"lineNum":" 2320","line":"      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,"},
{"lineNum":" 2321","line":"\t\t\t\t    this->_M_impl._M_header);"},
{"lineNum":" 2322","line":"      ++_M_impl._M_node_count;"},
{"lineNum":" 2323","line":"      return iterator(__z);"},
{"lineNum":" 2324","line":"    }"},
{"lineNum":" 2325","line":""},
{"lineNum":" 2326","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2327","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2328","line":"    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator"},
{"lineNum":" 2329","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2330","line":"    _M_insert_equal_lower_node(_Link_type __z)"},
{"lineNum":" 2331","line":"    {"},
{"lineNum":" 2332","line":"      _Link_type __x = _M_begin();"},
{"lineNum":" 2333","line":"      _Base_ptr __y = _M_end();"},
{"lineNum":" 2334","line":"      while (__x != 0)"},
{"lineNum":" 2335","line":"\t{"},
{"lineNum":" 2336","line":"\t  __y = __x;"},
{"lineNum":" 2337","line":"\t  __x = !_M_impl._M_key_compare(_S_key(__x), _S_key(__z)) ?"},
{"lineNum":" 2338","line":"\t        _S_left(__x) : _S_right(__x);"},
{"lineNum":" 2339","line":"\t}"},
{"lineNum":" 2340","line":"      return _M_insert_lower_node(__y, __z);"},
{"lineNum":" 2341","line":"    }"},
{"lineNum":" 2342","line":""},
{"lineNum":" 2343","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2344","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2345","line":"    template<typename... _Args>"},
{"lineNum":" 2346","line":"      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 2347","line":"\t\t\t     _Compare, _Alloc>::iterator, bool>"},
{"lineNum":" 2348","line":"      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2349","line":"      _M_emplace_unique(_Args&&... __args)"},
{"lineNum":" 2350","line":"      {"},
{"lineNum":" 2351","line":"\t_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);"},
{"lineNum":" 2352","line":""},
{"lineNum":" 2353","line":"\t__try"},
{"lineNum":" 2354","line":"\t  {"},
{"lineNum":" 2355","line":"\t    typedef pair<iterator, bool> _Res;"},
{"lineNum":" 2356","line":"\t    auto __res = _M_get_insert_unique_pos(_S_key(__z));"},
{"lineNum":" 2357","line":"\t    if (__res.second)"},
{"lineNum":" 2358","line":"\t      return _Res(_M_insert_node(__res.first, __res.second, __z), true);"},
{"lineNum":" 2359","line":""},
{"lineNum":" 2360","line":"\t    _M_drop_node(__z);"},
{"lineNum":" 2361","line":"\t    return _Res(iterator(__res.first), false);"},
{"lineNum":" 2362","line":"\t  }"},
{"lineNum":" 2363","line":"\t__catch(...)"},
{"lineNum":" 2364","line":"\t  {"},
{"lineNum":" 2365","line":"\t    _M_drop_node(__z);"},
{"lineNum":" 2366","line":"\t    __throw_exception_again;"},
{"lineNum":" 2367","line":"\t  }"},
{"lineNum":" 2368","line":"      }"},
{"lineNum":" 2369","line":""},
{"lineNum":" 2370","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2371","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2372","line":"    template<typename... _Args>"},
{"lineNum":" 2373","line":"      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator"},
{"lineNum":" 2374","line":"      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2375","line":"      _M_emplace_equal(_Args&&... __args)"},
{"lineNum":" 2376","line":"      {"},
{"lineNum":" 2377","line":"\t_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);"},
{"lineNum":" 2378","line":""},
{"lineNum":" 2379","line":"\t__try"},
{"lineNum":" 2380","line":"\t  {"},
{"lineNum":" 2381","line":"\t    auto __res = _M_get_insert_equal_pos(_S_key(__z));"},
{"lineNum":" 2382","line":"\t    return _M_insert_node(__res.first, __res.second, __z);"},
{"lineNum":" 2383","line":"\t  }"},
{"lineNum":" 2384","line":"\t__catch(...)"},
{"lineNum":" 2385","line":"\t  {"},
{"lineNum":" 2386","line":"\t    _M_drop_node(__z);"},
{"lineNum":" 2387","line":"\t    __throw_exception_again;"},
{"lineNum":" 2388","line":"\t  }"},
{"lineNum":" 2389","line":"      }"},
{"lineNum":" 2390","line":""},
{"lineNum":" 2391","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2392","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2393","line":"    template<typename... _Args>"},
{"lineNum":" 2394","line":"      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator"},
{"lineNum":" 2395","line":"      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2396","line":"      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)"},
{"lineNum":" 2397","line":"      {"},
{"lineNum":" 2398","line":"\t_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);"},
{"lineNum":" 2399","line":""},
{"lineNum":" 2400","line":"\t__try"},
{"lineNum":" 2401","line":"\t  {"},
{"lineNum":" 2402","line":"\t    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));"},
{"lineNum":" 2403","line":""},
{"lineNum":" 2404","line":"\t    if (__res.second)"},
{"lineNum":" 2405","line":"\t      return _M_insert_node(__res.first, __res.second, __z);"},
{"lineNum":" 2406","line":""},
{"lineNum":" 2407","line":"\t    _M_drop_node(__z);"},
{"lineNum":" 2408","line":"\t    return iterator(__res.first);"},
{"lineNum":" 2409","line":"\t  }"},
{"lineNum":" 2410","line":"\t__catch(...)"},
{"lineNum":" 2411","line":"\t  {"},
{"lineNum":" 2412","line":"\t    _M_drop_node(__z);"},
{"lineNum":" 2413","line":"\t    __throw_exception_again;"},
{"lineNum":" 2414","line":"\t  }"},
{"lineNum":" 2415","line":"      }"},
{"lineNum":" 2416","line":""},
{"lineNum":" 2417","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2418","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2419","line":"    template<typename... _Args>"},
{"lineNum":" 2420","line":"      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator"},
{"lineNum":" 2421","line":"      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2422","line":"      _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args)"},
{"lineNum":" 2423","line":"      {"},
{"lineNum":" 2424","line":"\t_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);"},
{"lineNum":" 2425","line":""},
{"lineNum":" 2426","line":"\t__try"},
{"lineNum":" 2427","line":"\t  {"},
{"lineNum":" 2428","line":"\t    auto __res = _M_get_insert_hint_equal_pos(__pos, _S_key(__z));"},
{"lineNum":" 2429","line":""},
{"lineNum":" 2430","line":"\t    if (__res.second)"},
{"lineNum":" 2431","line":"\t      return _M_insert_node(__res.first, __res.second, __z);"},
{"lineNum":" 2432","line":""},
{"lineNum":" 2433","line":"\t    return _M_insert_equal_lower_node(__z);"},
{"lineNum":" 2434","line":"\t  }"},
{"lineNum":" 2435","line":"\t__catch(...)"},
{"lineNum":" 2436","line":"\t  {"},
{"lineNum":" 2437","line":"\t    _M_drop_node(__z);"},
{"lineNum":" 2438","line":"\t    __throw_exception_again;"},
{"lineNum":" 2439","line":"\t  }"},
{"lineNum":" 2440","line":"      }"},
{"lineNum":" 2441","line":"#endif"},
{"lineNum":" 2442","line":""},
{"lineNum":" 2443","line":"  template<typename _Key, typename _Val, typename _KoV,"},
{"lineNum":" 2444","line":"           typename _Cmp, typename _Alloc>"},
{"lineNum":" 2445","line":"    template<class _II>"},
{"lineNum":" 2446","line":"      void"},
{"lineNum":" 2447","line":"      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::"},
{"lineNum":" 2448","line":"      _M_insert_unique(_II __first, _II __last)"},
{"lineNum":" 2449","line":"      {"},
{"lineNum":" 2450","line":"\t_Alloc_node __an(*this);"},
{"lineNum":" 2451","line":"\tfor (; __first != __last; ++__first)"},
{"lineNum":" 2452","line":"\t  _M_insert_unique_(end(), *__first, __an);"},
{"lineNum":" 2453","line":"      }"},
{"lineNum":" 2454","line":""},
{"lineNum":" 2455","line":"  template<typename _Key, typename _Val, typename _KoV,"},
{"lineNum":" 2456","line":"           typename _Cmp, typename _Alloc>"},
{"lineNum":" 2457","line":"    template<class _II>"},
{"lineNum":" 2458","line":"      void"},
{"lineNum":" 2459","line":"      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::"},
{"lineNum":" 2460","line":"      _M_insert_equal(_II __first, _II __last)"},
{"lineNum":" 2461","line":"      {"},
{"lineNum":" 2462","line":"\t_Alloc_node __an(*this);"},
{"lineNum":" 2463","line":"\tfor (; __first != __last; ++__first)"},
{"lineNum":" 2464","line":"\t  _M_insert_equal_(end(), *__first, __an);"},
{"lineNum":" 2465","line":"      }"},
{"lineNum":" 2466","line":""},
{"lineNum":" 2467","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2468","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2469","line":"    void"},
{"lineNum":" 2470","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2471","line":"    _M_erase_aux(const_iterator __position)"},
{"lineNum":" 2472","line":"    {"},
{"lineNum":" 2473","line":"      _Link_type __y ="},
{"lineNum":" 2474","line":"\tstatic_cast<_Link_type>(_Rb_tree_rebalance_for_erase"},
{"lineNum":" 2475","line":"\t\t\t\t(const_cast<_Base_ptr>(__position._M_node),"},
{"lineNum":" 2476","line":"\t\t\t\t this->_M_impl._M_header));"},
{"lineNum":" 2477","line":"      _M_drop_node(__y);"},
{"lineNum":" 2478","line":"      --_M_impl._M_node_count;"},
{"lineNum":" 2479","line":"    }"},
{"lineNum":" 2480","line":""},
{"lineNum":" 2481","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2482","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2483","line":"    void"},
{"lineNum":" 2484","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2485","line":"    _M_erase_aux(const_iterator __first, const_iterator __last)"},
{"lineNum":" 2486","line":"    {"},
{"lineNum":" 2487","line":"      if (__first == begin() && __last == end())"},
{"lineNum":" 2488","line":"\tclear();"},
{"lineNum":" 2489","line":"      else"},
{"lineNum":" 2490","line":"\twhile (__first != __last)"},
{"lineNum":" 2491","line":"\t  _M_erase_aux(__first++);"},
{"lineNum":" 2492","line":"    }"},
{"lineNum":" 2493","line":""},
{"lineNum":" 2494","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2495","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2496","line":"    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type"},
{"lineNum":" 2497","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2498","line":"    erase(const _Key& __x)"},
{"lineNum":" 2499","line":"    {"},
{"lineNum":" 2500","line":"      pair<iterator, iterator> __p = equal_range(__x);"},
{"lineNum":" 2501","line":"      const size_type __old_size = size();"},
{"lineNum":" 2502","line":"      _M_erase_aux(__p.first, __p.second);"},
{"lineNum":" 2503","line":"      return __old_size - size();"},
{"lineNum":" 2504","line":"    }"},
{"lineNum":" 2505","line":""},
{"lineNum":" 2506","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2507","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2508","line":"    void"},
{"lineNum":" 2509","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2510","line":"    erase(const _Key* __first, const _Key* __last)"},
{"lineNum":" 2511","line":"    {"},
{"lineNum":" 2512","line":"      while (__first != __last)"},
{"lineNum":" 2513","line":"\terase(*__first++);"},
{"lineNum":" 2514","line":"    }"},
{"lineNum":" 2515","line":""},
{"lineNum":" 2516","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2517","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2518","line":"    typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 2519","line":"\t\t      _Compare, _Alloc>::iterator"},
{"lineNum":" 2520","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::","class":"lineCov","hits":"2","order":"906","possible_hits":"2",},
{"lineNum":" 2521","line":"    find(const _Key& __k)"},
{"lineNum":" 2522","line":"    {"},
{"lineNum":" 2523","line":"      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);","class":"lineCov","hits":"1","order":"907","possible_hits":"1",},
{"lineNum":" 2524","line":"      return (__j == end()","class":"lineCov","hits":"1","order":"914","possible_hits":"1",},
{"lineNum":" 2525","line":"\t      || _M_impl._M_key_compare(__k,","class":"lineCov","hits":"2","order":"1293","possible_hits":"2",},
{"lineNum":" 2526","line":"\t\t\t\t\t_S_key(__j._M_node))) ? end() : __j;","class":"lineCov","hits":"3","order":"917","possible_hits":"3",},
{"lineNum":" 2527","line":"    }","class":"linePartCov","hits":"1","order":"918","possible_hits":"2",},
{"lineNum":" 2528","line":""},
{"lineNum":" 2529","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2530","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2531","line":"    typename _Rb_tree<_Key, _Val, _KeyOfValue,"},
{"lineNum":" 2532","line":"\t\t      _Compare, _Alloc>::const_iterator"},
{"lineNum":" 2533","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2534","line":"    find(const _Key& __k) const"},
{"lineNum":" 2535","line":"    {"},
{"lineNum":" 2536","line":"      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);"},
{"lineNum":" 2537","line":"      return (__j == end()"},
{"lineNum":" 2538","line":"\t      || _M_impl._M_key_compare(__k,"},
{"lineNum":" 2539","line":"\t\t\t\t\t_S_key(__j._M_node))) ? end() : __j;"},
{"lineNum":" 2540","line":"    }"},
{"lineNum":" 2541","line":""},
{"lineNum":" 2542","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2543","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2544","line":"    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type"},
{"lineNum":" 2545","line":"    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::"},
{"lineNum":" 2546","line":"    count(const _Key& __k) const"},
{"lineNum":" 2547","line":"    {"},
{"lineNum":" 2548","line":"      pair<const_iterator, const_iterator> __p = equal_range(__k);"},
{"lineNum":" 2549","line":"      const size_type __n = std::distance(__p.first, __p.second);"},
{"lineNum":" 2550","line":"      return __n;"},
{"lineNum":" 2551","line":"    }"},
{"lineNum":" 2552","line":""},
{"lineNum":" 2553","line":"  _GLIBCXX_PURE unsigned int"},
{"lineNum":" 2554","line":"  _Rb_tree_black_count(const _Rb_tree_node_base* __node,"},
{"lineNum":" 2555","line":"                       const _Rb_tree_node_base* __root) throw ();"},
{"lineNum":" 2556","line":""},
{"lineNum":" 2557","line":"  template<typename _Key, typename _Val, typename _KeyOfValue,"},
{"lineNum":" 2558","line":"           typename _Compare, typename _Alloc>"},
{"lineNum":" 2559","line":"    bool"},
{"lineNum":" 2560","line":"    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const"},
{"lineNum":" 2561","line":"    {"},
{"lineNum":" 2562","line":"      if (_M_impl._M_node_count == 0 || begin() == end())"},
{"lineNum":" 2563","line":"\treturn _M_impl._M_node_count == 0 && begin() == end()"},
{"lineNum":" 2564","line":"\t       && this->_M_impl._M_header._M_left == _M_end()"},
{"lineNum":" 2565","line":"\t       && this->_M_impl._M_header._M_right == _M_end();"},
{"lineNum":" 2566","line":""},
{"lineNum":" 2567","line":"      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());"},
{"lineNum":" 2568","line":"      for (const_iterator __it = begin(); __it != end(); ++__it)"},
{"lineNum":" 2569","line":"\t{"},
{"lineNum":" 2570","line":"\t  _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);"},
{"lineNum":" 2571","line":"\t  _Const_Link_type __L = _S_left(__x);"},
{"lineNum":" 2572","line":"\t  _Const_Link_type __R = _S_right(__x);"},
{"lineNum":" 2573","line":""},
{"lineNum":" 2574","line":"\t  if (__x->_M_color == _S_red)"},
{"lineNum":" 2575","line":"\t    if ((__L && __L->_M_color == _S_red)"},
{"lineNum":" 2576","line":"\t\t|| (__R && __R->_M_color == _S_red))"},
{"lineNum":" 2577","line":"\t      return false;"},
{"lineNum":" 2578","line":""},
{"lineNum":" 2579","line":"\t  if (__L && _M_impl._M_key_compare(_S_key(__x), _S_key(__L)))"},
{"lineNum":" 2580","line":"\t    return false;"},
{"lineNum":" 2581","line":"\t  if (__R && _M_impl._M_key_compare(_S_key(__R), _S_key(__x)))"},
{"lineNum":" 2582","line":"\t    return false;"},
{"lineNum":" 2583","line":""},
{"lineNum":" 2584","line":"\t  if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)"},
{"lineNum":" 2585","line":"\t    return false;"},
{"lineNum":" 2586","line":"\t}"},
{"lineNum":" 2587","line":""},
{"lineNum":" 2588","line":"      if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))"},
{"lineNum":" 2589","line":"\treturn false;"},
{"lineNum":" 2590","line":"      if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))"},
{"lineNum":" 2591","line":"\treturn false;"},
{"lineNum":" 2592","line":"      return true;"},
{"lineNum":" 2593","line":"    }"},
{"lineNum":" 2594","line":""},
{"lineNum":" 2595","line":"#if __cplusplus > 201402L"},
{"lineNum":" 2596","line":"  // Allow access to internals of compatible _Rb_tree specializations."},
{"lineNum":" 2597","line":"  template<typename _Key, typename _Val, typename _Sel, typename _Cmp1,"},
{"lineNum":" 2598","line":"\t   typename _Alloc, typename _Cmp2>"},
{"lineNum":" 2599","line":"    struct _Rb_tree_merge_helper<_Rb_tree<_Key, _Val, _Sel, _Cmp1, _Alloc>,"},
{"lineNum":" 2600","line":"\t\t\t\t _Cmp2>"},
{"lineNum":" 2601","line":"    {"},
{"lineNum":" 2602","line":"    private:"},
{"lineNum":" 2603","line":"      friend class _Rb_tree<_Key, _Val, _Sel, _Cmp1, _Alloc>;"},
{"lineNum":" 2604","line":""},
{"lineNum":" 2605","line":"      static auto&"},
{"lineNum":" 2606","line":"      _S_get_impl(_Rb_tree<_Key, _Val, _Sel, _Cmp2, _Alloc>& __tree)"},
{"lineNum":" 2607","line":"      { return __tree._M_impl; }"},
{"lineNum":" 2608","line":"    };"},
{"lineNum":" 2609","line":"#endif // C++17"},
{"lineNum":" 2610","line":""},
{"lineNum":" 2611","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":" 2612","line":"} // namespace"},
{"lineNum":" 2613","line":""},
{"lineNum":" 2614","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "mipl_parser", "date" : "2018-11-28 14:11:04", "instrumented" : 230, "covered" : 211,};
var merged_data = [];
