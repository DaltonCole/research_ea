var data = {lines:[
{"lineNum":"    1","line":"// Components for manipulating sequences of characters -*- C++ -*-"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 1997-2017 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This file is part of the GNU ISO C++ Library.  This library is free"},
{"lineNum":"    6","line":"// software; you can redistribute it and/or modify it under the"},
{"lineNum":"    7","line":"// terms of the GNU General Public License as published by the"},
{"lineNum":"    8","line":"// Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    9","line":"// any later version."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// This library is distributed in the hope that it will be useful,"},
{"lineNum":"   12","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   13","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   14","line":"// GNU General Public License for more details."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   17","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   18","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   21","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   22","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   23","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/** @file bits/basic_string.h"},
{"lineNum":"   26","line":" *  This is an internal header file, included by other library headers."},
{"lineNum":"   27","line":" *  Do not attempt to use it directly. @headername{string}"},
{"lineNum":"   28","line":" */"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"//"},
{"lineNum":"   31","line":"// ISO C++ 14882: 21 Strings library"},
{"lineNum":"   32","line":"//"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"#ifndef _BASIC_STRING_H"},
{"lineNum":"   35","line":"#define _BASIC_STRING_H 1"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"#pragma GCC system_header"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"#include <ext/atomicity.h>"},
{"lineNum":"   40","line":"#include <ext/alloc_traits.h>"},
{"lineNum":"   41","line":"#include <debug/debug.h>"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   44","line":"#include <initializer_list>"},
{"lineNum":"   45","line":"#endif"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"#if __cplusplus > 201402L"},
{"lineNum":"   48","line":"# include <string_view>"},
{"lineNum":"   49","line":"#endif"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   53","line":"{"},
{"lineNum":"   54","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"#if _GLIBCXX_USE_CXX11_ABI"},
{"lineNum":"   57","line":"_GLIBCXX_BEGIN_NAMESPACE_CXX11"},
{"lineNum":"   58","line":"  /**"},
{"lineNum":"   59","line":"   *  @class basic_string basic_string.h <string>"},
{"lineNum":"   60","line":"   *  @brief  Managing sequences of characters and character-like objects."},
{"lineNum":"   61","line":"   *"},
{"lineNum":"   62","line":"   *  @ingroup strings"},
{"lineNum":"   63","line":"   *  @ingroup sequences"},
{"lineNum":"   64","line":"   *"},
{"lineNum":"   65","line":"   *  @tparam _CharT  Type of character"},
{"lineNum":"   66","line":"   *  @tparam _Traits  Traits for character type, defaults to"},
{"lineNum":"   67","line":"   *                   char_traits<_CharT>."},
{"lineNum":"   68","line":"   *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>."},
{"lineNum":"   69","line":"   *"},
{"lineNum":"   70","line":"   *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a"},
{"lineNum":"   71","line":"   *  <a href=\"tables.html#66\">reversible container</a>, and a"},
{"lineNum":"   72","line":"   *  <a href=\"tables.html#67\">sequence</a>.  Of the"},
{"lineNum":"   73","line":"   *  <a href=\"tables.html#68\">optional sequence requirements</a>, only"},
{"lineNum":"   74","line":"   *  @c push_back, @c at, and @c %array access are supported."},
{"lineNum":"   75","line":"   */"},
{"lineNum":"   76","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":"   77","line":"    class basic_string"},
{"lineNum":"   78","line":"    {"},
{"lineNum":"   79","line":"      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template"},
{"lineNum":"   80","line":"\trebind<_CharT>::other _Char_alloc_type;"},
{"lineNum":"   81","line":"      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"      // Types:"},
{"lineNum":"   84","line":"    public:"},
{"lineNum":"   85","line":"      typedef _Traits\t\t\t\t\ttraits_type;"},
{"lineNum":"   86","line":"      typedef typename _Traits::char_type\t\tvalue_type;"},
{"lineNum":"   87","line":"      typedef _Char_alloc_type\t\t\t\tallocator_type;"},
{"lineNum":"   88","line":"      typedef typename _Alloc_traits::size_type\t\tsize_type;"},
{"lineNum":"   89","line":"      typedef typename _Alloc_traits::difference_type\tdifference_type;"},
{"lineNum":"   90","line":"      typedef typename _Alloc_traits::reference\t\treference;"},
{"lineNum":"   91","line":"      typedef typename _Alloc_traits::const_reference\tconst_reference;"},
{"lineNum":"   92","line":"      typedef typename _Alloc_traits::pointer\t\tpointer;"},
{"lineNum":"   93","line":"      typedef typename _Alloc_traits::const_pointer\tconst_pointer;"},
{"lineNum":"   94","line":"      typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;"},
{"lineNum":"   95","line":"      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>"},
{"lineNum":"   96","line":"\t\t\t\t\t\t\tconst_iterator;"},
{"lineNum":"   97","line":"      typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;"},
{"lineNum":"   98","line":"      typedef std::reverse_iterator<iterator>\t\treverse_iterator;"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"      ///  Value returned by various member functions when they fail."},
{"lineNum":"  101","line":"      static const size_type\tnpos = static_cast<size_type>(-1);"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"    private:"},
{"lineNum":"  104","line":"      // type used for positions in insert, erase etc."},
{"lineNum":"  105","line":"#if __cplusplus < 201103L"},
{"lineNum":"  106","line":"      typedef iterator __const_iterator;"},
{"lineNum":"  107","line":"#else"},
{"lineNum":"  108","line":"      typedef const_iterator __const_iterator;"},
{"lineNum":"  109","line":"#endif"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"#if __cplusplus > 201402L"},
{"lineNum":"  112","line":"      // A helper type for avoiding boiler-plate."},
{"lineNum":"  113","line":"      typedef basic_string_view<_CharT, _Traits> __sv_type;"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"      template<typename _Tp, typename _Res>"},
{"lineNum":"  116","line":"\tusing _If_sv = enable_if_t<"},
{"lineNum":"  117","line":"\t  __and_<is_convertible<const _Tp&, __sv_type>,"},
{"lineNum":"  118","line":"\t\t __not_<is_convertible<const _Tp*, const basic_string*>>,"},
{"lineNum":"  119","line":"\t\t __not_<is_convertible<const _Tp&, const _CharT*>>>::value,"},
{"lineNum":"  120","line":"\t  _Res>;"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"      // Allows an implicit conversion to __sv_type."},
{"lineNum":"  123","line":"      static __sv_type"},
{"lineNum":"  124","line":"      _S_to_string_view(__sv_type __svt) noexcept"},
{"lineNum":"  125","line":"      { return __svt; }"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"      // Wraps a string_view by explicit conversion and thus"},
{"lineNum":"  128","line":"      // allows to add an internal constructor that does not"},
{"lineNum":"  129","line":"      // participate in overload resolution when a string_view"},
{"lineNum":"  130","line":"      // is provided."},
{"lineNum":"  131","line":"      struct __sv_wrapper"},
{"lineNum":"  132","line":"      {"},
{"lineNum":"  133","line":"\texplicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }"},
{"lineNum":"  134","line":"\t__sv_type _M_sv;"},
{"lineNum":"  135","line":"      };"},
{"lineNum":"  136","line":"#endif"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html"},
{"lineNum":"  139","line":"      struct _Alloc_hider : allocator_type // TODO check __is_final"},
{"lineNum":"  140","line":"      {"},
{"lineNum":"  141","line":"#if __cplusplus < 201103L"},
{"lineNum":"  142","line":"\t_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())"},
{"lineNum":"  143","line":"\t: allocator_type(__a), _M_p(__dat) { }"},
{"lineNum":"  144","line":"#else"},
{"lineNum":"  145","line":"\t_Alloc_hider(pointer __dat, const _Alloc& __a)"},
{"lineNum":"  146","line":"\t: allocator_type(__a), _M_p(__dat) { }"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"\t_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())"},
{"lineNum":"  149","line":"\t: allocator_type(std::move(__a)), _M_p(__dat) { }"},
{"lineNum":"  150","line":"#endif"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"\tpointer _M_p; // The actual data."},
{"lineNum":"  153","line":"      };"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"      _Alloc_hider\t_M_dataplus;"},
{"lineNum":"  156","line":"      size_type\t\t_M_string_length;"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"      enum { _S_local_capacity = 15 / sizeof(_CharT) };"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"      union"},
{"lineNum":"  161","line":"      {"},
{"lineNum":"  162","line":"\t_CharT           _M_local_buf[_S_local_capacity + 1];"},
{"lineNum":"  163","line":"\tsize_type        _M_allocated_capacity;"},
{"lineNum":"  164","line":"      };"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"      void"},
{"lineNum":"  167","line":"      _M_data(pointer __p)"},
{"lineNum":"  168","line":"      { _M_dataplus._M_p = __p; }"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"      void"},
{"lineNum":"  171","line":"      _M_length(size_type __length)"},
{"lineNum":"  172","line":"      { _M_string_length = __length; }"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"      pointer"},
{"lineNum":"  175","line":"      _M_data() const"},
{"lineNum":"  176","line":"      { return _M_dataplus._M_p; }"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"      pointer"},
{"lineNum":"  179","line":"      _M_local_data()"},
{"lineNum":"  180","line":"      {"},
{"lineNum":"  181","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  182","line":"\treturn std::pointer_traits<pointer>::pointer_to(*_M_local_buf);"},
{"lineNum":"  183","line":"#else"},
{"lineNum":"  184","line":"\treturn pointer(_M_local_buf);"},
{"lineNum":"  185","line":"#endif"},
{"lineNum":"  186","line":"      }"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"      const_pointer"},
{"lineNum":"  189","line":"      _M_local_data() const"},
{"lineNum":"  190","line":"      {"},
{"lineNum":"  191","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  192","line":"\treturn std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);"},
{"lineNum":"  193","line":"#else"},
{"lineNum":"  194","line":"\treturn const_pointer(_M_local_buf);"},
{"lineNum":"  195","line":"#endif"},
{"lineNum":"  196","line":"      }"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"      void"},
{"lineNum":"  199","line":"      _M_capacity(size_type __capacity)"},
{"lineNum":"  200","line":"      { _M_allocated_capacity = __capacity; }"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"      void"},
{"lineNum":"  203","line":"      _M_set_length(size_type __n)"},
{"lineNum":"  204","line":"      {"},
{"lineNum":"  205","line":"\t_M_length(__n);"},
{"lineNum":"  206","line":"\ttraits_type::assign(_M_data()[__n], _CharT());"},
{"lineNum":"  207","line":"      }"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"      bool"},
{"lineNum":"  210","line":"      _M_is_local() const"},
{"lineNum":"  211","line":"      { return _M_data() == _M_local_data(); }"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"      // Create & Destroy"},
{"lineNum":"  214","line":"      pointer"},
{"lineNum":"  215","line":"      _M_create(size_type&, size_type);"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"      void"},
{"lineNum":"  218","line":"      _M_dispose()"},
{"lineNum":"  219","line":"      {"},
{"lineNum":"  220","line":"\tif (!_M_is_local())"},
{"lineNum":"  221","line":"\t  _M_destroy(_M_allocated_capacity);"},
{"lineNum":"  222","line":"      }"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"      void"},
{"lineNum":"  225","line":"      _M_destroy(size_type __size) throw()"},
{"lineNum":"  226","line":"      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"      // _M_construct_aux is used to implement the 21.3.1 para 15 which"},
{"lineNum":"  229","line":"      // requires special behaviour if _InIterator is an integral type"},
{"lineNum":"  230","line":"      template<typename _InIterator>"},
{"lineNum":"  231","line":"        void"},
{"lineNum":"  232","line":"        _M_construct_aux(_InIterator __beg, _InIterator __end,"},
{"lineNum":"  233","line":"\t\t\t std::__false_type)"},
{"lineNum":"  234","line":"\t{"},
{"lineNum":"  235","line":"          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;"},
{"lineNum":"  236","line":"          _M_construct(__beg, __end, _Tag());"},
{"lineNum":"  237","line":"\t}"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  240","line":"      // 438. Ambiguity in the \"do the right thing\" clause"},
{"lineNum":"  241","line":"      template<typename _Integer>"},
{"lineNum":"  242","line":"        void"},
{"lineNum":"  243","line":"        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)"},
{"lineNum":"  244","line":"\t{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"      void"},
{"lineNum":"  247","line":"      _M_construct_aux_2(size_type __req, _CharT __c)"},
{"lineNum":"  248","line":"      { _M_construct(__req, __c); }"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"      template<typename _InIterator>"},
{"lineNum":"  251","line":"        void"},
{"lineNum":"  252","line":"        _M_construct(_InIterator __beg, _InIterator __end)"},
{"lineNum":"  253","line":"\t{"},
{"lineNum":"  254","line":"\t  typedef typename std::__is_integer<_InIterator>::__type _Integral;"},
{"lineNum":"  255","line":"\t  _M_construct_aux(__beg, __end, _Integral());"},
{"lineNum":"  256","line":"        }"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"      // For Input Iterators, used in istreambuf_iterators, etc."},
{"lineNum":"  259","line":"      template<typename _InIterator>"},
{"lineNum":"  260","line":"        void"},
{"lineNum":"  261","line":"        _M_construct(_InIterator __beg, _InIterator __end,"},
{"lineNum":"  262","line":"\t\t     std::input_iterator_tag);"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"      // For forward_iterators up to random_access_iterators, used for"},
{"lineNum":"  265","line":"      // string::iterator, _CharT*, etc."},
{"lineNum":"  266","line":"      template<typename _FwdIterator>"},
{"lineNum":"  267","line":"        void"},
{"lineNum":"  268","line":"        _M_construct(_FwdIterator __beg, _FwdIterator __end,"},
{"lineNum":"  269","line":"\t\t     std::forward_iterator_tag);"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"      void"},
{"lineNum":"  272","line":"      _M_construct(size_type __req, _CharT __c);"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"      allocator_type&"},
{"lineNum":"  275","line":"      _M_get_allocator()"},
{"lineNum":"  276","line":"      { return _M_dataplus; }"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"      const allocator_type&"},
{"lineNum":"  279","line":"      _M_get_allocator() const"},
{"lineNum":"  280","line":"      { return _M_dataplus; }"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"    private:"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"#ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST"},
{"lineNum":"  285","line":"      // The explicit instantiations in misc-inst.cc require this due to"},
{"lineNum":"  286","line":"      // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063"},
{"lineNum":"  287","line":"      template<typename _Tp, bool _Requires ="},
{"lineNum":"  288","line":"\t       !__are_same<_Tp, _CharT*>::__value"},
{"lineNum":"  289","line":"\t       && !__are_same<_Tp, const _CharT*>::__value"},
{"lineNum":"  290","line":"\t       && !__are_same<_Tp, iterator>::__value"},
{"lineNum":"  291","line":"\t       && !__are_same<_Tp, const_iterator>::__value>"},
{"lineNum":"  292","line":"\tstruct __enable_if_not_native_iterator"},
{"lineNum":"  293","line":"\t{ typedef basic_string& __type; };"},
{"lineNum":"  294","line":"      template<typename _Tp>"},
{"lineNum":"  295","line":"\tstruct __enable_if_not_native_iterator<_Tp, false> { };"},
{"lineNum":"  296","line":"#endif"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"      size_type"},
{"lineNum":"  299","line":"      _M_check(size_type __pos, const char* __s) const"},
{"lineNum":"  300","line":"      {"},
{"lineNum":"  301","line":"\tif (__pos > this->size())"},
{"lineNum":"  302","line":"\t  __throw_out_of_range_fmt(__N(\"%s: __pos (which is %zu) > \""},
{"lineNum":"  303","line":"\t\t\t\t       \"this->size() (which is %zu)\"),"},
{"lineNum":"  304","line":"\t\t\t\t   __s, __pos, this->size());"},
{"lineNum":"  305","line":"\treturn __pos;"},
{"lineNum":"  306","line":"      }"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"      void"},
{"lineNum":"  309","line":"      _M_check_length(size_type __n1, size_type __n2, const char* __s) const"},
{"lineNum":"  310","line":"      {"},
{"lineNum":"  311","line":"\tif (this->max_size() - (this->size() - __n1) < __n2)"},
{"lineNum":"  312","line":"\t  __throw_length_error(__N(__s));"},
{"lineNum":"  313","line":"      }"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"      // NB: _M_limit doesn\'t check for a bad __pos value."},
{"lineNum":"  317","line":"      size_type"},
{"lineNum":"  318","line":"      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  319","line":"      {"},
{"lineNum":"  320","line":"\tconst bool __testoff =  __off < this->size() - __pos;"},
{"lineNum":"  321","line":"\treturn __testoff ? __off : this->size() - __pos;"},
{"lineNum":"  322","line":"      }"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"      // True if _Rep and source do not overlap."},
{"lineNum":"  325","line":"      bool"},
{"lineNum":"  326","line":"      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  327","line":"      {"},
{"lineNum":"  328","line":"\treturn (less<const _CharT*>()(__s, _M_data())"},
{"lineNum":"  329","line":"\t\t|| less<const _CharT*>()(_M_data() + this->size(), __s));"},
{"lineNum":"  330","line":"      }"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"      // When __n = 1 way faster than the general multichar"},
{"lineNum":"  333","line":"      // traits_type::copy/move/assign."},
{"lineNum":"  334","line":"      static void"},
{"lineNum":"  335","line":"      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)"},
{"lineNum":"  336","line":"      {"},
{"lineNum":"  337","line":"\tif (__n == 1)"},
{"lineNum":"  338","line":"\t  traits_type::assign(*__d, *__s);"},
{"lineNum":"  339","line":"\telse"},
{"lineNum":"  340","line":"\t  traits_type::copy(__d, __s, __n);"},
{"lineNum":"  341","line":"      }"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"      static void"},
{"lineNum":"  344","line":"      _S_move(_CharT* __d, const _CharT* __s, size_type __n)"},
{"lineNum":"  345","line":"      {"},
{"lineNum":"  346","line":"\tif (__n == 1)"},
{"lineNum":"  347","line":"\t  traits_type::assign(*__d, *__s);"},
{"lineNum":"  348","line":"\telse"},
{"lineNum":"  349","line":"\t  traits_type::move(__d, __s, __n);"},
{"lineNum":"  350","line":"      }"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"      static void"},
{"lineNum":"  353","line":"      _S_assign(_CharT* __d, size_type __n, _CharT __c)"},
{"lineNum":"  354","line":"      {"},
{"lineNum":"  355","line":"\tif (__n == 1)"},
{"lineNum":"  356","line":"\t  traits_type::assign(*__d, __c);"},
{"lineNum":"  357","line":"\telse"},
{"lineNum":"  358","line":"\t  traits_type::assign(__d, __n, __c);"},
{"lineNum":"  359","line":"      }"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"      // _S_copy_chars is a separate template to permit specialization"},
{"lineNum":"  362","line":"      // to optimize for the common case of pointers as iterators."},
{"lineNum":"  363","line":"      template<class _Iterator>"},
{"lineNum":"  364","line":"        static void"},
{"lineNum":"  365","line":"        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)"},
{"lineNum":"  366","line":"        {"},
{"lineNum":"  367","line":"\t  for (; __k1 != __k2; ++__k1, (void)++__p)"},
{"lineNum":"  368","line":"\t    traits_type::assign(*__p, *__k1); // These types are off."},
{"lineNum":"  369","line":"\t}"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"      static void"},
{"lineNum":"  372","line":"      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  373","line":"      { _S_copy_chars(__p, __k1.base(), __k2.base()); }"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"      static void"},
{"lineNum":"  376","line":"      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)"},
{"lineNum":"  377","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":"  378","line":"      { _S_copy_chars(__p, __k1.base(), __k2.base()); }"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"      static void"},
{"lineNum":"  381","line":"      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  382","line":"      { _S_copy(__p, __k1, __k2 - __k1); }"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"      static void"},
{"lineNum":"  385","line":"      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)"},
{"lineNum":"  386","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":"  387","line":"      { _S_copy(__p, __k1, __k2 - __k1); }"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"      static int"},
{"lineNum":"  390","line":"      _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  391","line":"      {"},
{"lineNum":"  392","line":"\tconst difference_type __d = difference_type(__n1 - __n2);"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"\tif (__d > __gnu_cxx::__numeric_traits<int>::__max)"},
{"lineNum":"  395","line":"\t  return __gnu_cxx::__numeric_traits<int>::__max;"},
{"lineNum":"  396","line":"\telse if (__d < __gnu_cxx::__numeric_traits<int>::__min)"},
{"lineNum":"  397","line":"\t  return __gnu_cxx::__numeric_traits<int>::__min;"},
{"lineNum":"  398","line":"\telse"},
{"lineNum":"  399","line":"\t  return int(__d);"},
{"lineNum":"  400","line":"      }"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"      void"},
{"lineNum":"  403","line":"      _M_assign(const basic_string&);"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"      void"},
{"lineNum":"  406","line":"      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,"},
{"lineNum":"  407","line":"\t\tsize_type __len2);"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"      void"},
{"lineNum":"  410","line":"      _M_erase(size_type __pos, size_type __n);"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"    public:"},
{"lineNum":"  413","line":"      // Construct/copy/destroy:"},
{"lineNum":"  414","line":"      // NB: We overload ctors in some cases instead of using default"},
{"lineNum":"  415","line":"      // arguments, per 17.4.4.4 para. 2 item 2."},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"      /**"},
{"lineNum":"  418","line":"       *  @brief  Default constructor creates an empty string."},
{"lineNum":"  419","line":"       */"},
{"lineNum":"  420","line":"      basic_string()"},
{"lineNum":"  421","line":"      _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)"},
{"lineNum":"  422","line":"      : _M_dataplus(_M_local_data())"},
{"lineNum":"  423","line":"      { _M_set_length(0); }"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"      /**"},
{"lineNum":"  426","line":"       *  @brief  Construct an empty string using allocator @a a."},
{"lineNum":"  427","line":"       */"},
{"lineNum":"  428","line":"      explicit"},
{"lineNum":"  429","line":"      basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  430","line":"      : _M_dataplus(_M_local_data(), __a)"},
{"lineNum":"  431","line":"      { _M_set_length(0); }"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"      /**"},
{"lineNum":"  434","line":"       *  @brief  Construct string with copy of value of @a __str."},
{"lineNum":"  435","line":"       *  @param  __str  Source string."},
{"lineNum":"  436","line":"       */"},
{"lineNum":"  437","line":"      basic_string(const basic_string& __str)"},
{"lineNum":"  438","line":"      : _M_dataplus(_M_local_data(),"},
{"lineNum":"  439","line":"\t\t    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))"},
{"lineNum":"  440","line":"      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }"},
{"lineNum":"  441","line":""},
{"lineNum":"  442","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  443","line":"      // 2583. no way to supply an allocator for basic_string(str, pos)"},
{"lineNum":"  444","line":"      /**"},
{"lineNum":"  445","line":"       *  @brief  Construct string as copy of a substring."},
{"lineNum":"  446","line":"       *  @param  __str  Source string."},
{"lineNum":"  447","line":"       *  @param  __pos  Index of first character to copy from."},
{"lineNum":"  448","line":"       *  @param  __a  Allocator to use."},
{"lineNum":"  449","line":"       */"},
{"lineNum":"  450","line":"      basic_string(const basic_string& __str, size_type __pos,"},
{"lineNum":"  451","line":"\t\t   const _Alloc& __a = _Alloc())"},
{"lineNum":"  452","line":"      : _M_dataplus(_M_local_data(), __a)"},
{"lineNum":"  453","line":"      {"},
{"lineNum":"  454","line":"\tconst _CharT* __start = __str._M_data()"},
{"lineNum":"  455","line":"\t  + __str._M_check(__pos, \"basic_string::basic_string\");"},
{"lineNum":"  456","line":"\t_M_construct(__start, __start + __str._M_limit(__pos, npos));"},
{"lineNum":"  457","line":"      }"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"      /**"},
{"lineNum":"  460","line":"       *  @brief  Construct string as copy of a substring."},
{"lineNum":"  461","line":"       *  @param  __str  Source string."},
{"lineNum":"  462","line":"       *  @param  __pos  Index of first character to copy from."},
{"lineNum":"  463","line":"       *  @param  __n  Number of characters to copy."},
{"lineNum":"  464","line":"       */"},
{"lineNum":"  465","line":"      basic_string(const basic_string& __str, size_type __pos,"},
{"lineNum":"  466","line":"\t\t   size_type __n)"},
{"lineNum":"  467","line":"      : _M_dataplus(_M_local_data())"},
{"lineNum":"  468","line":"      {"},
{"lineNum":"  469","line":"\tconst _CharT* __start = __str._M_data()"},
{"lineNum":"  470","line":"\t  + __str._M_check(__pos, \"basic_string::basic_string\");"},
{"lineNum":"  471","line":"\t_M_construct(__start, __start + __str._M_limit(__pos, __n));"},
{"lineNum":"  472","line":"      }"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"      /**"},
{"lineNum":"  475","line":"       *  @brief  Construct string as copy of a substring."},
{"lineNum":"  476","line":"       *  @param  __str  Source string."},
{"lineNum":"  477","line":"       *  @param  __pos  Index of first character to copy from."},
{"lineNum":"  478","line":"       *  @param  __n  Number of characters to copy."},
{"lineNum":"  479","line":"       *  @param  __a  Allocator to use."},
{"lineNum":"  480","line":"       */"},
{"lineNum":"  481","line":"      basic_string(const basic_string& __str, size_type __pos,"},
{"lineNum":"  482","line":"\t\t   size_type __n, const _Alloc& __a)"},
{"lineNum":"  483","line":"      : _M_dataplus(_M_local_data(), __a)"},
{"lineNum":"  484","line":"      {"},
{"lineNum":"  485","line":"\tconst _CharT* __start"},
{"lineNum":"  486","line":"\t  = __str._M_data() + __str._M_check(__pos, \"string::string\");"},
{"lineNum":"  487","line":"\t_M_construct(__start, __start + __str._M_limit(__pos, __n));"},
{"lineNum":"  488","line":"      }"},
{"lineNum":"  489","line":""},
{"lineNum":"  490","line":"      /**"},
{"lineNum":"  491","line":"       *  @brief  Construct string initialized by a character %array."},
{"lineNum":"  492","line":"       *  @param  __s  Source character %array."},
{"lineNum":"  493","line":"       *  @param  __n  Number of characters to copy."},
{"lineNum":"  494","line":"       *  @param  __a  Allocator to use (default is default allocator)."},
{"lineNum":"  495","line":"       *"},
{"lineNum":"  496","line":"       *  NB: @a __s must have at least @a __n characters, &apos;\\\\0&apos;"},
{"lineNum":"  497","line":"       *  has no special meaning."},
{"lineNum":"  498","line":"       */"},
{"lineNum":"  499","line":"      basic_string(const _CharT* __s, size_type __n,"},
{"lineNum":"  500","line":"\t\t   const _Alloc& __a = _Alloc())"},
{"lineNum":"  501","line":"      : _M_dataplus(_M_local_data(), __a)"},
{"lineNum":"  502","line":"      { _M_construct(__s, __s + __n); }"},
{"lineNum":"  503","line":""},
{"lineNum":"  504","line":"      /**"},
{"lineNum":"  505","line":"       *  @brief  Construct string as copy of a C string."},
{"lineNum":"  506","line":"       *  @param  __s  Source C string."},
{"lineNum":"  507","line":"       *  @param  __a  Allocator to use (default is default allocator)."},
{"lineNum":"  508","line":"       */"},
{"lineNum":"  509","line":"      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())"},
{"lineNum":"  510","line":"      : _M_dataplus(_M_local_data(), __a)"},
{"lineNum":"  511","line":"      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"      /**"},
{"lineNum":"  514","line":"       *  @brief  Construct string as multiple characters."},
{"lineNum":"  515","line":"       *  @param  __n  Number of characters."},
{"lineNum":"  516","line":"       *  @param  __c  Character to use."},
{"lineNum":"  517","line":"       *  @param  __a  Allocator to use (default is default allocator)."},
{"lineNum":"  518","line":"       */"},
{"lineNum":"  519","line":"      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())"},
{"lineNum":"  520","line":"      : _M_dataplus(_M_local_data(), __a)"},
{"lineNum":"  521","line":"      { _M_construct(__n, __c); }"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  524","line":"      /**"},
{"lineNum":"  525","line":"       *  @brief  Move construct string."},
{"lineNum":"  526","line":"       *  @param  __str  Source string."},
{"lineNum":"  527","line":"       *"},
{"lineNum":"  528","line":"       *  The newly-created string contains the exact contents of @a __str."},
{"lineNum":"  529","line":"       *  @a __str is a valid, but unspecified string."},
{"lineNum":"  530","line":"       **/"},
{"lineNum":"  531","line":"      basic_string(basic_string&& __str) noexcept"},
{"lineNum":"  532","line":"      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))"},
{"lineNum":"  533","line":"      {"},
{"lineNum":"  534","line":"\tif (__str._M_is_local())"},
{"lineNum":"  535","line":"\t  {"},
{"lineNum":"  536","line":"\t    traits_type::copy(_M_local_buf, __str._M_local_buf,"},
{"lineNum":"  537","line":"\t\t\t      _S_local_capacity + 1);"},
{"lineNum":"  538","line":"\t  }"},
{"lineNum":"  539","line":"\telse"},
{"lineNum":"  540","line":"\t  {"},
{"lineNum":"  541","line":"\t    _M_data(__str._M_data());"},
{"lineNum":"  542","line":"\t    _M_capacity(__str._M_allocated_capacity);"},
{"lineNum":"  543","line":"\t  }"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"\t// Must use _M_length() here not _M_set_length() because"},
{"lineNum":"  546","line":"\t// basic_stringbuf relies on writing into unallocated capacity so"},
{"lineNum":"  547","line":"\t// we mess up the contents if we put a \'\\0\' in the string."},
{"lineNum":"  548","line":"\t_M_length(__str.length());"},
{"lineNum":"  549","line":"\t__str._M_data(__str._M_local_data());"},
{"lineNum":"  550","line":"\t__str._M_set_length(0);"},
{"lineNum":"  551","line":"      }"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"      /**"},
{"lineNum":"  554","line":"       *  @brief  Construct string from an initializer %list."},
{"lineNum":"  555","line":"       *  @param  __l  std::initializer_list of characters."},
{"lineNum":"  556","line":"       *  @param  __a  Allocator to use (default is default allocator)."},
{"lineNum":"  557","line":"       */"},
{"lineNum":"  558","line":"      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())"},
{"lineNum":"  559","line":"      : _M_dataplus(_M_local_data(), __a)"},
{"lineNum":"  560","line":"      { _M_construct(__l.begin(), __l.end()); }"},
{"lineNum":"  561","line":""},
{"lineNum":"  562","line":"      basic_string(const basic_string& __str, const _Alloc& __a)"},
{"lineNum":"  563","line":"      : _M_dataplus(_M_local_data(), __a)"},
{"lineNum":"  564","line":"      { _M_construct(__str.begin(), __str.end()); }"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"      basic_string(basic_string&& __str, const _Alloc& __a)"},
{"lineNum":"  567","line":"      noexcept(_Alloc_traits::_S_always_equal())"},
{"lineNum":"  568","line":"      : _M_dataplus(_M_local_data(), __a)"},
{"lineNum":"  569","line":"      {"},
{"lineNum":"  570","line":"\tif (__str._M_is_local())"},
{"lineNum":"  571","line":"\t  {"},
{"lineNum":"  572","line":"\t    traits_type::copy(_M_local_buf, __str._M_local_buf,"},
{"lineNum":"  573","line":"\t\t\t      _S_local_capacity + 1);"},
{"lineNum":"  574","line":"\t    _M_length(__str.length());"},
{"lineNum":"  575","line":"\t    __str._M_set_length(0);"},
{"lineNum":"  576","line":"\t  }"},
{"lineNum":"  577","line":"\telse if (_Alloc_traits::_S_always_equal()"},
{"lineNum":"  578","line":"\t    || __str.get_allocator() == __a)"},
{"lineNum":"  579","line":"\t  {"},
{"lineNum":"  580","line":"\t    _M_data(__str._M_data());"},
{"lineNum":"  581","line":"\t    _M_length(__str.length());"},
{"lineNum":"  582","line":"\t    _M_capacity(__str._M_allocated_capacity);"},
{"lineNum":"  583","line":"\t    __str._M_data(__str._M_local_buf);"},
{"lineNum":"  584","line":"\t    __str._M_set_length(0);"},
{"lineNum":"  585","line":"\t  }"},
{"lineNum":"  586","line":"\telse"},
{"lineNum":"  587","line":"\t  _M_construct(__str.begin(), __str.end());"},
{"lineNum":"  588","line":"      }"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"#endif // C++11"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"      /**"},
{"lineNum":"  593","line":"       *  @brief  Construct string as copy of a range."},
{"lineNum":"  594","line":"       *  @param  __beg  Start of range."},
{"lineNum":"  595","line":"       *  @param  __end  End of range."},
{"lineNum":"  596","line":"       *  @param  __a  Allocator to use (default is default allocator)."},
{"lineNum":"  597","line":"       */"},
{"lineNum":"  598","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  599","line":"      template<typename _InputIterator,"},
{"lineNum":"  600","line":"\t       typename = std::_RequireInputIter<_InputIterator>>"},
{"lineNum":"  601","line":"#else"},
{"lineNum":"  602","line":"      template<typename _InputIterator>"},
{"lineNum":"  603","line":"#endif"},
{"lineNum":"  604","line":"        basic_string(_InputIterator __beg, _InputIterator __end,"},
{"lineNum":"  605","line":"\t\t     const _Alloc& __a = _Alloc())"},
{"lineNum":"  606","line":"\t: _M_dataplus(_M_local_data(), __a)"},
{"lineNum":"  607","line":"\t{ _M_construct(__beg, __end); }"},
{"lineNum":"  608","line":""},
{"lineNum":"  609","line":"#if __cplusplus > 201402L"},
{"lineNum":"  610","line":"      /**"},
{"lineNum":"  611","line":"       *  @brief  Construct string from a substring of a string_view."},
{"lineNum":"  612","line":"       *  @param  __t   Source object convertible to string view."},
{"lineNum":"  613","line":"       *  @param  __pos The index of the first character to copy from __t."},
{"lineNum":"  614","line":"       *  @param  __n   The number of characters to copy from __t."},
{"lineNum":"  615","line":"       *  @param  __a   Allocator to use."},
{"lineNum":"  616","line":"       */"},
{"lineNum":"  617","line":"      template<typename _Tp, typename = _If_sv<_Tp, void>>"},
{"lineNum":"  618","line":"\tbasic_string(const _Tp& __t, size_type __pos, size_type __n,"},
{"lineNum":"  619","line":"\t\t     const _Alloc& __a = _Alloc())"},
{"lineNum":"  620","line":"\t: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }"},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"      /**"},
{"lineNum":"  623","line":"       *  @brief  Construct string from a string_view."},
{"lineNum":"  624","line":"       *  @param  __t  Source object convertible to string view."},
{"lineNum":"  625","line":"       *  @param  __a  Allocator to use (default is default allocator)."},
{"lineNum":"  626","line":"       */"},
{"lineNum":"  627","line":"      template<typename _Tp, typename = _If_sv<_Tp, void>>"},
{"lineNum":"  628","line":"\texplicit"},
{"lineNum":"  629","line":"\tbasic_string(const _Tp& __t, const _Alloc& __a = _Alloc())"},
{"lineNum":"  630","line":"\t: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }"},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"      /**"},
{"lineNum":"  633","line":"       *  @brief  Only internally used: Construct string from a string view"},
{"lineNum":"  634","line":"       *          wrapper."},
{"lineNum":"  635","line":"       *  @param  __svw  string view wrapper."},
{"lineNum":"  636","line":"       *  @param  __a  Allocator to use."},
{"lineNum":"  637","line":"       */"},
{"lineNum":"  638","line":"      explicit"},
{"lineNum":"  639","line":"      basic_string(__sv_wrapper __svw, const _Alloc& __a)"},
{"lineNum":"  640","line":"      : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }"},
{"lineNum":"  641","line":"#endif // C++17"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"      /**"},
{"lineNum":"  644","line":"       *  @brief  Destroy the string instance."},
{"lineNum":"  645","line":"       */"},
{"lineNum":"  646","line":"      ~basic_string()"},
{"lineNum":"  647","line":"      { _M_dispose(); }"},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"      /**"},
{"lineNum":"  650","line":"       *  @brief  Assign the value of @a str to this string."},
{"lineNum":"  651","line":"       *  @param  __str  Source string."},
{"lineNum":"  652","line":"       */"},
{"lineNum":"  653","line":"      basic_string&"},
{"lineNum":"  654","line":"      operator=(const basic_string& __str)"},
{"lineNum":"  655","line":"      {"},
{"lineNum":"  656","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  657","line":"\tif (_Alloc_traits::_S_propagate_on_copy_assign())"},
{"lineNum":"  658","line":"\t  {"},
{"lineNum":"  659","line":"\t    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()"},
{"lineNum":"  660","line":"\t\t&& _M_get_allocator() != __str._M_get_allocator())"},
{"lineNum":"  661","line":"\t      {"},
{"lineNum":"  662","line":"\t\t// Propagating allocator cannot free existing storage so must"},
{"lineNum":"  663","line":"\t\t// deallocate it before replacing current allocator."},
{"lineNum":"  664","line":"\t\tif (__str.size() <= _S_local_capacity)"},
{"lineNum":"  665","line":"\t\t  {"},
{"lineNum":"  666","line":"\t\t    _M_destroy(_M_allocated_capacity);"},
{"lineNum":"  667","line":"\t\t    _M_data(_M_local_data());"},
{"lineNum":"  668","line":"\t\t    _M_set_length(0);"},
{"lineNum":"  669","line":"\t\t  }"},
{"lineNum":"  670","line":"\t\telse"},
{"lineNum":"  671","line":"\t\t  {"},
{"lineNum":"  672","line":"\t\t    const auto __len = __str.size();"},
{"lineNum":"  673","line":"\t\t    auto __alloc = __str._M_get_allocator();"},
{"lineNum":"  674","line":"\t\t    // If this allocation throws there are no effects:"},
{"lineNum":"  675","line":"\t\t    auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);"},
{"lineNum":"  676","line":"\t\t    _M_destroy(_M_allocated_capacity);"},
{"lineNum":"  677","line":"\t\t    _M_data(__ptr);"},
{"lineNum":"  678","line":"\t\t    _M_capacity(__len);"},
{"lineNum":"  679","line":"\t\t    _M_set_length(__len);"},
{"lineNum":"  680","line":"\t\t  }"},
{"lineNum":"  681","line":"\t      }"},
{"lineNum":"  682","line":"\t    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());"},
{"lineNum":"  683","line":"\t  }"},
{"lineNum":"  684","line":"#endif"},
{"lineNum":"  685","line":"\treturn this->assign(__str);"},
{"lineNum":"  686","line":"      }"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"      /**"},
{"lineNum":"  689","line":"       *  @brief  Copy contents of @a s into this string."},
{"lineNum":"  690","line":"       *  @param  __s  Source null-terminated string."},
{"lineNum":"  691","line":"       */"},
{"lineNum":"  692","line":"      basic_string&"},
{"lineNum":"  693","line":"      operator=(const _CharT* __s)"},
{"lineNum":"  694","line":"      { return this->assign(__s); }"},
{"lineNum":"  695","line":""},
{"lineNum":"  696","line":"      /**"},
{"lineNum":"  697","line":"       *  @brief  Set value to string of length 1."},
{"lineNum":"  698","line":"       *  @param  __c  Source character."},
{"lineNum":"  699","line":"       *"},
{"lineNum":"  700","line":"       *  Assigning to a character makes this string length 1 and"},
{"lineNum":"  701","line":"       *  (*this)[0] == @a c."},
{"lineNum":"  702","line":"       */"},
{"lineNum":"  703","line":"      basic_string&"},
{"lineNum":"  704","line":"      operator=(_CharT __c)"},
{"lineNum":"  705","line":"      {"},
{"lineNum":"  706","line":"\tthis->assign(1, __c);"},
{"lineNum":"  707","line":"\treturn *this;"},
{"lineNum":"  708","line":"      }"},
{"lineNum":"  709","line":""},
{"lineNum":"  710","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  711","line":"      /**"},
{"lineNum":"  712","line":"       *  @brief  Move assign the value of @a str to this string."},
{"lineNum":"  713","line":"       *  @param  __str  Source string."},
{"lineNum":"  714","line":"       *"},
{"lineNum":"  715","line":"       *  The contents of @a str are moved into this string (without copying)."},
{"lineNum":"  716","line":"       *  @a str is a valid, but unspecified string."},
{"lineNum":"  717","line":"       **/"},
{"lineNum":"  718","line":"      // PR 58265, this should be noexcept."},
{"lineNum":"  719","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  720","line":"      // 2063. Contradictory requirements for string move assignment"},
{"lineNum":"  721","line":"      basic_string&"},
{"lineNum":"  722","line":"      operator=(basic_string&& __str)"},
{"lineNum":"  723","line":"      noexcept(_Alloc_traits::_S_nothrow_move())"},
{"lineNum":"  724","line":"      {"},
{"lineNum":"  725","line":"\tif (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()"},
{"lineNum":"  726","line":"\t    && !_Alloc_traits::_S_always_equal()"},
{"lineNum":"  727","line":"\t    && _M_get_allocator() != __str._M_get_allocator())"},
{"lineNum":"  728","line":"\t  {"},
{"lineNum":"  729","line":"\t    // Destroy existing storage before replacing allocator."},
{"lineNum":"  730","line":"\t    _M_destroy(_M_allocated_capacity);"},
{"lineNum":"  731","line":"\t    _M_data(_M_local_data());"},
{"lineNum":"  732","line":"\t    _M_set_length(0);"},
{"lineNum":"  733","line":"\t  }"},
{"lineNum":"  734","line":"\t// Replace allocator if POCMA is true."},
{"lineNum":"  735","line":"\tstd::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"\tif (!__str._M_is_local()"},
{"lineNum":"  738","line":"\t    && (_Alloc_traits::_S_propagate_on_move_assign()"},
{"lineNum":"  739","line":"\t      || _Alloc_traits::_S_always_equal()))"},
{"lineNum":"  740","line":"\t  {"},
{"lineNum":"  741","line":"\t    pointer __data = nullptr;"},
{"lineNum":"  742","line":"\t    size_type __capacity;"},
{"lineNum":"  743","line":"\t    if (!_M_is_local())"},
{"lineNum":"  744","line":"\t      {"},
{"lineNum":"  745","line":"\t\tif (_Alloc_traits::_S_always_equal())"},
{"lineNum":"  746","line":"\t\t  {"},
{"lineNum":"  747","line":"\t\t    __data = _M_data();"},
{"lineNum":"  748","line":"\t\t    __capacity = _M_allocated_capacity;"},
{"lineNum":"  749","line":"\t\t  }"},
{"lineNum":"  750","line":"\t\telse"},
{"lineNum":"  751","line":"\t\t  _M_destroy(_M_allocated_capacity);"},
{"lineNum":"  752","line":"\t      }"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"\t    _M_data(__str._M_data());"},
{"lineNum":"  755","line":"\t    _M_length(__str.length());"},
{"lineNum":"  756","line":"\t    _M_capacity(__str._M_allocated_capacity);"},
{"lineNum":"  757","line":"\t    if (__data)"},
{"lineNum":"  758","line":"\t      {"},
{"lineNum":"  759","line":"\t\t__str._M_data(__data);"},
{"lineNum":"  760","line":"\t\t__str._M_capacity(__capacity);"},
{"lineNum":"  761","line":"\t      }"},
{"lineNum":"  762","line":"\t    else"},
{"lineNum":"  763","line":"\t      __str._M_data(__str._M_local_buf);"},
{"lineNum":"  764","line":"\t  }"},
{"lineNum":"  765","line":"\telse"},
{"lineNum":"  766","line":"\t    assign(__str);"},
{"lineNum":"  767","line":"\t__str.clear();"},
{"lineNum":"  768","line":"\treturn *this;"},
{"lineNum":"  769","line":"      }"},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":"      /**"},
{"lineNum":"  772","line":"       *  @brief  Set value to string constructed from initializer %list."},
{"lineNum":"  773","line":"       *  @param  __l  std::initializer_list."},
{"lineNum":"  774","line":"       */"},
{"lineNum":"  775","line":"      basic_string&"},
{"lineNum":"  776","line":"      operator=(initializer_list<_CharT> __l)"},
{"lineNum":"  777","line":"      {"},
{"lineNum":"  778","line":"\tthis->assign(__l.begin(), __l.size());"},
{"lineNum":"  779","line":"\treturn *this;"},
{"lineNum":"  780","line":"      }"},
{"lineNum":"  781","line":"#endif // C++11"},
{"lineNum":"  782","line":""},
{"lineNum":"  783","line":"#if __cplusplus > 201402L"},
{"lineNum":"  784","line":"      /**"},
{"lineNum":"  785","line":"       *  @brief  Set value to string constructed from a string_view."},
{"lineNum":"  786","line":"       *  @param  __svt  An object convertible to string_view."},
{"lineNum":"  787","line":"       */"},
{"lineNum":"  788","line":"     template<typename _Tp>"},
{"lineNum":"  789","line":"       _If_sv<_Tp, basic_string&>"},
{"lineNum":"  790","line":"       operator=(const _Tp& __svt)"},
{"lineNum":"  791","line":"       { return this->assign(__svt); }"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"      /**"},
{"lineNum":"  794","line":"       *  @brief  Convert to a string_view."},
{"lineNum":"  795","line":"       *  @return A string_view."},
{"lineNum":"  796","line":"       */"},
{"lineNum":"  797","line":"      operator __sv_type() const noexcept"},
{"lineNum":"  798","line":"      { return __sv_type(data(), size()); }"},
{"lineNum":"  799","line":"#endif // C++17"},
{"lineNum":"  800","line":""},
{"lineNum":"  801","line":"      // Iterators:"},
{"lineNum":"  802","line":"      /**"},
{"lineNum":"  803","line":"       *  Returns a read/write iterator that points to the first character in"},
{"lineNum":"  804","line":"       *  the %string."},
{"lineNum":"  805","line":"       */"},
{"lineNum":"  806","line":"      iterator"},
{"lineNum":"  807","line":"      begin() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  808","line":"      { return iterator(_M_data()); }"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"      /**"},
{"lineNum":"  811","line":"       *  Returns a read-only (constant) iterator that points to the first"},
{"lineNum":"  812","line":"       *  character in the %string."},
{"lineNum":"  813","line":"       */"},
{"lineNum":"  814","line":"      const_iterator"},
{"lineNum":"  815","line":"      begin() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  816","line":"      { return const_iterator(_M_data()); }"},
{"lineNum":"  817","line":""},
{"lineNum":"  818","line":"      /**"},
{"lineNum":"  819","line":"       *  Returns a read/write iterator that points one past the last"},
{"lineNum":"  820","line":"       *  character in the %string."},
{"lineNum":"  821","line":"       */"},
{"lineNum":"  822","line":"      iterator"},
{"lineNum":"  823","line":"      end() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  824","line":"      { return iterator(_M_data() + this->size()); }"},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"      /**"},
{"lineNum":"  827","line":"       *  Returns a read-only (constant) iterator that points one past the"},
{"lineNum":"  828","line":"       *  last character in the %string."},
{"lineNum":"  829","line":"       */"},
{"lineNum":"  830","line":"      const_iterator"},
{"lineNum":"  831","line":"      end() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  832","line":"      { return const_iterator(_M_data() + this->size()); }"},
{"lineNum":"  833","line":""},
{"lineNum":"  834","line":"      /**"},
{"lineNum":"  835","line":"       *  Returns a read/write reverse iterator that points to the last"},
{"lineNum":"  836","line":"       *  character in the %string.  Iteration is done in reverse element"},
{"lineNum":"  837","line":"       *  order."},
{"lineNum":"  838","line":"       */"},
{"lineNum":"  839","line":"      reverse_iterator"},
{"lineNum":"  840","line":"      rbegin() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  841","line":"      { return reverse_iterator(this->end()); }"},
{"lineNum":"  842","line":""},
{"lineNum":"  843","line":"      /**"},
{"lineNum":"  844","line":"       *  Returns a read-only (constant) reverse iterator that points"},
{"lineNum":"  845","line":"       *  to the last character in the %string.  Iteration is done in"},
{"lineNum":"  846","line":"       *  reverse element order."},
{"lineNum":"  847","line":"       */"},
{"lineNum":"  848","line":"      const_reverse_iterator"},
{"lineNum":"  849","line":"      rbegin() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  850","line":"      { return const_reverse_iterator(this->end()); }"},
{"lineNum":"  851","line":""},
{"lineNum":"  852","line":"      /**"},
{"lineNum":"  853","line":"       *  Returns a read/write reverse iterator that points to one before the"},
{"lineNum":"  854","line":"       *  first character in the %string.  Iteration is done in reverse"},
{"lineNum":"  855","line":"       *  element order."},
{"lineNum":"  856","line":"       */"},
{"lineNum":"  857","line":"      reverse_iterator"},
{"lineNum":"  858","line":"      rend() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  859","line":"      { return reverse_iterator(this->begin()); }"},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"      /**"},
{"lineNum":"  862","line":"       *  Returns a read-only (constant) reverse iterator that points"},
{"lineNum":"  863","line":"       *  to one before the first character in the %string.  Iteration"},
{"lineNum":"  864","line":"       *  is done in reverse element order."},
{"lineNum":"  865","line":"       */"},
{"lineNum":"  866","line":"      const_reverse_iterator"},
{"lineNum":"  867","line":"      rend() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  868","line":"      { return const_reverse_iterator(this->begin()); }"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  871","line":"      /**"},
{"lineNum":"  872","line":"       *  Returns a read-only (constant) iterator that points to the first"},
{"lineNum":"  873","line":"       *  character in the %string."},
{"lineNum":"  874","line":"       */"},
{"lineNum":"  875","line":"      const_iterator"},
{"lineNum":"  876","line":"      cbegin() const noexcept"},
{"lineNum":"  877","line":"      { return const_iterator(this->_M_data()); }"},
{"lineNum":"  878","line":""},
{"lineNum":"  879","line":"      /**"},
{"lineNum":"  880","line":"       *  Returns a read-only (constant) iterator that points one past the"},
{"lineNum":"  881","line":"       *  last character in the %string."},
{"lineNum":"  882","line":"       */"},
{"lineNum":"  883","line":"      const_iterator"},
{"lineNum":"  884","line":"      cend() const noexcept"},
{"lineNum":"  885","line":"      { return const_iterator(this->_M_data() + this->size()); }"},
{"lineNum":"  886","line":""},
{"lineNum":"  887","line":"      /**"},
{"lineNum":"  888","line":"       *  Returns a read-only (constant) reverse iterator that points"},
{"lineNum":"  889","line":"       *  to the last character in the %string.  Iteration is done in"},
{"lineNum":"  890","line":"       *  reverse element order."},
{"lineNum":"  891","line":"       */"},
{"lineNum":"  892","line":"      const_reverse_iterator"},
{"lineNum":"  893","line":"      crbegin() const noexcept"},
{"lineNum":"  894","line":"      { return const_reverse_iterator(this->end()); }"},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"      /**"},
{"lineNum":"  897","line":"       *  Returns a read-only (constant) reverse iterator that points"},
{"lineNum":"  898","line":"       *  to one before the first character in the %string.  Iteration"},
{"lineNum":"  899","line":"       *  is done in reverse element order."},
{"lineNum":"  900","line":"       */"},
{"lineNum":"  901","line":"      const_reverse_iterator"},
{"lineNum":"  902","line":"      crend() const noexcept"},
{"lineNum":"  903","line":"      { return const_reverse_iterator(this->begin()); }"},
{"lineNum":"  904","line":"#endif"},
{"lineNum":"  905","line":""},
{"lineNum":"  906","line":"    public:"},
{"lineNum":"  907","line":"      // Capacity:"},
{"lineNum":"  908","line":"      ///  Returns the number of characters in the string, not including any"},
{"lineNum":"  909","line":"      ///  null-termination."},
{"lineNum":"  910","line":"      size_type"},
{"lineNum":"  911","line":"      size() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  912","line":"      { return _M_string_length; }"},
{"lineNum":"  913","line":""},
{"lineNum":"  914","line":"      ///  Returns the number of characters in the string, not including any"},
{"lineNum":"  915","line":"      ///  null-termination."},
{"lineNum":"  916","line":"      size_type"},
{"lineNum":"  917","line":"      length() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  918","line":"      { return _M_string_length; }"},
{"lineNum":"  919","line":""},
{"lineNum":"  920","line":"      ///  Returns the size() of the largest possible %string."},
{"lineNum":"  921","line":"      size_type"},
{"lineNum":"  922","line":"      max_size() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  923","line":"      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }"},
{"lineNum":"  924","line":""},
{"lineNum":"  925","line":"      /**"},
{"lineNum":"  926","line":"       *  @brief  Resizes the %string to the specified number of characters."},
{"lineNum":"  927","line":"       *  @param  __n  Number of characters the %string should contain."},
{"lineNum":"  928","line":"       *  @param  __c  Character to fill any new elements."},
{"lineNum":"  929","line":"       *"},
{"lineNum":"  930","line":"       *  This function will %resize the %string to the specified"},
{"lineNum":"  931","line":"       *  number of characters.  If the number is smaller than the"},
{"lineNum":"  932","line":"       *  %string\'s current size the %string is truncated, otherwise"},
{"lineNum":"  933","line":"       *  the %string is extended and new elements are %set to @a __c."},
{"lineNum":"  934","line":"       */"},
{"lineNum":"  935","line":"      void"},
{"lineNum":"  936","line":"      resize(size_type __n, _CharT __c);"},
{"lineNum":"  937","line":""},
{"lineNum":"  938","line":"      /**"},
{"lineNum":"  939","line":"       *  @brief  Resizes the %string to the specified number of characters."},
{"lineNum":"  940","line":"       *  @param  __n  Number of characters the %string should contain."},
{"lineNum":"  941","line":"       *"},
{"lineNum":"  942","line":"       *  This function will resize the %string to the specified length.  If"},
{"lineNum":"  943","line":"       *  the new size is smaller than the %string\'s current size the %string"},
{"lineNum":"  944","line":"       *  is truncated, otherwise the %string is extended and new characters"},
{"lineNum":"  945","line":"       *  are default-constructed.  For basic types such as char, this means"},
{"lineNum":"  946","line":"       *  setting them to 0."},
{"lineNum":"  947","line":"       */"},
{"lineNum":"  948","line":"      void"},
{"lineNum":"  949","line":"      resize(size_type __n)"},
{"lineNum":"  950","line":"      { this->resize(__n, _CharT()); }"},
{"lineNum":"  951","line":""},
{"lineNum":"  952","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  953","line":"      ///  A non-binding request to reduce capacity() to size()."},
{"lineNum":"  954","line":"      void"},
{"lineNum":"  955","line":"      shrink_to_fit() noexcept"},
{"lineNum":"  956","line":"      {"},
{"lineNum":"  957","line":"#if __cpp_exceptions"},
{"lineNum":"  958","line":"\tif (capacity() > size())"},
{"lineNum":"  959","line":"\t  {"},
{"lineNum":"  960","line":"\t    try"},
{"lineNum":"  961","line":"\t      { reserve(0); }"},
{"lineNum":"  962","line":"\t    catch(...)"},
{"lineNum":"  963","line":"\t      { }"},
{"lineNum":"  964","line":"\t  }"},
{"lineNum":"  965","line":"#endif"},
{"lineNum":"  966","line":"      }"},
{"lineNum":"  967","line":"#endif"},
{"lineNum":"  968","line":""},
{"lineNum":"  969","line":"      /**"},
{"lineNum":"  970","line":"       *  Returns the total number of characters that the %string can hold"},
{"lineNum":"  971","line":"       *  before needing to allocate more memory."},
{"lineNum":"  972","line":"       */"},
{"lineNum":"  973","line":"      size_type"},
{"lineNum":"  974","line":"      capacity() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  975","line":"      {"},
{"lineNum":"  976","line":"\treturn _M_is_local() ? size_type(_S_local_capacity)"},
{"lineNum":"  977","line":"\t                     : _M_allocated_capacity;"},
{"lineNum":"  978","line":"      }"},
{"lineNum":"  979","line":""},
{"lineNum":"  980","line":"      /**"},
{"lineNum":"  981","line":"       *  @brief  Attempt to preallocate enough memory for specified number of"},
{"lineNum":"  982","line":"       *          characters."},
{"lineNum":"  983","line":"       *  @param  __res_arg  Number of characters required."},
{"lineNum":"  984","line":"       *  @throw  std::length_error  If @a __res_arg exceeds @c max_size()."},
{"lineNum":"  985","line":"       *"},
{"lineNum":"  986","line":"       *  This function attempts to reserve enough memory for the"},
{"lineNum":"  987","line":"       *  %string to hold the specified number of characters.  If the"},
{"lineNum":"  988","line":"       *  number requested is more than max_size(), length_error is"},
{"lineNum":"  989","line":"       *  thrown."},
{"lineNum":"  990","line":"       *"},
{"lineNum":"  991","line":"       *  The advantage of this function is that if optimal code is a"},
{"lineNum":"  992","line":"       *  necessity and the user can determine the string length that will be"},
{"lineNum":"  993","line":"       *  required, the user can reserve the memory in %advance, and thus"},
{"lineNum":"  994","line":"       *  prevent a possible reallocation of memory and copying of %string"},
{"lineNum":"  995","line":"       *  data."},
{"lineNum":"  996","line":"       */"},
{"lineNum":"  997","line":"      void"},
{"lineNum":"  998","line":"      reserve(size_type __res_arg = 0);"},
{"lineNum":"  999","line":""},
{"lineNum":" 1000","line":"      /**"},
{"lineNum":" 1001","line":"       *  Erases the string, making it empty."},
{"lineNum":" 1002","line":"       */"},
{"lineNum":" 1003","line":"      void"},
{"lineNum":" 1004","line":"      clear() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1005","line":"      { _M_set_length(0); }"},
{"lineNum":" 1006","line":""},
{"lineNum":" 1007","line":"      /**"},
{"lineNum":" 1008","line":"       *  Returns true if the %string is empty.  Equivalent to"},
{"lineNum":" 1009","line":"       *  <code>*this == \"\"</code>."},
{"lineNum":" 1010","line":"       */"},
{"lineNum":" 1011","line":"      bool"},
{"lineNum":" 1012","line":"      empty() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1013","line":"      { return this->size() == 0; }"},
{"lineNum":" 1014","line":""},
{"lineNum":" 1015","line":"      // Element access:"},
{"lineNum":" 1016","line":"      /**"},
{"lineNum":" 1017","line":"       *  @brief  Subscript access to the data contained in the %string."},
{"lineNum":" 1018","line":"       *  @param  __pos  The index of the character to access."},
{"lineNum":" 1019","line":"       *  @return  Read-only (constant) reference to the character."},
{"lineNum":" 1020","line":"       *"},
{"lineNum":" 1021","line":"       *  This operator allows for easy, array-style, data access."},
{"lineNum":" 1022","line":"       *  Note that data access with this operator is unchecked and"},
{"lineNum":" 1023","line":"       *  out_of_range lookups are not defined. (For checked lookups"},
{"lineNum":" 1024","line":"       *  see at().)"},
{"lineNum":" 1025","line":"       */"},
{"lineNum":" 1026","line":"      const_reference"},
{"lineNum":" 1027","line":"      operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1028","line":"      {"},
{"lineNum":" 1029","line":"\t__glibcxx_assert(__pos <= size());"},
{"lineNum":" 1030","line":"\treturn _M_data()[__pos];"},
{"lineNum":" 1031","line":"      }"},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"      /**"},
{"lineNum":" 1034","line":"       *  @brief  Subscript access to the data contained in the %string."},
{"lineNum":" 1035","line":"       *  @param  __pos  The index of the character to access."},
{"lineNum":" 1036","line":"       *  @return  Read/write reference to the character."},
{"lineNum":" 1037","line":"       *"},
{"lineNum":" 1038","line":"       *  This operator allows for easy, array-style, data access."},
{"lineNum":" 1039","line":"       *  Note that data access with this operator is unchecked and"},
{"lineNum":" 1040","line":"       *  out_of_range lookups are not defined. (For checked lookups"},
{"lineNum":" 1041","line":"       *  see at().)"},
{"lineNum":" 1042","line":"       */"},
{"lineNum":" 1043","line":"      reference"},
{"lineNum":" 1044","line":"      operator[](size_type __pos)"},
{"lineNum":" 1045","line":"      {"},
{"lineNum":" 1046","line":"        // Allow pos == size() both in C++98 mode, as v3 extension,"},
{"lineNum":" 1047","line":"\t// and in C++11 mode."},
{"lineNum":" 1048","line":"\t__glibcxx_assert(__pos <= size());"},
{"lineNum":" 1049","line":"        // In pedantic mode be strict in C++98 mode."},
{"lineNum":" 1050","line":"\t_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());"},
{"lineNum":" 1051","line":"\treturn _M_data()[__pos];"},
{"lineNum":" 1052","line":"      }"},
{"lineNum":" 1053","line":""},
{"lineNum":" 1054","line":"      /**"},
{"lineNum":" 1055","line":"       *  @brief  Provides access to the data contained in the %string."},
{"lineNum":" 1056","line":"       *  @param __n The index of the character to access."},
{"lineNum":" 1057","line":"       *  @return  Read-only (const) reference to the character."},
{"lineNum":" 1058","line":"       *  @throw  std::out_of_range  If @a n is an invalid index."},
{"lineNum":" 1059","line":"       *"},
{"lineNum":" 1060","line":"       *  This function provides for safer data access.  The parameter is"},
{"lineNum":" 1061","line":"       *  first checked that it is in the range of the string.  The function"},
{"lineNum":" 1062","line":"       *  throws out_of_range if the check fails."},
{"lineNum":" 1063","line":"       */"},
{"lineNum":" 1064","line":"      const_reference"},
{"lineNum":" 1065","line":"      at(size_type __n) const"},
{"lineNum":" 1066","line":"      {"},
{"lineNum":" 1067","line":"\tif (__n >= this->size())"},
{"lineNum":" 1068","line":"\t  __throw_out_of_range_fmt(__N(\"basic_string::at: __n \""},
{"lineNum":" 1069","line":"\t\t\t\t       \"(which is %zu) >= this->size() \""},
{"lineNum":" 1070","line":"\t\t\t\t       \"(which is %zu)\"),"},
{"lineNum":" 1071","line":"\t\t\t\t   __n, this->size());"},
{"lineNum":" 1072","line":"\treturn _M_data()[__n];"},
{"lineNum":" 1073","line":"      }"},
{"lineNum":" 1074","line":""},
{"lineNum":" 1075","line":"      /**"},
{"lineNum":" 1076","line":"       *  @brief  Provides access to the data contained in the %string."},
{"lineNum":" 1077","line":"       *  @param __n The index of the character to access."},
{"lineNum":" 1078","line":"       *  @return  Read/write reference to the character."},
{"lineNum":" 1079","line":"       *  @throw  std::out_of_range  If @a n is an invalid index."},
{"lineNum":" 1080","line":"       *"},
{"lineNum":" 1081","line":"       *  This function provides for safer data access.  The parameter is"},
{"lineNum":" 1082","line":"       *  first checked that it is in the range of the string.  The function"},
{"lineNum":" 1083","line":"       *  throws out_of_range if the check fails."},
{"lineNum":" 1084","line":"       */"},
{"lineNum":" 1085","line":"      reference"},
{"lineNum":" 1086","line":"      at(size_type __n)"},
{"lineNum":" 1087","line":"      {"},
{"lineNum":" 1088","line":"\tif (__n >= size())"},
{"lineNum":" 1089","line":"\t  __throw_out_of_range_fmt(__N(\"basic_string::at: __n \""},
{"lineNum":" 1090","line":"\t\t\t\t       \"(which is %zu) >= this->size() \""},
{"lineNum":" 1091","line":"\t\t\t\t       \"(which is %zu)\"),"},
{"lineNum":" 1092","line":"\t\t\t\t   __n, this->size());"},
{"lineNum":" 1093","line":"\treturn _M_data()[__n];"},
{"lineNum":" 1094","line":"      }"},
{"lineNum":" 1095","line":""},
{"lineNum":" 1096","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1097","line":"      /**"},
{"lineNum":" 1098","line":"       *  Returns a read/write reference to the data at the first"},
{"lineNum":" 1099","line":"       *  element of the %string."},
{"lineNum":" 1100","line":"       */"},
{"lineNum":" 1101","line":"      reference"},
{"lineNum":" 1102","line":"      front() noexcept"},
{"lineNum":" 1103","line":"      {"},
{"lineNum":" 1104","line":"\t__glibcxx_assert(!empty());"},
{"lineNum":" 1105","line":"\treturn operator[](0);"},
{"lineNum":" 1106","line":"      }"},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"      /**"},
{"lineNum":" 1109","line":"       *  Returns a read-only (constant) reference to the data at the first"},
{"lineNum":" 1110","line":"       *  element of the %string."},
{"lineNum":" 1111","line":"       */"},
{"lineNum":" 1112","line":"      const_reference"},
{"lineNum":" 1113","line":"      front() const noexcept"},
{"lineNum":" 1114","line":"      {"},
{"lineNum":" 1115","line":"\t__glibcxx_assert(!empty());"},
{"lineNum":" 1116","line":"\treturn operator[](0);"},
{"lineNum":" 1117","line":"      }"},
{"lineNum":" 1118","line":""},
{"lineNum":" 1119","line":"      /**"},
{"lineNum":" 1120","line":"       *  Returns a read/write reference to the data at the last"},
{"lineNum":" 1121","line":"       *  element of the %string."},
{"lineNum":" 1122","line":"       */"},
{"lineNum":" 1123","line":"      reference"},
{"lineNum":" 1124","line":"      back() noexcept"},
{"lineNum":" 1125","line":"      {"},
{"lineNum":" 1126","line":"\t__glibcxx_assert(!empty());"},
{"lineNum":" 1127","line":"\treturn operator[](this->size() - 1);"},
{"lineNum":" 1128","line":"      }"},
{"lineNum":" 1129","line":""},
{"lineNum":" 1130","line":"      /**"},
{"lineNum":" 1131","line":"       *  Returns a read-only (constant) reference to the data at the"},
{"lineNum":" 1132","line":"       *  last element of the %string."},
{"lineNum":" 1133","line":"       */"},
{"lineNum":" 1134","line":"      const_reference"},
{"lineNum":" 1135","line":"      back() const noexcept"},
{"lineNum":" 1136","line":"      {"},
{"lineNum":" 1137","line":"\t__glibcxx_assert(!empty());"},
{"lineNum":" 1138","line":"\treturn operator[](this->size() - 1);"},
{"lineNum":" 1139","line":"      }"},
{"lineNum":" 1140","line":"#endif"},
{"lineNum":" 1141","line":""},
{"lineNum":" 1142","line":"      // Modifiers:"},
{"lineNum":" 1143","line":"      /**"},
{"lineNum":" 1144","line":"       *  @brief  Append a string to this string."},
{"lineNum":" 1145","line":"       *  @param __str  The string to append."},
{"lineNum":" 1146","line":"       *  @return  Reference to this string."},
{"lineNum":" 1147","line":"       */"},
{"lineNum":" 1148","line":"      basic_string&"},
{"lineNum":" 1149","line":"      operator+=(const basic_string& __str)"},
{"lineNum":" 1150","line":"      { return this->append(__str); }"},
{"lineNum":" 1151","line":""},
{"lineNum":" 1152","line":"      /**"},
{"lineNum":" 1153","line":"       *  @brief  Append a C string."},
{"lineNum":" 1154","line":"       *  @param __s  The C string to append."},
{"lineNum":" 1155","line":"       *  @return  Reference to this string."},
{"lineNum":" 1156","line":"       */"},
{"lineNum":" 1157","line":"      basic_string&"},
{"lineNum":" 1158","line":"      operator+=(const _CharT* __s)"},
{"lineNum":" 1159","line":"      { return this->append(__s); }"},
{"lineNum":" 1160","line":""},
{"lineNum":" 1161","line":"      /**"},
{"lineNum":" 1162","line":"       *  @brief  Append a character."},
{"lineNum":" 1163","line":"       *  @param __c  The character to append."},
{"lineNum":" 1164","line":"       *  @return  Reference to this string."},
{"lineNum":" 1165","line":"       */"},
{"lineNum":" 1166","line":"      basic_string&"},
{"lineNum":" 1167","line":"      operator+=(_CharT __c)"},
{"lineNum":" 1168","line":"      {"},
{"lineNum":" 1169","line":"\tthis->push_back(__c);"},
{"lineNum":" 1170","line":"\treturn *this;"},
{"lineNum":" 1171","line":"      }"},
{"lineNum":" 1172","line":""},
{"lineNum":" 1173","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1174","line":"      /**"},
{"lineNum":" 1175","line":"       *  @brief  Append an initializer_list of characters."},
{"lineNum":" 1176","line":"       *  @param __l  The initializer_list of characters to be appended."},
{"lineNum":" 1177","line":"       *  @return  Reference to this string."},
{"lineNum":" 1178","line":"       */"},
{"lineNum":" 1179","line":"      basic_string&"},
{"lineNum":" 1180","line":"      operator+=(initializer_list<_CharT> __l)"},
{"lineNum":" 1181","line":"      { return this->append(__l.begin(), __l.size()); }"},
{"lineNum":" 1182","line":"#endif // C++11"},
{"lineNum":" 1183","line":""},
{"lineNum":" 1184","line":"#if __cplusplus > 201402L"},
{"lineNum":" 1185","line":"      /**"},
{"lineNum":" 1186","line":"       *  @brief  Append a string_view."},
{"lineNum":" 1187","line":"       *  @param __svt  An object convertible to string_view to be appended."},
{"lineNum":" 1188","line":"       *  @return  Reference to this string."},
{"lineNum":" 1189","line":"       */"},
{"lineNum":" 1190","line":"      template<typename _Tp>"},
{"lineNum":" 1191","line":"\t_If_sv<_Tp, basic_string&>"},
{"lineNum":" 1192","line":"\toperator+=(const _Tp& __svt)"},
{"lineNum":" 1193","line":"\t{ return this->append(__svt); }"},
{"lineNum":" 1194","line":"#endif // C++17"},
{"lineNum":" 1195","line":""},
{"lineNum":" 1196","line":"      /**"},
{"lineNum":" 1197","line":"       *  @brief  Append a string to this string."},
{"lineNum":" 1198","line":"       *  @param __str  The string to append."},
{"lineNum":" 1199","line":"       *  @return  Reference to this string."},
{"lineNum":" 1200","line":"       */"},
{"lineNum":" 1201","line":"      basic_string&"},
{"lineNum":" 1202","line":"      append(const basic_string& __str)"},
{"lineNum":" 1203","line":"      { return _M_append(__str._M_data(), __str.size()); }"},
{"lineNum":" 1204","line":""},
{"lineNum":" 1205","line":"      /**"},
{"lineNum":" 1206","line":"       *  @brief  Append a substring."},
{"lineNum":" 1207","line":"       *  @param __str  The string to append."},
{"lineNum":" 1208","line":"       *  @param __pos  Index of the first character of str to append."},
{"lineNum":" 1209","line":"       *  @param __n  The number of characters to append."},
{"lineNum":" 1210","line":"       *  @return  Reference to this string."},
{"lineNum":" 1211","line":"       *  @throw  std::out_of_range if @a __pos is not a valid index."},
{"lineNum":" 1212","line":"       *"},
{"lineNum":" 1213","line":"       *  This function appends @a __n characters from @a __str"},
{"lineNum":" 1214","line":"       *  starting at @a __pos to this string.  If @a __n is is larger"},
{"lineNum":" 1215","line":"       *  than the number of available characters in @a __str, the"},
{"lineNum":" 1216","line":"       *  remainder of @a __str is appended."},
{"lineNum":" 1217","line":"       */"},
{"lineNum":" 1218","line":"      basic_string&"},
{"lineNum":" 1219","line":"      append(const basic_string& __str, size_type __pos, size_type __n)"},
{"lineNum":" 1220","line":"      { return _M_append(__str._M_data()"},
{"lineNum":" 1221","line":"\t\t\t + __str._M_check(__pos, \"basic_string::append\"),"},
{"lineNum":" 1222","line":"\t\t\t __str._M_limit(__pos, __n)); }"},
{"lineNum":" 1223","line":""},
{"lineNum":" 1224","line":"      /**"},
{"lineNum":" 1225","line":"       *  @brief  Append a C substring."},
{"lineNum":" 1226","line":"       *  @param __s  The C string to append."},
{"lineNum":" 1227","line":"       *  @param __n  The number of characters to append."},
{"lineNum":" 1228","line":"       *  @return  Reference to this string."},
{"lineNum":" 1229","line":"       */"},
{"lineNum":" 1230","line":"      basic_string&"},
{"lineNum":" 1231","line":"      append(const _CharT* __s, size_type __n)"},
{"lineNum":" 1232","line":"      {"},
{"lineNum":" 1233","line":"\t__glibcxx_requires_string_len(__s, __n);"},
{"lineNum":" 1234","line":"\t_M_check_length(size_type(0), __n, \"basic_string::append\");"},
{"lineNum":" 1235","line":"\treturn _M_append(__s, __n);"},
{"lineNum":" 1236","line":"      }"},
{"lineNum":" 1237","line":""},
{"lineNum":" 1238","line":"      /**"},
{"lineNum":" 1239","line":"       *  @brief  Append a C string."},
{"lineNum":" 1240","line":"       *  @param __s  The C string to append."},
{"lineNum":" 1241","line":"       *  @return  Reference to this string."},
{"lineNum":" 1242","line":"       */"},
{"lineNum":" 1243","line":"      basic_string&"},
{"lineNum":" 1244","line":"      append(const _CharT* __s)"},
{"lineNum":" 1245","line":"      {"},
{"lineNum":" 1246","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 1247","line":"\tconst size_type __n = traits_type::length(__s);"},
{"lineNum":" 1248","line":"\t_M_check_length(size_type(0), __n, \"basic_string::append\");"},
{"lineNum":" 1249","line":"\treturn _M_append(__s, __n);"},
{"lineNum":" 1250","line":"      }"},
{"lineNum":" 1251","line":""},
{"lineNum":" 1252","line":"      /**"},
{"lineNum":" 1253","line":"       *  @brief  Append multiple characters."},
{"lineNum":" 1254","line":"       *  @param __n  The number of characters to append."},
{"lineNum":" 1255","line":"       *  @param __c  The character to use."},
{"lineNum":" 1256","line":"       *  @return  Reference to this string."},
{"lineNum":" 1257","line":"       *"},
{"lineNum":" 1258","line":"       *  Appends __n copies of __c to this string."},
{"lineNum":" 1259","line":"       */"},
{"lineNum":" 1260","line":"      basic_string&"},
{"lineNum":" 1261","line":"      append(size_type __n, _CharT __c)"},
{"lineNum":" 1262","line":"      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }"},
{"lineNum":" 1263","line":""},
{"lineNum":" 1264","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1265","line":"      /**"},
{"lineNum":" 1266","line":"       *  @brief  Append an initializer_list of characters."},
{"lineNum":" 1267","line":"       *  @param __l  The initializer_list of characters to append."},
{"lineNum":" 1268","line":"       *  @return  Reference to this string."},
{"lineNum":" 1269","line":"       */"},
{"lineNum":" 1270","line":"      basic_string&"},
{"lineNum":" 1271","line":"      append(initializer_list<_CharT> __l)"},
{"lineNum":" 1272","line":"      { return this->append(__l.begin(), __l.size()); }"},
{"lineNum":" 1273","line":"#endif // C++11"},
{"lineNum":" 1274","line":""},
{"lineNum":" 1275","line":"      /**"},
{"lineNum":" 1276","line":"       *  @brief  Append a range of characters."},
{"lineNum":" 1277","line":"       *  @param __first  Iterator referencing the first character to append."},
{"lineNum":" 1278","line":"       *  @param __last  Iterator marking the end of the range."},
{"lineNum":" 1279","line":"       *  @return  Reference to this string."},
{"lineNum":" 1280","line":"       *"},
{"lineNum":" 1281","line":"       *  Appends characters in the range [__first,__last) to this string."},
{"lineNum":" 1282","line":"       */"},
{"lineNum":" 1283","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1284","line":"      template<class _InputIterator,"},
{"lineNum":" 1285","line":"\t       typename = std::_RequireInputIter<_InputIterator>>"},
{"lineNum":" 1286","line":"#else"},
{"lineNum":" 1287","line":"      template<class _InputIterator>"},
{"lineNum":" 1288","line":"#endif"},
{"lineNum":" 1289","line":"        basic_string&"},
{"lineNum":" 1290","line":"        append(_InputIterator __first, _InputIterator __last)"},
{"lineNum":" 1291","line":"        { return this->replace(end(), end(), __first, __last); }"},
{"lineNum":" 1292","line":""},
{"lineNum":" 1293","line":"#if __cplusplus > 201402L"},
{"lineNum":" 1294","line":"      /**"},
{"lineNum":" 1295","line":"       *  @brief  Append a string_view."},
{"lineNum":" 1296","line":"       *  @param __svt  An object convertible to string_view to be appended."},
{"lineNum":" 1297","line":"       *  @return  Reference to this string."},
{"lineNum":" 1298","line":"       */"},
{"lineNum":" 1299","line":"      template<typename _Tp>"},
{"lineNum":" 1300","line":"        _If_sv<_Tp, basic_string&>"},
{"lineNum":" 1301","line":"        append(const _Tp& __svt)"},
{"lineNum":" 1302","line":"        {"},
{"lineNum":" 1303","line":"          __sv_type __sv = __svt;"},
{"lineNum":" 1304","line":"          return this->append(__sv.data(), __sv.size());"},
{"lineNum":" 1305","line":"        }"},
{"lineNum":" 1306","line":""},
{"lineNum":" 1307","line":"      /**"},
{"lineNum":" 1308","line":"       *  @brief  Append a range of characters from a string_view."},
{"lineNum":" 1309","line":"       *  @param __svt  An object convertible to string_view to be appended from."},
{"lineNum":" 1310","line":"       *  @param __pos The position in the string_view to append from."},
{"lineNum":" 1311","line":"       *  @param __n   The number of characters to append from the string_view."},
{"lineNum":" 1312","line":"       *  @return  Reference to this string."},
{"lineNum":" 1313","line":"       */"},
{"lineNum":" 1314","line":"      template<typename _Tp>"},
{"lineNum":" 1315","line":"        _If_sv<_Tp, basic_string&>"},
{"lineNum":" 1316","line":"\tappend(const _Tp& __svt, size_type __pos, size_type __n = npos)"},
{"lineNum":" 1317","line":"\t{"},
{"lineNum":" 1318","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 1319","line":"\t  return _M_append(__sv.data()"},
{"lineNum":" 1320","line":"\t\t\t   + __sv._M_check(__pos, \"basic_string::append\"),"},
{"lineNum":" 1321","line":"\t\t\t   __sv._M_limit(__pos, __n));"},
{"lineNum":" 1322","line":"\t}"},
{"lineNum":" 1323","line":"#endif // C++17"},
{"lineNum":" 1324","line":""},
{"lineNum":" 1325","line":"      /**"},
{"lineNum":" 1326","line":"       *  @brief  Append a single character."},
{"lineNum":" 1327","line":"       *  @param __c  Character to append."},
{"lineNum":" 1328","line":"       */"},
{"lineNum":" 1329","line":"      void"},
{"lineNum":" 1330","line":"      push_back(_CharT __c)"},
{"lineNum":" 1331","line":"      {"},
{"lineNum":" 1332","line":"\tconst size_type __size = this->size();"},
{"lineNum":" 1333","line":"\tif (__size + 1 > this->capacity())"},
{"lineNum":" 1334","line":"\t  this->_M_mutate(__size, size_type(0), 0, size_type(1));"},
{"lineNum":" 1335","line":"\ttraits_type::assign(this->_M_data()[__size], __c);"},
{"lineNum":" 1336","line":"\tthis->_M_set_length(__size + 1);"},
{"lineNum":" 1337","line":"      }"},
{"lineNum":" 1338","line":""},
{"lineNum":" 1339","line":"      /**"},
{"lineNum":" 1340","line":"       *  @brief  Set value to contents of another string."},
{"lineNum":" 1341","line":"       *  @param  __str  Source string to use."},
{"lineNum":" 1342","line":"       *  @return  Reference to this string."},
{"lineNum":" 1343","line":"       */"},
{"lineNum":" 1344","line":"      basic_string&"},
{"lineNum":" 1345","line":"      assign(const basic_string& __str)"},
{"lineNum":" 1346","line":"      {"},
{"lineNum":" 1347","line":"\tthis->_M_assign(__str);"},
{"lineNum":" 1348","line":"\treturn *this;"},
{"lineNum":" 1349","line":"      }"},
{"lineNum":" 1350","line":""},
{"lineNum":" 1351","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1352","line":"      /**"},
{"lineNum":" 1353","line":"       *  @brief  Set value to contents of another string."},
{"lineNum":" 1354","line":"       *  @param  __str  Source string to use."},
{"lineNum":" 1355","line":"       *  @return  Reference to this string."},
{"lineNum":" 1356","line":"       *"},
{"lineNum":" 1357","line":"       *  This function sets this string to the exact contents of @a __str."},
{"lineNum":" 1358","line":"       *  @a __str is a valid, but unspecified string."},
{"lineNum":" 1359","line":"       */"},
{"lineNum":" 1360","line":"      basic_string&"},
{"lineNum":" 1361","line":"      assign(basic_string&& __str)"},
{"lineNum":" 1362","line":"      noexcept(_Alloc_traits::_S_nothrow_move())"},
{"lineNum":" 1363","line":"      {"},
{"lineNum":" 1364","line":"\t// _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":" 1365","line":"\t// 2063. Contradictory requirements for string move assignment"},
{"lineNum":" 1366","line":"\treturn *this = std::move(__str);"},
{"lineNum":" 1367","line":"      }"},
{"lineNum":" 1368","line":"#endif // C++11"},
{"lineNum":" 1369","line":""},
{"lineNum":" 1370","line":"      /**"},
{"lineNum":" 1371","line":"       *  @brief  Set value to a substring of a string."},
{"lineNum":" 1372","line":"       *  @param __str  The string to use."},
{"lineNum":" 1373","line":"       *  @param __pos  Index of the first character of str."},
{"lineNum":" 1374","line":"       *  @param __n  Number of characters to use."},
{"lineNum":" 1375","line":"       *  @return  Reference to this string."},
{"lineNum":" 1376","line":"       *  @throw  std::out_of_range if @a pos is not a valid index."},
{"lineNum":" 1377","line":"       *"},
{"lineNum":" 1378","line":"       *  This function sets this string to the substring of @a __str"},
{"lineNum":" 1379","line":"       *  consisting of @a __n characters at @a __pos.  If @a __n is"},
{"lineNum":" 1380","line":"       *  is larger than the number of available characters in @a"},
{"lineNum":" 1381","line":"       *  __str, the remainder of @a __str is used."},
{"lineNum":" 1382","line":"       */"},
{"lineNum":" 1383","line":"      basic_string&"},
{"lineNum":" 1384","line":"      assign(const basic_string& __str, size_type __pos, size_type __n)"},
{"lineNum":" 1385","line":"      { return _M_replace(size_type(0), this->size(), __str._M_data()"},
{"lineNum":" 1386","line":"\t\t\t  + __str._M_check(__pos, \"basic_string::assign\"),"},
{"lineNum":" 1387","line":"\t\t\t  __str._M_limit(__pos, __n)); }"},
{"lineNum":" 1388","line":""},
{"lineNum":" 1389","line":"      /**"},
{"lineNum":" 1390","line":"       *  @brief  Set value to a C substring."},
{"lineNum":" 1391","line":"       *  @param __s  The C string to use."},
{"lineNum":" 1392","line":"       *  @param __n  Number of characters to use."},
{"lineNum":" 1393","line":"       *  @return  Reference to this string."},
{"lineNum":" 1394","line":"       *"},
{"lineNum":" 1395","line":"       *  This function sets the value of this string to the first @a __n"},
{"lineNum":" 1396","line":"       *  characters of @a __s.  If @a __n is is larger than the number of"},
{"lineNum":" 1397","line":"       *  available characters in @a __s, the remainder of @a __s is used."},
{"lineNum":" 1398","line":"       */"},
{"lineNum":" 1399","line":"      basic_string&"},
{"lineNum":" 1400","line":"      assign(const _CharT* __s, size_type __n)"},
{"lineNum":" 1401","line":"      {"},
{"lineNum":" 1402","line":"\t__glibcxx_requires_string_len(__s, __n);"},
{"lineNum":" 1403","line":"\treturn _M_replace(size_type(0), this->size(), __s, __n);"},
{"lineNum":" 1404","line":"      }"},
{"lineNum":" 1405","line":""},
{"lineNum":" 1406","line":"      /**"},
{"lineNum":" 1407","line":"       *  @brief  Set value to contents of a C string."},
{"lineNum":" 1408","line":"       *  @param __s  The C string to use."},
{"lineNum":" 1409","line":"       *  @return  Reference to this string."},
{"lineNum":" 1410","line":"       *"},
{"lineNum":" 1411","line":"       *  This function sets the value of this string to the value of @a __s."},
{"lineNum":" 1412","line":"       *  The data is copied, so there is no dependence on @a __s once the"},
{"lineNum":" 1413","line":"       *  function returns."},
{"lineNum":" 1414","line":"       */"},
{"lineNum":" 1415","line":"      basic_string&"},
{"lineNum":" 1416","line":"      assign(const _CharT* __s)"},
{"lineNum":" 1417","line":"      {"},
{"lineNum":" 1418","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 1419","line":"\treturn _M_replace(size_type(0), this->size(), __s,"},
{"lineNum":" 1420","line":"\t\t\t  traits_type::length(__s));"},
{"lineNum":" 1421","line":"      }"},
{"lineNum":" 1422","line":""},
{"lineNum":" 1423","line":"      /**"},
{"lineNum":" 1424","line":"       *  @brief  Set value to multiple characters."},
{"lineNum":" 1425","line":"       *  @param __n  Length of the resulting string."},
{"lineNum":" 1426","line":"       *  @param __c  The character to use."},
{"lineNum":" 1427","line":"       *  @return  Reference to this string."},
{"lineNum":" 1428","line":"       *"},
{"lineNum":" 1429","line":"       *  This function sets the value of this string to @a __n copies of"},
{"lineNum":" 1430","line":"       *  character @a __c."},
{"lineNum":" 1431","line":"       */"},
{"lineNum":" 1432","line":"      basic_string&"},
{"lineNum":" 1433","line":"      assign(size_type __n, _CharT __c)"},
{"lineNum":" 1434","line":"      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }"},
{"lineNum":" 1435","line":""},
{"lineNum":" 1436","line":"      /**"},
{"lineNum":" 1437","line":"       *  @brief  Set value to a range of characters."},
{"lineNum":" 1438","line":"       *  @param __first  Iterator referencing the first character to append."},
{"lineNum":" 1439","line":"       *  @param __last  Iterator marking the end of the range."},
{"lineNum":" 1440","line":"       *  @return  Reference to this string."},
{"lineNum":" 1441","line":"       *"},
{"lineNum":" 1442","line":"       *  Sets value of string to characters in the range [__first,__last)."},
{"lineNum":" 1443","line":"      */"},
{"lineNum":" 1444","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1445","line":"      template<class _InputIterator,"},
{"lineNum":" 1446","line":"\t       typename = std::_RequireInputIter<_InputIterator>>"},
{"lineNum":" 1447","line":"#else"},
{"lineNum":" 1448","line":"      template<class _InputIterator>"},
{"lineNum":" 1449","line":"#endif"},
{"lineNum":" 1450","line":"        basic_string&"},
{"lineNum":" 1451","line":"        assign(_InputIterator __first, _InputIterator __last)"},
{"lineNum":" 1452","line":"        { return this->replace(begin(), end(), __first, __last); }"},
{"lineNum":" 1453","line":""},
{"lineNum":" 1454","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1455","line":"      /**"},
{"lineNum":" 1456","line":"       *  @brief  Set value to an initializer_list of characters."},
{"lineNum":" 1457","line":"       *  @param __l  The initializer_list of characters to assign."},
{"lineNum":" 1458","line":"       *  @return  Reference to this string."},
{"lineNum":" 1459","line":"       */"},
{"lineNum":" 1460","line":"      basic_string&"},
{"lineNum":" 1461","line":"      assign(initializer_list<_CharT> __l)"},
{"lineNum":" 1462","line":"      { return this->assign(__l.begin(), __l.size()); }"},
{"lineNum":" 1463","line":"#endif // C++11"},
{"lineNum":" 1464","line":""},
{"lineNum":" 1465","line":"#if __cplusplus > 201402L"},
{"lineNum":" 1466","line":"      /**"},
{"lineNum":" 1467","line":"       *  @brief  Set value from a string_view."},
{"lineNum":" 1468","line":"       *  @param __svt  The source object convertible to string_view."},
{"lineNum":" 1469","line":"       *  @return  Reference to this string."},
{"lineNum":" 1470","line":"       */"},
{"lineNum":" 1471","line":"      template<typename _Tp>"},
{"lineNum":" 1472","line":"\t_If_sv<_Tp, basic_string&>"},
{"lineNum":" 1473","line":"\tassign(const _Tp& __svt)"},
{"lineNum":" 1474","line":"\t{"},
{"lineNum":" 1475","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 1476","line":"\t  return this->assign(__sv.data(), __sv.size());"},
{"lineNum":" 1477","line":"\t}"},
{"lineNum":" 1478","line":""},
{"lineNum":" 1479","line":"      /**"},
{"lineNum":" 1480","line":"       *  @brief  Set value from a range of characters in a string_view."},
{"lineNum":" 1481","line":"       *  @param __svt  The source object convertible to string_view."},
{"lineNum":" 1482","line":"       *  @param __pos  The position in the string_view to assign from."},
{"lineNum":" 1483","line":"       *  @param __n  The number of characters to assign."},
{"lineNum":" 1484","line":"       *  @return  Reference to this string."},
{"lineNum":" 1485","line":"       */"},
{"lineNum":" 1486","line":"      template<typename _Tp>"},
{"lineNum":" 1487","line":"\t_If_sv<_Tp, basic_string&>"},
{"lineNum":" 1488","line":"\tassign(const _Tp& __svt, size_type __pos, size_type __n = npos)"},
{"lineNum":" 1489","line":"\t{"},
{"lineNum":" 1490","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 1491","line":"\t  return _M_replace(size_type(0), this->size(), __sv.data()"},
{"lineNum":" 1492","line":"\t\t\t    + __sv._M_check(__pos, \"basic_string::assign\"),"},
{"lineNum":" 1493","line":"\t\t\t    __sv._M_limit(__pos, __n));"},
{"lineNum":" 1494","line":"\t}"},
{"lineNum":" 1495","line":"#endif // C++17"},
{"lineNum":" 1496","line":""},
{"lineNum":" 1497","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1498","line":"      /**"},
{"lineNum":" 1499","line":"       *  @brief  Insert multiple characters."},
{"lineNum":" 1500","line":"       *  @param __p  Const_iterator referencing location in string to"},
{"lineNum":" 1501","line":"       *              insert at."},
{"lineNum":" 1502","line":"       *  @param __n  Number of characters to insert"},
{"lineNum":" 1503","line":"       *  @param __c  The character to insert."},
{"lineNum":" 1504","line":"       *  @return  Iterator referencing the first inserted char."},
{"lineNum":" 1505","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1506","line":"       *"},
{"lineNum":" 1507","line":"       *  Inserts @a __n copies of character @a __c starting at the"},
{"lineNum":" 1508","line":"       *  position referenced by iterator @a __p.  If adding"},
{"lineNum":" 1509","line":"       *  characters causes the length to exceed max_size(),"},
{"lineNum":" 1510","line":"       *  length_error is thrown.  The value of the string doesn\'t"},
{"lineNum":" 1511","line":"       *  change if an error is thrown."},
{"lineNum":" 1512","line":"      */"},
{"lineNum":" 1513","line":"      iterator"},
{"lineNum":" 1514","line":"      insert(const_iterator __p, size_type __n, _CharT __c)"},
{"lineNum":" 1515","line":"      {"},
{"lineNum":" 1516","line":"\t_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());"},
{"lineNum":" 1517","line":"\tconst size_type __pos = __p - begin();"},
{"lineNum":" 1518","line":"\tthis->replace(__p, __p, __n, __c);"},
{"lineNum":" 1519","line":"\treturn iterator(this->_M_data() + __pos);"},
{"lineNum":" 1520","line":"      }"},
{"lineNum":" 1521","line":"#else"},
{"lineNum":" 1522","line":"      /**"},
{"lineNum":" 1523","line":"       *  @brief  Insert multiple characters."},
{"lineNum":" 1524","line":"       *  @param __p  Iterator referencing location in string to insert at."},
{"lineNum":" 1525","line":"       *  @param __n  Number of characters to insert"},
{"lineNum":" 1526","line":"       *  @param __c  The character to insert."},
{"lineNum":" 1527","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1528","line":"       *"},
{"lineNum":" 1529","line":"       *  Inserts @a __n copies of character @a __c starting at the"},
{"lineNum":" 1530","line":"       *  position referenced by iterator @a __p.  If adding"},
{"lineNum":" 1531","line":"       *  characters causes the length to exceed max_size(),"},
{"lineNum":" 1532","line":"       *  length_error is thrown.  The value of the string doesn\'t"},
{"lineNum":" 1533","line":"       *  change if an error is thrown."},
{"lineNum":" 1534","line":"      */"},
{"lineNum":" 1535","line":"      void"},
{"lineNum":" 1536","line":"      insert(iterator __p, size_type __n, _CharT __c)"},
{"lineNum":" 1537","line":"      {\tthis->replace(__p, __p, __n, __c);  }"},
{"lineNum":" 1538","line":"#endif"},
{"lineNum":" 1539","line":""},
{"lineNum":" 1540","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1541","line":"      /**"},
{"lineNum":" 1542","line":"       *  @brief  Insert a range of characters."},
{"lineNum":" 1543","line":"       *  @param __p  Const_iterator referencing location in string to"},
{"lineNum":" 1544","line":"       *              insert at."},
{"lineNum":" 1545","line":"       *  @param __beg  Start of range."},
{"lineNum":" 1546","line":"       *  @param __end  End of range."},
{"lineNum":" 1547","line":"       *  @return  Iterator referencing the first inserted char."},
{"lineNum":" 1548","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1549","line":"       *"},
{"lineNum":" 1550","line":"       *  Inserts characters in range [beg,end).  If adding characters"},
{"lineNum":" 1551","line":"       *  causes the length to exceed max_size(), length_error is"},
{"lineNum":" 1552","line":"       *  thrown.  The value of the string doesn\'t change if an error"},
{"lineNum":" 1553","line":"       *  is thrown."},
{"lineNum":" 1554","line":"      */"},
{"lineNum":" 1555","line":"      template<class _InputIterator,"},
{"lineNum":" 1556","line":"\t       typename = std::_RequireInputIter<_InputIterator>>"},
{"lineNum":" 1557","line":"\titerator"},
{"lineNum":" 1558","line":"        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)"},
{"lineNum":" 1559","line":"        {"},
{"lineNum":" 1560","line":"\t  _GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());"},
{"lineNum":" 1561","line":"\t  const size_type __pos = __p - begin();"},
{"lineNum":" 1562","line":"\t  this->replace(__p, __p, __beg, __end);"},
{"lineNum":" 1563","line":"\t  return iterator(this->_M_data() + __pos);"},
{"lineNum":" 1564","line":"\t}"},
{"lineNum":" 1565","line":"#else"},
{"lineNum":" 1566","line":"      /**"},
{"lineNum":" 1567","line":"       *  @brief  Insert a range of characters."},
{"lineNum":" 1568","line":"       *  @param __p  Iterator referencing location in string to insert at."},
{"lineNum":" 1569","line":"       *  @param __beg  Start of range."},
{"lineNum":" 1570","line":"       *  @param __end  End of range."},
{"lineNum":" 1571","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1572","line":"       *"},
{"lineNum":" 1573","line":"       *  Inserts characters in range [__beg,__end).  If adding"},
{"lineNum":" 1574","line":"       *  characters causes the length to exceed max_size(),"},
{"lineNum":" 1575","line":"       *  length_error is thrown.  The value of the string doesn\'t"},
{"lineNum":" 1576","line":"       *  change if an error is thrown."},
{"lineNum":" 1577","line":"      */"},
{"lineNum":" 1578","line":"      template<class _InputIterator>"},
{"lineNum":" 1579","line":"        void"},
{"lineNum":" 1580","line":"        insert(iterator __p, _InputIterator __beg, _InputIterator __end)"},
{"lineNum":" 1581","line":"        { this->replace(__p, __p, __beg, __end); }"},
{"lineNum":" 1582","line":"#endif"},
{"lineNum":" 1583","line":""},
{"lineNum":" 1584","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1585","line":"      /**"},
{"lineNum":" 1586","line":"       *  @brief  Insert an initializer_list of characters."},
{"lineNum":" 1587","line":"       *  @param __p  Iterator referencing location in string to insert at."},
{"lineNum":" 1588","line":"       *  @param __l  The initializer_list of characters to insert."},
{"lineNum":" 1589","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1590","line":"       */"},
{"lineNum":" 1591","line":"      void"},
{"lineNum":" 1592","line":"      insert(iterator __p, initializer_list<_CharT> __l)"},
{"lineNum":" 1593","line":"      {"},
{"lineNum":" 1594","line":"\t_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());"},
{"lineNum":" 1595","line":"\tthis->insert(__p - begin(), __l.begin(), __l.size());"},
{"lineNum":" 1596","line":"      }"},
{"lineNum":" 1597","line":"#endif // C++11"},
{"lineNum":" 1598","line":""},
{"lineNum":" 1599","line":"      /**"},
{"lineNum":" 1600","line":"       *  @brief  Insert value of a string."},
{"lineNum":" 1601","line":"       *  @param __pos1  Iterator referencing location in string to insert at."},
{"lineNum":" 1602","line":"       *  @param __str  The string to insert."},
{"lineNum":" 1603","line":"       *  @return  Reference to this string."},
{"lineNum":" 1604","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1605","line":"       *"},
{"lineNum":" 1606","line":"       *  Inserts value of @a __str starting at @a __pos1.  If adding"},
{"lineNum":" 1607","line":"       *  characters causes the length to exceed max_size(),"},
{"lineNum":" 1608","line":"       *  length_error is thrown.  The value of the string doesn\'t"},
{"lineNum":" 1609","line":"       *  change if an error is thrown."},
{"lineNum":" 1610","line":"      */"},
{"lineNum":" 1611","line":"      basic_string&"},
{"lineNum":" 1612","line":"      insert(size_type __pos1, const basic_string& __str)"},
{"lineNum":" 1613","line":"      { return this->replace(__pos1, size_type(0),"},
{"lineNum":" 1614","line":"\t\t\t     __str._M_data(), __str.size()); }"},
{"lineNum":" 1615","line":""},
{"lineNum":" 1616","line":"      /**"},
{"lineNum":" 1617","line":"       *  @brief  Insert a substring."},
{"lineNum":" 1618","line":"       *  @param __pos1  Iterator referencing location in string to insert at."},
{"lineNum":" 1619","line":"       *  @param __str  The string to insert."},
{"lineNum":" 1620","line":"       *  @param __pos2  Start of characters in str to insert."},
{"lineNum":" 1621","line":"       *  @param __n  Number of characters to insert."},
{"lineNum":" 1622","line":"       *  @return  Reference to this string."},
{"lineNum":" 1623","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1624","line":"       *  @throw  std::out_of_range  If @a pos1 > size() or"},
{"lineNum":" 1625","line":"       *  @a __pos2 > @a str.size()."},
{"lineNum":" 1626","line":"       *"},
{"lineNum":" 1627","line":"       *  Starting at @a pos1, insert @a __n character of @a __str"},
{"lineNum":" 1628","line":"       *  beginning with @a __pos2.  If adding characters causes the"},
{"lineNum":" 1629","line":"       *  length to exceed max_size(), length_error is thrown.  If @a"},
{"lineNum":" 1630","line":"       *  __pos1 is beyond the end of this string or @a __pos2 is"},
{"lineNum":" 1631","line":"       *  beyond the end of @a __str, out_of_range is thrown.  The"},
{"lineNum":" 1632","line":"       *  value of the string doesn\'t change if an error is thrown."},
{"lineNum":" 1633","line":"      */"},
{"lineNum":" 1634","line":"      basic_string&"},
{"lineNum":" 1635","line":"      insert(size_type __pos1, const basic_string& __str,"},
{"lineNum":" 1636","line":"\t     size_type __pos2, size_type __n)"},
{"lineNum":" 1637","line":"      { return this->replace(__pos1, size_type(0), __str._M_data()"},
{"lineNum":" 1638","line":"\t\t\t     + __str._M_check(__pos2, \"basic_string::insert\"),"},
{"lineNum":" 1639","line":"\t\t\t     __str._M_limit(__pos2, __n)); }"},
{"lineNum":" 1640","line":""},
{"lineNum":" 1641","line":"      /**"},
{"lineNum":" 1642","line":"       *  @brief  Insert a C substring."},
{"lineNum":" 1643","line":"       *  @param __pos  Iterator referencing location in string to insert at."},
{"lineNum":" 1644","line":"       *  @param __s  The C string to insert."},
{"lineNum":" 1645","line":"       *  @param __n  The number of characters to insert."},
{"lineNum":" 1646","line":"       *  @return  Reference to this string."},
{"lineNum":" 1647","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1648","line":"       *  @throw  std::out_of_range  If @a __pos is beyond the end of this"},
{"lineNum":" 1649","line":"       *  string."},
{"lineNum":" 1650","line":"       *"},
{"lineNum":" 1651","line":"       *  Inserts the first @a __n characters of @a __s starting at @a"},
{"lineNum":" 1652","line":"       *  __pos.  If adding characters causes the length to exceed"},
{"lineNum":" 1653","line":"       *  max_size(), length_error is thrown.  If @a __pos is beyond"},
{"lineNum":" 1654","line":"       *  end(), out_of_range is thrown.  The value of the string"},
{"lineNum":" 1655","line":"       *  doesn\'t change if an error is thrown."},
{"lineNum":" 1656","line":"      */"},
{"lineNum":" 1657","line":"      basic_string&"},
{"lineNum":" 1658","line":"      insert(size_type __pos, const _CharT* __s, size_type __n)"},
{"lineNum":" 1659","line":"      { return this->replace(__pos, size_type(0), __s, __n); }"},
{"lineNum":" 1660","line":""},
{"lineNum":" 1661","line":"      /**"},
{"lineNum":" 1662","line":"       *  @brief  Insert a C string."},
{"lineNum":" 1663","line":"       *  @param __pos  Iterator referencing location in string to insert at."},
{"lineNum":" 1664","line":"       *  @param __s  The C string to insert."},
{"lineNum":" 1665","line":"       *  @return  Reference to this string."},
{"lineNum":" 1666","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1667","line":"       *  @throw  std::out_of_range  If @a pos is beyond the end of this"},
{"lineNum":" 1668","line":"       *  string."},
{"lineNum":" 1669","line":"       *"},
{"lineNum":" 1670","line":"       *  Inserts the first @a n characters of @a __s starting at @a __pos.  If"},
{"lineNum":" 1671","line":"       *  adding characters causes the length to exceed max_size(),"},
{"lineNum":" 1672","line":"       *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is"},
{"lineNum":" 1673","line":"       *  thrown.  The value of the string doesn\'t change if an error is"},
{"lineNum":" 1674","line":"       *  thrown."},
{"lineNum":" 1675","line":"      */"},
{"lineNum":" 1676","line":"      basic_string&"},
{"lineNum":" 1677","line":"      insert(size_type __pos, const _CharT* __s)"},
{"lineNum":" 1678","line":"      {"},
{"lineNum":" 1679","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 1680","line":"\treturn this->replace(__pos, size_type(0), __s,"},
{"lineNum":" 1681","line":"\t\t\t     traits_type::length(__s));"},
{"lineNum":" 1682","line":"      }"},
{"lineNum":" 1683","line":""},
{"lineNum":" 1684","line":"      /**"},
{"lineNum":" 1685","line":"       *  @brief  Insert multiple characters."},
{"lineNum":" 1686","line":"       *  @param __pos  Index in string to insert at."},
{"lineNum":" 1687","line":"       *  @param __n  Number of characters to insert"},
{"lineNum":" 1688","line":"       *  @param __c  The character to insert."},
{"lineNum":" 1689","line":"       *  @return  Reference to this string."},
{"lineNum":" 1690","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1691","line":"       *  @throw  std::out_of_range  If @a __pos is beyond the end of this"},
{"lineNum":" 1692","line":"       *  string."},
{"lineNum":" 1693","line":"       *"},
{"lineNum":" 1694","line":"       *  Inserts @a __n copies of character @a __c starting at index"},
{"lineNum":" 1695","line":"       *  @a __pos.  If adding characters causes the length to exceed"},
{"lineNum":" 1696","line":"       *  max_size(), length_error is thrown.  If @a __pos > length(),"},
{"lineNum":" 1697","line":"       *  out_of_range is thrown.  The value of the string doesn\'t"},
{"lineNum":" 1698","line":"       *  change if an error is thrown."},
{"lineNum":" 1699","line":"      */"},
{"lineNum":" 1700","line":"      basic_string&"},
{"lineNum":" 1701","line":"      insert(size_type __pos, size_type __n, _CharT __c)"},
{"lineNum":" 1702","line":"      { return _M_replace_aux(_M_check(__pos, \"basic_string::insert\"),"},
{"lineNum":" 1703","line":"\t\t\t      size_type(0), __n, __c); }"},
{"lineNum":" 1704","line":""},
{"lineNum":" 1705","line":"      /**"},
{"lineNum":" 1706","line":"       *  @brief  Insert one character."},
{"lineNum":" 1707","line":"       *  @param __p  Iterator referencing position in string to insert at."},
{"lineNum":" 1708","line":"       *  @param __c  The character to insert."},
{"lineNum":" 1709","line":"       *  @return  Iterator referencing newly inserted char."},
{"lineNum":" 1710","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1711","line":"       *"},
{"lineNum":" 1712","line":"       *  Inserts character @a __c at position referenced by @a __p."},
{"lineNum":" 1713","line":"       *  If adding character causes the length to exceed max_size(),"},
{"lineNum":" 1714","line":"       *  length_error is thrown.  If @a __p is beyond end of string,"},
{"lineNum":" 1715","line":"       *  out_of_range is thrown.  The value of the string doesn\'t"},
{"lineNum":" 1716","line":"       *  change if an error is thrown."},
{"lineNum":" 1717","line":"      */"},
{"lineNum":" 1718","line":"      iterator"},
{"lineNum":" 1719","line":"      insert(__const_iterator __p, _CharT __c)"},
{"lineNum":" 1720","line":"      {"},
{"lineNum":" 1721","line":"\t_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());"},
{"lineNum":" 1722","line":"\tconst size_type __pos = __p - begin();"},
{"lineNum":" 1723","line":"\t_M_replace_aux(__pos, size_type(0), size_type(1), __c);"},
{"lineNum":" 1724","line":"\treturn iterator(_M_data() + __pos);"},
{"lineNum":" 1725","line":"      }"},
{"lineNum":" 1726","line":""},
{"lineNum":" 1727","line":"#if __cplusplus > 201402L"},
{"lineNum":" 1728","line":"      /**"},
{"lineNum":" 1729","line":"       *  @brief  Insert a string_view."},
{"lineNum":" 1730","line":"       *  @param __pos  Iterator referencing position in string to insert at."},
{"lineNum":" 1731","line":"       *  @param __svt  The object convertible to string_view to insert."},
{"lineNum":" 1732","line":"       *  @return  Reference to this string."},
{"lineNum":" 1733","line":"      */"},
{"lineNum":" 1734","line":"      template<typename _Tp>"},
{"lineNum":" 1735","line":"\t_If_sv<_Tp, basic_string&>"},
{"lineNum":" 1736","line":"\tinsert(size_type __pos, const _Tp& __svt)"},
{"lineNum":" 1737","line":"\t{"},
{"lineNum":" 1738","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 1739","line":"\t  return this->insert(__pos, __sv.data(), __sv.size());"},
{"lineNum":" 1740","line":"\t}"},
{"lineNum":" 1741","line":""},
{"lineNum":" 1742","line":"      /**"},
{"lineNum":" 1743","line":"       *  @brief  Insert a string_view."},
{"lineNum":" 1744","line":"       *  @param __pos  Iterator referencing position in string to insert at."},
{"lineNum":" 1745","line":"       *  @param __svt  The object convertible to string_view to insert from."},
{"lineNum":" 1746","line":"       *  @param __pos  Iterator referencing position in string_view to insert"},
{"lineNum":" 1747","line":"       *  from."},
{"lineNum":" 1748","line":"       *  @param __n    The number of characters to insert."},
{"lineNum":" 1749","line":"       *  @return  Reference to this string."},
{"lineNum":" 1750","line":"      */"},
{"lineNum":" 1751","line":"      template<typename _Tp>"},
{"lineNum":" 1752","line":"\t_If_sv<_Tp, basic_string&>"},
{"lineNum":" 1753","line":"\tinsert(size_type __pos1, const _Tp& __svt,"},
{"lineNum":" 1754","line":"\t       size_type __pos2, size_type __n = npos)"},
{"lineNum":" 1755","line":"\t{"},
{"lineNum":" 1756","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 1757","line":"\t  return this->replace(__pos1, size_type(0), __sv.data()"},
{"lineNum":" 1758","line":"\t\t\t       + __sv._M_check(__pos2, \"basic_string::insert\"),"},
{"lineNum":" 1759","line":"\t\t\t       __sv._M_limit(__pos2, __n));"},
{"lineNum":" 1760","line":"\t}"},
{"lineNum":" 1761","line":"#endif // C++17"},
{"lineNum":" 1762","line":""},
{"lineNum":" 1763","line":"      /**"},
{"lineNum":" 1764","line":"       *  @brief  Remove characters."},
{"lineNum":" 1765","line":"       *  @param __pos  Index of first character to remove (default 0)."},
{"lineNum":" 1766","line":"       *  @param __n  Number of characters to remove (default remainder)."},
{"lineNum":" 1767","line":"       *  @return  Reference to this string."},
{"lineNum":" 1768","line":"       *  @throw  std::out_of_range  If @a pos is beyond the end of this"},
{"lineNum":" 1769","line":"       *  string."},
{"lineNum":" 1770","line":"       *"},
{"lineNum":" 1771","line":"       *  Removes @a __n characters from this string starting at @a"},
{"lineNum":" 1772","line":"       *  __pos.  The length of the string is reduced by @a __n.  If"},
{"lineNum":" 1773","line":"       *  there are < @a __n characters to remove, the remainder of"},
{"lineNum":" 1774","line":"       *  the string is truncated.  If @a __p is beyond end of string,"},
{"lineNum":" 1775","line":"       *  out_of_range is thrown.  The value of the string doesn\'t"},
{"lineNum":" 1776","line":"       *  change if an error is thrown."},
{"lineNum":" 1777","line":"      */"},
{"lineNum":" 1778","line":"      basic_string&"},
{"lineNum":" 1779","line":"      erase(size_type __pos = 0, size_type __n = npos)"},
{"lineNum":" 1780","line":"      {"},
{"lineNum":" 1781","line":"\t_M_check(__pos, \"basic_string::erase\");"},
{"lineNum":" 1782","line":"\tif (__n == npos)"},
{"lineNum":" 1783","line":"\t  this->_M_set_length(__pos);"},
{"lineNum":" 1784","line":"\telse if (__n != 0)"},
{"lineNum":" 1785","line":"\t  this->_M_erase(__pos, _M_limit(__pos, __n));"},
{"lineNum":" 1786","line":"\treturn *this;"},
{"lineNum":" 1787","line":"      }"},
{"lineNum":" 1788","line":""},
{"lineNum":" 1789","line":"      /**"},
{"lineNum":" 1790","line":"       *  @brief  Remove one character."},
{"lineNum":" 1791","line":"       *  @param __position  Iterator referencing the character to remove."},
{"lineNum":" 1792","line":"       *  @return  iterator referencing same location after removal."},
{"lineNum":" 1793","line":"       *"},
{"lineNum":" 1794","line":"       *  Removes the character at @a __position from this string. The value"},
{"lineNum":" 1795","line":"       *  of the string doesn\'t change if an error is thrown."},
{"lineNum":" 1796","line":"      */"},
{"lineNum":" 1797","line":"      iterator"},
{"lineNum":" 1798","line":"      erase(__const_iterator __position)"},
{"lineNum":" 1799","line":"      {"},
{"lineNum":" 1800","line":"\t_GLIBCXX_DEBUG_PEDASSERT(__position >= begin()"},
{"lineNum":" 1801","line":"\t\t\t\t && __position < end());"},
{"lineNum":" 1802","line":"\tconst size_type __pos = __position - begin();"},
{"lineNum":" 1803","line":"\tthis->_M_erase(__pos, size_type(1));"},
{"lineNum":" 1804","line":"\treturn iterator(_M_data() + __pos);"},
{"lineNum":" 1805","line":"      }"},
{"lineNum":" 1806","line":""},
{"lineNum":" 1807","line":"      /**"},
{"lineNum":" 1808","line":"       *  @brief  Remove a range of characters."},
{"lineNum":" 1809","line":"       *  @param __first  Iterator referencing the first character to remove."},
{"lineNum":" 1810","line":"       *  @param __last  Iterator referencing the end of the range."},
{"lineNum":" 1811","line":"       *  @return  Iterator referencing location of first after removal."},
{"lineNum":" 1812","line":"       *"},
{"lineNum":" 1813","line":"       *  Removes the characters in the range [first,last) from this string."},
{"lineNum":" 1814","line":"       *  The value of the string doesn\'t change if an error is thrown."},
{"lineNum":" 1815","line":"      */"},
{"lineNum":" 1816","line":"      iterator"},
{"lineNum":" 1817","line":"      erase(__const_iterator __first, __const_iterator __last)"},
{"lineNum":" 1818","line":"      {"},
{"lineNum":" 1819","line":"\t_GLIBCXX_DEBUG_PEDASSERT(__first >= begin() && __first <= __last"},
{"lineNum":" 1820","line":"\t\t\t\t && __last <= end());"},
{"lineNum":" 1821","line":"        const size_type __pos = __first - begin();"},
{"lineNum":" 1822","line":"\tif (__last == end())"},
{"lineNum":" 1823","line":"\t  this->_M_set_length(__pos);"},
{"lineNum":" 1824","line":"\telse"},
{"lineNum":" 1825","line":"\t  this->_M_erase(__pos, __last - __first);"},
{"lineNum":" 1826","line":"\treturn iterator(this->_M_data() + __pos);"},
{"lineNum":" 1827","line":"      }"},
{"lineNum":" 1828","line":""},
{"lineNum":" 1829","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1830","line":"      /**"},
{"lineNum":" 1831","line":"       *  @brief  Remove the last character."},
{"lineNum":" 1832","line":"       *"},
{"lineNum":" 1833","line":"       *  The string must be non-empty."},
{"lineNum":" 1834","line":"       */"},
{"lineNum":" 1835","line":"      void"},
{"lineNum":" 1836","line":"      pop_back() noexcept"},
{"lineNum":" 1837","line":"      {"},
{"lineNum":" 1838","line":"\t__glibcxx_assert(!empty());"},
{"lineNum":" 1839","line":"\t_M_erase(size() - 1, 1);"},
{"lineNum":" 1840","line":"      }"},
{"lineNum":" 1841","line":"#endif // C++11"},
{"lineNum":" 1842","line":""},
{"lineNum":" 1843","line":"      /**"},
{"lineNum":" 1844","line":"       *  @brief  Replace characters with value from another string."},
{"lineNum":" 1845","line":"       *  @param __pos  Index of first character to replace."},
{"lineNum":" 1846","line":"       *  @param __n  Number of characters to be replaced."},
{"lineNum":" 1847","line":"       *  @param __str  String to insert."},
{"lineNum":" 1848","line":"       *  @return  Reference to this string."},
{"lineNum":" 1849","line":"       *  @throw  std::out_of_range  If @a pos is beyond the end of this"},
{"lineNum":" 1850","line":"       *  string."},
{"lineNum":" 1851","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1852","line":"       *"},
{"lineNum":" 1853","line":"       *  Removes the characters in the range [__pos,__pos+__n) from"},
{"lineNum":" 1854","line":"       *  this string.  In place, the value of @a __str is inserted."},
{"lineNum":" 1855","line":"       *  If @a __pos is beyond end of string, out_of_range is thrown."},
{"lineNum":" 1856","line":"       *  If the length of the result exceeds max_size(), length_error"},
{"lineNum":" 1857","line":"       *  is thrown.  The value of the string doesn\'t change if an"},
{"lineNum":" 1858","line":"       *  error is thrown."},
{"lineNum":" 1859","line":"      */"},
{"lineNum":" 1860","line":"      basic_string&"},
{"lineNum":" 1861","line":"      replace(size_type __pos, size_type __n, const basic_string& __str)"},
{"lineNum":" 1862","line":"      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }"},
{"lineNum":" 1863","line":""},
{"lineNum":" 1864","line":"      /**"},
{"lineNum":" 1865","line":"       *  @brief  Replace characters with value from another string."},
{"lineNum":" 1866","line":"       *  @param __pos1  Index of first character to replace."},
{"lineNum":" 1867","line":"       *  @param __n1  Number of characters to be replaced."},
{"lineNum":" 1868","line":"       *  @param __str  String to insert."},
{"lineNum":" 1869","line":"       *  @param __pos2  Index of first character of str to use."},
{"lineNum":" 1870","line":"       *  @param __n2  Number of characters from str to use."},
{"lineNum":" 1871","line":"       *  @return  Reference to this string."},
{"lineNum":" 1872","line":"       *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >"},
{"lineNum":" 1873","line":"       *  __str.size()."},
{"lineNum":" 1874","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1875","line":"       *"},
{"lineNum":" 1876","line":"       *  Removes the characters in the range [__pos1,__pos1 + n) from this"},
{"lineNum":" 1877","line":"       *  string.  In place, the value of @a __str is inserted.  If @a __pos is"},
{"lineNum":" 1878","line":"       *  beyond end of string, out_of_range is thrown.  If the length of the"},
{"lineNum":" 1879","line":"       *  result exceeds max_size(), length_error is thrown.  The value of the"},
{"lineNum":" 1880","line":"       *  string doesn\'t change if an error is thrown."},
{"lineNum":" 1881","line":"      */"},
{"lineNum":" 1882","line":"      basic_string&"},
{"lineNum":" 1883","line":"      replace(size_type __pos1, size_type __n1, const basic_string& __str,"},
{"lineNum":" 1884","line":"\t      size_type __pos2, size_type __n2)"},
{"lineNum":" 1885","line":"      { return this->replace(__pos1, __n1, __str._M_data()"},
{"lineNum":" 1886","line":"\t\t\t     + __str._M_check(__pos2, \"basic_string::replace\"),"},
{"lineNum":" 1887","line":"\t\t\t     __str._M_limit(__pos2, __n2)); }"},
{"lineNum":" 1888","line":""},
{"lineNum":" 1889","line":"      /**"},
{"lineNum":" 1890","line":"       *  @brief  Replace characters with value of a C substring."},
{"lineNum":" 1891","line":"       *  @param __pos  Index of first character to replace."},
{"lineNum":" 1892","line":"       *  @param __n1  Number of characters to be replaced."},
{"lineNum":" 1893","line":"       *  @param __s  C string to insert."},
{"lineNum":" 1894","line":"       *  @param __n2  Number of characters from @a s to use."},
{"lineNum":" 1895","line":"       *  @return  Reference to this string."},
{"lineNum":" 1896","line":"       *  @throw  std::out_of_range  If @a pos1 > size()."},
{"lineNum":" 1897","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1898","line":"       *"},
{"lineNum":" 1899","line":"       *  Removes the characters in the range [__pos,__pos + __n1)"},
{"lineNum":" 1900","line":"       *  from this string.  In place, the first @a __n2 characters of"},
{"lineNum":" 1901","line":"       *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If"},
{"lineNum":" 1902","line":"       *  @a __pos is beyond end of string, out_of_range is thrown.  If"},
{"lineNum":" 1903","line":"       *  the length of result exceeds max_size(), length_error is"},
{"lineNum":" 1904","line":"       *  thrown.  The value of the string doesn\'t change if an error"},
{"lineNum":" 1905","line":"       *  is thrown."},
{"lineNum":" 1906","line":"      */"},
{"lineNum":" 1907","line":"      basic_string&"},
{"lineNum":" 1908","line":"      replace(size_type __pos, size_type __n1, const _CharT* __s,"},
{"lineNum":" 1909","line":"\t      size_type __n2)"},
{"lineNum":" 1910","line":"      {"},
{"lineNum":" 1911","line":"\t__glibcxx_requires_string_len(__s, __n2);"},
{"lineNum":" 1912","line":"\treturn _M_replace(_M_check(__pos, \"basic_string::replace\"),"},
{"lineNum":" 1913","line":"\t\t\t  _M_limit(__pos, __n1), __s, __n2);"},
{"lineNum":" 1914","line":"      }"},
{"lineNum":" 1915","line":""},
{"lineNum":" 1916","line":"      /**"},
{"lineNum":" 1917","line":"       *  @brief  Replace characters with value of a C string."},
{"lineNum":" 1918","line":"       *  @param __pos  Index of first character to replace."},
{"lineNum":" 1919","line":"       *  @param __n1  Number of characters to be replaced."},
{"lineNum":" 1920","line":"       *  @param __s  C string to insert."},
{"lineNum":" 1921","line":"       *  @return  Reference to this string."},
{"lineNum":" 1922","line":"       *  @throw  std::out_of_range  If @a pos > size()."},
{"lineNum":" 1923","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1924","line":"       *"},
{"lineNum":" 1925","line":"       *  Removes the characters in the range [__pos,__pos + __n1)"},
{"lineNum":" 1926","line":"       *  from this string.  In place, the characters of @a __s are"},
{"lineNum":" 1927","line":"       *  inserted.  If @a __pos is beyond end of string, out_of_range"},
{"lineNum":" 1928","line":"       *  is thrown.  If the length of result exceeds max_size(),"},
{"lineNum":" 1929","line":"       *  length_error is thrown.  The value of the string doesn\'t"},
{"lineNum":" 1930","line":"       *  change if an error is thrown."},
{"lineNum":" 1931","line":"      */"},
{"lineNum":" 1932","line":"      basic_string&"},
{"lineNum":" 1933","line":"      replace(size_type __pos, size_type __n1, const _CharT* __s)"},
{"lineNum":" 1934","line":"      {"},
{"lineNum":" 1935","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 1936","line":"\treturn this->replace(__pos, __n1, __s, traits_type::length(__s));"},
{"lineNum":" 1937","line":"      }"},
{"lineNum":" 1938","line":""},
{"lineNum":" 1939","line":"      /**"},
{"lineNum":" 1940","line":"       *  @brief  Replace characters with multiple characters."},
{"lineNum":" 1941","line":"       *  @param __pos  Index of first character to replace."},
{"lineNum":" 1942","line":"       *  @param __n1  Number of characters to be replaced."},
{"lineNum":" 1943","line":"       *  @param __n2  Number of characters to insert."},
{"lineNum":" 1944","line":"       *  @param __c  Character to insert."},
{"lineNum":" 1945","line":"       *  @return  Reference to this string."},
{"lineNum":" 1946","line":"       *  @throw  std::out_of_range  If @a __pos > size()."},
{"lineNum":" 1947","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1948","line":"       *"},
{"lineNum":" 1949","line":"       *  Removes the characters in the range [pos,pos + n1) from this"},
{"lineNum":" 1950","line":"       *  string.  In place, @a __n2 copies of @a __c are inserted."},
{"lineNum":" 1951","line":"       *  If @a __pos is beyond end of string, out_of_range is thrown."},
{"lineNum":" 1952","line":"       *  If the length of result exceeds max_size(), length_error is"},
{"lineNum":" 1953","line":"       *  thrown.  The value of the string doesn\'t change if an error"},
{"lineNum":" 1954","line":"       *  is thrown."},
{"lineNum":" 1955","line":"      */"},
{"lineNum":" 1956","line":"      basic_string&"},
{"lineNum":" 1957","line":"      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)"},
{"lineNum":" 1958","line":"      { return _M_replace_aux(_M_check(__pos, \"basic_string::replace\"),"},
{"lineNum":" 1959","line":"\t\t\t      _M_limit(__pos, __n1), __n2, __c); }"},
{"lineNum":" 1960","line":""},
{"lineNum":" 1961","line":"      /**"},
{"lineNum":" 1962","line":"       *  @brief  Replace range of characters with string."},
{"lineNum":" 1963","line":"       *  @param __i1  Iterator referencing start of range to replace."},
{"lineNum":" 1964","line":"       *  @param __i2  Iterator referencing end of range to replace."},
{"lineNum":" 1965","line":"       *  @param __str  String value to insert."},
{"lineNum":" 1966","line":"       *  @return  Reference to this string."},
{"lineNum":" 1967","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1968","line":"       *"},
{"lineNum":" 1969","line":"       *  Removes the characters in the range [__i1,__i2).  In place,"},
{"lineNum":" 1970","line":"       *  the value of @a __str is inserted.  If the length of result"},
{"lineNum":" 1971","line":"       *  exceeds max_size(), length_error is thrown.  The value of"},
{"lineNum":" 1972","line":"       *  the string doesn\'t change if an error is thrown."},
{"lineNum":" 1973","line":"      */"},
{"lineNum":" 1974","line":"      basic_string&"},
{"lineNum":" 1975","line":"      replace(__const_iterator __i1, __const_iterator __i2,"},
{"lineNum":" 1976","line":"\t      const basic_string& __str)"},
{"lineNum":" 1977","line":"      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }"},
{"lineNum":" 1978","line":""},
{"lineNum":" 1979","line":"      /**"},
{"lineNum":" 1980","line":"       *  @brief  Replace range of characters with C substring."},
{"lineNum":" 1981","line":"       *  @param __i1  Iterator referencing start of range to replace."},
{"lineNum":" 1982","line":"       *  @param __i2  Iterator referencing end of range to replace."},
{"lineNum":" 1983","line":"       *  @param __s  C string value to insert."},
{"lineNum":" 1984","line":"       *  @param __n  Number of characters from s to insert."},
{"lineNum":" 1985","line":"       *  @return  Reference to this string."},
{"lineNum":" 1986","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 1987","line":"       *"},
{"lineNum":" 1988","line":"       *  Removes the characters in the range [__i1,__i2).  In place,"},
{"lineNum":" 1989","line":"       *  the first @a __n characters of @a __s are inserted.  If the"},
{"lineNum":" 1990","line":"       *  length of result exceeds max_size(), length_error is thrown."},
{"lineNum":" 1991","line":"       *  The value of the string doesn\'t change if an error is"},
{"lineNum":" 1992","line":"       *  thrown."},
{"lineNum":" 1993","line":"      */"},
{"lineNum":" 1994","line":"      basic_string&"},
{"lineNum":" 1995","line":"      replace(__const_iterator __i1, __const_iterator __i2,"},
{"lineNum":" 1996","line":"\t      const _CharT* __s, size_type __n)"},
{"lineNum":" 1997","line":"      {"},
{"lineNum":" 1998","line":"\t_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2"},
{"lineNum":" 1999","line":"\t\t\t\t && __i2 <= end());"},
{"lineNum":" 2000","line":"\treturn this->replace(__i1 - begin(), __i2 - __i1, __s, __n);"},
{"lineNum":" 2001","line":"      }"},
{"lineNum":" 2002","line":""},
{"lineNum":" 2003","line":"      /**"},
{"lineNum":" 2004","line":"       *  @brief  Replace range of characters with C string."},
{"lineNum":" 2005","line":"       *  @param __i1  Iterator referencing start of range to replace."},
{"lineNum":" 2006","line":"       *  @param __i2  Iterator referencing end of range to replace."},
{"lineNum":" 2007","line":"       *  @param __s  C string value to insert."},
{"lineNum":" 2008","line":"       *  @return  Reference to this string."},
{"lineNum":" 2009","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 2010","line":"       *"},
{"lineNum":" 2011","line":"       *  Removes the characters in the range [__i1,__i2).  In place,"},
{"lineNum":" 2012","line":"       *  the characters of @a __s are inserted.  If the length of"},
{"lineNum":" 2013","line":"       *  result exceeds max_size(), length_error is thrown.  The"},
{"lineNum":" 2014","line":"       *  value of the string doesn\'t change if an error is thrown."},
{"lineNum":" 2015","line":"      */"},
{"lineNum":" 2016","line":"      basic_string&"},
{"lineNum":" 2017","line":"      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)"},
{"lineNum":" 2018","line":"      {"},
{"lineNum":" 2019","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 2020","line":"\treturn this->replace(__i1, __i2, __s, traits_type::length(__s));"},
{"lineNum":" 2021","line":"      }"},
{"lineNum":" 2022","line":""},
{"lineNum":" 2023","line":"      /**"},
{"lineNum":" 2024","line":"       *  @brief  Replace range of characters with multiple characters"},
{"lineNum":" 2025","line":"       *  @param __i1  Iterator referencing start of range to replace."},
{"lineNum":" 2026","line":"       *  @param __i2  Iterator referencing end of range to replace."},
{"lineNum":" 2027","line":"       *  @param __n  Number of characters to insert."},
{"lineNum":" 2028","line":"       *  @param __c  Character to insert."},
{"lineNum":" 2029","line":"       *  @return  Reference to this string."},
{"lineNum":" 2030","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 2031","line":"       *"},
{"lineNum":" 2032","line":"       *  Removes the characters in the range [__i1,__i2).  In place,"},
{"lineNum":" 2033","line":"       *  @a __n copies of @a __c are inserted.  If the length of"},
{"lineNum":" 2034","line":"       *  result exceeds max_size(), length_error is thrown.  The"},
{"lineNum":" 2035","line":"       *  value of the string doesn\'t change if an error is thrown."},
{"lineNum":" 2036","line":"      */"},
{"lineNum":" 2037","line":"      basic_string&"},
{"lineNum":" 2038","line":"      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,"},
{"lineNum":" 2039","line":"\t      _CharT __c)"},
{"lineNum":" 2040","line":"      {"},
{"lineNum":" 2041","line":"\t_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2"},
{"lineNum":" 2042","line":"\t\t\t\t && __i2 <= end());"},
{"lineNum":" 2043","line":"\treturn _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);"},
{"lineNum":" 2044","line":"      }"},
{"lineNum":" 2045","line":""},
{"lineNum":" 2046","line":"      /**"},
{"lineNum":" 2047","line":"       *  @brief  Replace range of characters with range."},
{"lineNum":" 2048","line":"       *  @param __i1  Iterator referencing start of range to replace."},
{"lineNum":" 2049","line":"       *  @param __i2  Iterator referencing end of range to replace."},
{"lineNum":" 2050","line":"       *  @param __k1  Iterator referencing start of range to insert."},
{"lineNum":" 2051","line":"       *  @param __k2  Iterator referencing end of range to insert."},
{"lineNum":" 2052","line":"       *  @return  Reference to this string."},
{"lineNum":" 2053","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 2054","line":"       *"},
{"lineNum":" 2055","line":"       *  Removes the characters in the range [__i1,__i2).  In place,"},
{"lineNum":" 2056","line":"       *  characters in the range [__k1,__k2) are inserted.  If the"},
{"lineNum":" 2057","line":"       *  length of result exceeds max_size(), length_error is thrown."},
{"lineNum":" 2058","line":"       *  The value of the string doesn\'t change if an error is"},
{"lineNum":" 2059","line":"       *  thrown."},
{"lineNum":" 2060","line":"      */"},
{"lineNum":" 2061","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 2062","line":"      template<class _InputIterator,"},
{"lineNum":" 2063","line":"\t       typename = std::_RequireInputIter<_InputIterator>>"},
{"lineNum":" 2064","line":"        basic_string&"},
{"lineNum":" 2065","line":"        replace(const_iterator __i1, const_iterator __i2,"},
{"lineNum":" 2066","line":"\t\t_InputIterator __k1, _InputIterator __k2)"},
{"lineNum":" 2067","line":"        {"},
{"lineNum":" 2068","line":"\t  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2"},
{"lineNum":" 2069","line":"\t\t\t\t   && __i2 <= end());"},
{"lineNum":" 2070","line":"\t  __glibcxx_requires_valid_range(__k1, __k2);"},
{"lineNum":" 2071","line":"\t  return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,"},
{"lineNum":" 2072","line":"\t\t\t\t\t   std::__false_type());"},
{"lineNum":" 2073","line":"\t}"},
{"lineNum":" 2074","line":"#else"},
{"lineNum":" 2075","line":"      template<class _InputIterator>"},
{"lineNum":" 2076","line":"#ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST"},
{"lineNum":" 2077","line":"        typename __enable_if_not_native_iterator<_InputIterator>::__type"},
{"lineNum":" 2078","line":"#else"},
{"lineNum":" 2079","line":"        basic_string&"},
{"lineNum":" 2080","line":"#endif"},
{"lineNum":" 2081","line":"        replace(iterator __i1, iterator __i2,"},
{"lineNum":" 2082","line":"\t\t_InputIterator __k1, _InputIterator __k2)"},
{"lineNum":" 2083","line":"        {"},
{"lineNum":" 2084","line":"\t  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2"},
{"lineNum":" 2085","line":"\t\t\t\t   && __i2 <= end());"},
{"lineNum":" 2086","line":"\t  __glibcxx_requires_valid_range(__k1, __k2);"},
{"lineNum":" 2087","line":"\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;"},
{"lineNum":" 2088","line":"\t  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());"},
{"lineNum":" 2089","line":"\t}"},
{"lineNum":" 2090","line":"#endif"},
{"lineNum":" 2091","line":""},
{"lineNum":" 2092","line":"      // Specializations for the common case of pointer and iterator:"},
{"lineNum":" 2093","line":"      // useful to avoid the overhead of temporary buffering in _M_replace."},
{"lineNum":" 2094","line":"      basic_string&"},
{"lineNum":" 2095","line":"      replace(__const_iterator __i1, __const_iterator __i2,"},
{"lineNum":" 2096","line":"\t      _CharT* __k1, _CharT* __k2)"},
{"lineNum":" 2097","line":"      {"},
{"lineNum":" 2098","line":"\t_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2"},
{"lineNum":" 2099","line":"\t\t\t\t && __i2 <= end());"},
{"lineNum":" 2100","line":"\t__glibcxx_requires_valid_range(__k1, __k2);"},
{"lineNum":" 2101","line":"\treturn this->replace(__i1 - begin(), __i2 - __i1,"},
{"lineNum":" 2102","line":"\t\t\t     __k1, __k2 - __k1);"},
{"lineNum":" 2103","line":"      }"},
{"lineNum":" 2104","line":""},
{"lineNum":" 2105","line":"      basic_string&"},
{"lineNum":" 2106","line":"      replace(__const_iterator __i1, __const_iterator __i2,"},
{"lineNum":" 2107","line":"\t      const _CharT* __k1, const _CharT* __k2)"},
{"lineNum":" 2108","line":"      {"},
{"lineNum":" 2109","line":"\t_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2"},
{"lineNum":" 2110","line":"\t\t\t\t && __i2 <= end());"},
{"lineNum":" 2111","line":"\t__glibcxx_requires_valid_range(__k1, __k2);"},
{"lineNum":" 2112","line":"\treturn this->replace(__i1 - begin(), __i2 - __i1,"},
{"lineNum":" 2113","line":"\t\t\t     __k1, __k2 - __k1);"},
{"lineNum":" 2114","line":"      }"},
{"lineNum":" 2115","line":""},
{"lineNum":" 2116","line":"      basic_string&"},
{"lineNum":" 2117","line":"      replace(__const_iterator __i1, __const_iterator __i2,"},
{"lineNum":" 2118","line":"\t      iterator __k1, iterator __k2)"},
{"lineNum":" 2119","line":"      {"},
{"lineNum":" 2120","line":"\t_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2"},
{"lineNum":" 2121","line":"\t\t\t\t && __i2 <= end());"},
{"lineNum":" 2122","line":"\t__glibcxx_requires_valid_range(__k1, __k2);"},
{"lineNum":" 2123","line":"\treturn this->replace(__i1 - begin(), __i2 - __i1,"},
{"lineNum":" 2124","line":"\t\t\t     __k1.base(), __k2 - __k1);"},
{"lineNum":" 2125","line":"      }"},
{"lineNum":" 2126","line":""},
{"lineNum":" 2127","line":"      basic_string&"},
{"lineNum":" 2128","line":"      replace(__const_iterator __i1, __const_iterator __i2,"},
{"lineNum":" 2129","line":"\t      const_iterator __k1, const_iterator __k2)"},
{"lineNum":" 2130","line":"      {"},
{"lineNum":" 2131","line":"\t_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2"},
{"lineNum":" 2132","line":"\t\t\t\t && __i2 <= end());"},
{"lineNum":" 2133","line":"\t__glibcxx_requires_valid_range(__k1, __k2);"},
{"lineNum":" 2134","line":"\treturn this->replace(__i1 - begin(), __i2 - __i1,"},
{"lineNum":" 2135","line":"\t\t\t     __k1.base(), __k2 - __k1);"},
{"lineNum":" 2136","line":"      }"},
{"lineNum":" 2137","line":""},
{"lineNum":" 2138","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 2139","line":"      /**"},
{"lineNum":" 2140","line":"       *  @brief  Replace range of characters with initializer_list."},
{"lineNum":" 2141","line":"       *  @param __i1  Iterator referencing start of range to replace."},
{"lineNum":" 2142","line":"       *  @param __i2  Iterator referencing end of range to replace."},
{"lineNum":" 2143","line":"       *  @param __l  The initializer_list of characters to insert."},
{"lineNum":" 2144","line":"       *  @return  Reference to this string."},
{"lineNum":" 2145","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 2146","line":"       *"},
{"lineNum":" 2147","line":"       *  Removes the characters in the range [__i1,__i2).  In place,"},
{"lineNum":" 2148","line":"       *  characters in the range [__k1,__k2) are inserted.  If the"},
{"lineNum":" 2149","line":"       *  length of result exceeds max_size(), length_error is thrown."},
{"lineNum":" 2150","line":"       *  The value of the string doesn\'t change if an error is"},
{"lineNum":" 2151","line":"       *  thrown."},
{"lineNum":" 2152","line":"      */"},
{"lineNum":" 2153","line":"      basic_string& replace(const_iterator __i1, const_iterator __i2,"},
{"lineNum":" 2154","line":"\t\t\t    initializer_list<_CharT> __l)"},
{"lineNum":" 2155","line":"      { return this->replace(__i1, __i2, __l.begin(), __l.size()); }"},
{"lineNum":" 2156","line":"#endif // C++11"},
{"lineNum":" 2157","line":""},
{"lineNum":" 2158","line":"#if __cplusplus > 201402L"},
{"lineNum":" 2159","line":"      /**"},
{"lineNum":" 2160","line":"       *  @brief  Replace range of characters with string_view."},
{"lineNum":" 2161","line":"       *  @param __pos  The position to replace at."},
{"lineNum":" 2162","line":"       *  @param __n    The number of characters to replace."},
{"lineNum":" 2163","line":"       *  @param __svt  The object convertible to string_view to insert."},
{"lineNum":" 2164","line":"       *  @return  Reference to this string."},
{"lineNum":" 2165","line":"      */"},
{"lineNum":" 2166","line":"      template<typename _Tp>"},
{"lineNum":" 2167","line":"\t_If_sv<_Tp, basic_string&>"},
{"lineNum":" 2168","line":"\treplace(size_type __pos, size_type __n, const _Tp& __svt)"},
{"lineNum":" 2169","line":"\t{"},
{"lineNum":" 2170","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 2171","line":"\t  return this->replace(__pos, __n, __sv.data(), __sv.size());"},
{"lineNum":" 2172","line":"\t}"},
{"lineNum":" 2173","line":""},
{"lineNum":" 2174","line":"      /**"},
{"lineNum":" 2175","line":"       *  @brief  Replace range of characters with string_view."},
{"lineNum":" 2176","line":"       *  @param __pos1  The position to replace at."},
{"lineNum":" 2177","line":"       *  @param __n1    The number of characters to replace."},
{"lineNum":" 2178","line":"       *  @param __svt   The object convertible to string_view to insert from."},
{"lineNum":" 2179","line":"       *  @param __pos2  The position in the string_view to insert from."},
{"lineNum":" 2180","line":"       *  @param __n2    The number of characters to insert."},
{"lineNum":" 2181","line":"       *  @return  Reference to this string."},
{"lineNum":" 2182","line":"      */"},
{"lineNum":" 2183","line":"      template<typename _Tp>"},
{"lineNum":" 2184","line":"\t_If_sv<_Tp, basic_string&>"},
{"lineNum":" 2185","line":"\treplace(size_type __pos1, size_type __n1, const _Tp& __svt,"},
{"lineNum":" 2186","line":"\t\tsize_type __pos2, size_type __n2 = npos)"},
{"lineNum":" 2187","line":"\t{"},
{"lineNum":" 2188","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 2189","line":"\t  return this->replace(__pos1, __n1, __sv.data()"},
{"lineNum":" 2190","line":"\t\t\t       + __sv._M_check(__pos2, \"basic_string::replace\"),"},
{"lineNum":" 2191","line":"\t\t\t       __sv._M_limit(__pos2, __n2));"},
{"lineNum":" 2192","line":"\t}"},
{"lineNum":" 2193","line":""},
{"lineNum":" 2194","line":"      /**"},
{"lineNum":" 2195","line":"       *  @brief  Replace range of characters with string_view."},
{"lineNum":" 2196","line":"       *  @param __i1    An iterator referencing the start position"},
{"lineNum":" 2197","line":"          to replace at."},
{"lineNum":" 2198","line":"       *  @param __i2    An iterator referencing the end position"},
{"lineNum":" 2199","line":"          for the replace."},
{"lineNum":" 2200","line":"       *  @param __svt   The object convertible to string_view to insert from."},
{"lineNum":" 2201","line":"       *  @return  Reference to this string."},
{"lineNum":" 2202","line":"      */"},
{"lineNum":" 2203","line":"      template<typename _Tp>"},
{"lineNum":" 2204","line":"\t_If_sv<_Tp, basic_string&>"},
{"lineNum":" 2205","line":"\treplace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)"},
{"lineNum":" 2206","line":"\t{"},
{"lineNum":" 2207","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 2208","line":"\t  return this->replace(__i1 - begin(), __i2 - __i1, __sv);"},
{"lineNum":" 2209","line":"\t}"},
{"lineNum":" 2210","line":"#endif // C++17"},
{"lineNum":" 2211","line":""},
{"lineNum":" 2212","line":"    private:"},
{"lineNum":" 2213","line":"      template<class _Integer>"},
{"lineNum":" 2214","line":"\tbasic_string&"},
{"lineNum":" 2215","line":"\t_M_replace_dispatch(const_iterator __i1, const_iterator __i2,"},
{"lineNum":" 2216","line":"\t\t\t    _Integer __n, _Integer __val, __true_type)"},
{"lineNum":" 2217","line":"        { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }"},
{"lineNum":" 2218","line":""},
{"lineNum":" 2219","line":"      template<class _InputIterator>"},
{"lineNum":" 2220","line":"\tbasic_string&"},
{"lineNum":" 2221","line":"\t_M_replace_dispatch(const_iterator __i1, const_iterator __i2,"},
{"lineNum":" 2222","line":"\t\t\t    _InputIterator __k1, _InputIterator __k2,"},
{"lineNum":" 2223","line":"\t\t\t    __false_type);"},
{"lineNum":" 2224","line":""},
{"lineNum":" 2225","line":"      basic_string&"},
{"lineNum":" 2226","line":"      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,"},
{"lineNum":" 2227","line":"\t\t     _CharT __c);"},
{"lineNum":" 2228","line":""},
{"lineNum":" 2229","line":"      basic_string&"},
{"lineNum":" 2230","line":"      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,"},
{"lineNum":" 2231","line":"\t\t const size_type __len2);"},
{"lineNum":" 2232","line":""},
{"lineNum":" 2233","line":"      basic_string&"},
{"lineNum":" 2234","line":"      _M_append(const _CharT* __s, size_type __n);"},
{"lineNum":" 2235","line":""},
{"lineNum":" 2236","line":"    public:"},
{"lineNum":" 2237","line":""},
{"lineNum":" 2238","line":"      /**"},
{"lineNum":" 2239","line":"       *  @brief  Copy substring into C string."},
{"lineNum":" 2240","line":"       *  @param __s  C string to copy value into."},
{"lineNum":" 2241","line":"       *  @param __n  Number of characters to copy."},
{"lineNum":" 2242","line":"       *  @param __pos  Index of first character to copy."},
{"lineNum":" 2243","line":"       *  @return  Number of characters actually copied"},
{"lineNum":" 2244","line":"       *  @throw  std::out_of_range  If __pos > size()."},
{"lineNum":" 2245","line":"       *"},
{"lineNum":" 2246","line":"       *  Copies up to @a __n characters starting at @a __pos into the"},
{"lineNum":" 2247","line":"       *  C string @a __s.  If @a __pos is %greater than size(),"},
{"lineNum":" 2248","line":"       *  out_of_range is thrown."},
{"lineNum":" 2249","line":"      */"},
{"lineNum":" 2250","line":"      size_type"},
{"lineNum":" 2251","line":"      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;"},
{"lineNum":" 2252","line":""},
{"lineNum":" 2253","line":"      /**"},
{"lineNum":" 2254","line":"       *  @brief  Swap contents with another string."},
{"lineNum":" 2255","line":"       *  @param __s  String to swap with."},
{"lineNum":" 2256","line":"       *"},
{"lineNum":" 2257","line":"       *  Exchanges the contents of this string with that of @a __s in constant"},
{"lineNum":" 2258","line":"       *  time."},
{"lineNum":" 2259","line":"      */"},
{"lineNum":" 2260","line":"      void"},
{"lineNum":" 2261","line":"      swap(basic_string& __s) _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 2262","line":""},
{"lineNum":" 2263","line":"      // String operations:"},
{"lineNum":" 2264","line":"      /**"},
{"lineNum":" 2265","line":"       *  @brief  Return const pointer to null-terminated contents."},
{"lineNum":" 2266","line":"       *"},
{"lineNum":" 2267","line":"       *  This is a handle to internal data.  Do not modify or dire things may"},
{"lineNum":" 2268","line":"       *  happen."},
{"lineNum":" 2269","line":"      */"},
{"lineNum":" 2270","line":"      const _CharT*"},
{"lineNum":" 2271","line":"      c_str() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 2272","line":"      { return _M_data(); }"},
{"lineNum":" 2273","line":""},
{"lineNum":" 2274","line":"      /**"},
{"lineNum":" 2275","line":"       *  @brief  Return const pointer to contents."},
{"lineNum":" 2276","line":"       *"},
{"lineNum":" 2277","line":"       *  This is a pointer to internal data.  It is undefined to modify"},
{"lineNum":" 2278","line":"       *  the contents through the returned pointer. To get a pointer that"},
{"lineNum":" 2279","line":"       *  allows modifying the contents use @c &str[0] instead,"},
{"lineNum":" 2280","line":"       *  (or in C++17 the non-const @c str.data() overload)."},
{"lineNum":" 2281","line":"      */"},
{"lineNum":" 2282","line":"      const _CharT*"},
{"lineNum":" 2283","line":"      data() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 2284","line":"      { return _M_data(); }"},
{"lineNum":" 2285","line":""},
{"lineNum":" 2286","line":"#if __cplusplus > 201402L"},
{"lineNum":" 2287","line":"      /**"},
{"lineNum":" 2288","line":"       *  @brief  Return non-const pointer to contents."},
{"lineNum":" 2289","line":"       *"},
{"lineNum":" 2290","line":"       *  This is a pointer to the character sequence held by the string."},
{"lineNum":" 2291","line":"       *  Modifying the characters in the sequence is allowed."},
{"lineNum":" 2292","line":"      */"},
{"lineNum":" 2293","line":"      _CharT*"},
{"lineNum":" 2294","line":"      data() noexcept"},
{"lineNum":" 2295","line":"      { return _M_data(); }"},
{"lineNum":" 2296","line":"#endif"},
{"lineNum":" 2297","line":""},
{"lineNum":" 2298","line":"      /**"},
{"lineNum":" 2299","line":"       *  @brief  Return copy of allocator used to construct this string."},
{"lineNum":" 2300","line":"      */"},
{"lineNum":" 2301","line":"      allocator_type"},
{"lineNum":" 2302","line":"      get_allocator() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 2303","line":"      { return _M_get_allocator(); }"},
{"lineNum":" 2304","line":""},
{"lineNum":" 2305","line":"      /**"},
{"lineNum":" 2306","line":"       *  @brief  Find position of a C substring."},
{"lineNum":" 2307","line":"       *  @param __s  C string to locate."},
{"lineNum":" 2308","line":"       *  @param __pos  Index of character to search from."},
{"lineNum":" 2309","line":"       *  @param __n  Number of characters from @a s to search for."},
{"lineNum":" 2310","line":"       *  @return  Index of start of first occurrence."},
{"lineNum":" 2311","line":"       *"},
{"lineNum":" 2312","line":"       *  Starting from @a __pos, searches forward for the first @a"},
{"lineNum":" 2313","line":"       *  __n characters in @a __s within this string.  If found,"},
{"lineNum":" 2314","line":"       *  returns the index where it begins.  If not found, returns"},
{"lineNum":" 2315","line":"       *  npos."},
{"lineNum":" 2316","line":"      */"},
{"lineNum":" 2317","line":"      size_type"},
{"lineNum":" 2318","line":"      find(const _CharT* __s, size_type __pos, size_type __n) const"},
{"lineNum":" 2319","line":"      _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 2320","line":""},
{"lineNum":" 2321","line":"      /**"},
{"lineNum":" 2322","line":"       *  @brief  Find position of a string."},
{"lineNum":" 2323","line":"       *  @param __str  String to locate."},
{"lineNum":" 2324","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 2325","line":"       *  @return  Index of start of first occurrence."},
{"lineNum":" 2326","line":"       *"},
{"lineNum":" 2327","line":"       *  Starting from @a __pos, searches forward for value of @a __str within"},
{"lineNum":" 2328","line":"       *  this string.  If found, returns the index where it begins.  If not"},
{"lineNum":" 2329","line":"       *  found, returns npos."},
{"lineNum":" 2330","line":"      */"},
{"lineNum":" 2331","line":"      size_type"},
{"lineNum":" 2332","line":"      find(const basic_string& __str, size_type __pos = 0) const"},
{"lineNum":" 2333","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 2334","line":"      { return this->find(__str.data(), __pos, __str.size()); }"},
{"lineNum":" 2335","line":""},
{"lineNum":" 2336","line":"#if __cplusplus > 201402L"},
{"lineNum":" 2337","line":"      /**"},
{"lineNum":" 2338","line":"       *  @brief  Find position of a string_view."},
{"lineNum":" 2339","line":"       *  @param __svt  The object convertible to string_view to locate."},
{"lineNum":" 2340","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 2341","line":"       *  @return  Index of start of first occurrence."},
{"lineNum":" 2342","line":"      */"},
{"lineNum":" 2343","line":"      template<typename _Tp>"},
{"lineNum":" 2344","line":"\t_If_sv<_Tp, size_type>"},
{"lineNum":" 2345","line":"\tfind(const _Tp& __svt, size_type __pos = 0) const"},
{"lineNum":" 2346","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 2347","line":"\t{"},
{"lineNum":" 2348","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 2349","line":"\t  return this->find(__sv.data(), __pos, __sv.size());"},
{"lineNum":" 2350","line":"\t}"},
{"lineNum":" 2351","line":"#endif // C++17"},
{"lineNum":" 2352","line":""},
{"lineNum":" 2353","line":"      /**"},
{"lineNum":" 2354","line":"       *  @brief  Find position of a C string."},
{"lineNum":" 2355","line":"       *  @param __s  C string to locate."},
{"lineNum":" 2356","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 2357","line":"       *  @return  Index of start of first occurrence."},
{"lineNum":" 2358","line":"       *"},
{"lineNum":" 2359","line":"       *  Starting from @a __pos, searches forward for the value of @a"},
{"lineNum":" 2360","line":"       *  __s within this string.  If found, returns the index where"},
{"lineNum":" 2361","line":"       *  it begins.  If not found, returns npos."},
{"lineNum":" 2362","line":"      */"},
{"lineNum":" 2363","line":"      size_type"},
{"lineNum":" 2364","line":"      find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 2365","line":"      {"},
{"lineNum":" 2366","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 2367","line":"\treturn this->find(__s, __pos, traits_type::length(__s));"},
{"lineNum":" 2368","line":"      }"},
{"lineNum":" 2369","line":""},
{"lineNum":" 2370","line":"      /**"},
{"lineNum":" 2371","line":"       *  @brief  Find position of a character."},
{"lineNum":" 2372","line":"       *  @param __c  Character to locate."},
{"lineNum":" 2373","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 2374","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 2375","line":"       *"},
{"lineNum":" 2376","line":"       *  Starting from @a __pos, searches forward for @a __c within"},
{"lineNum":" 2377","line":"       *  this string.  If found, returns the index where it was"},
{"lineNum":" 2378","line":"       *  found.  If not found, returns npos."},
{"lineNum":" 2379","line":"      */"},
{"lineNum":" 2380","line":"      size_type"},
{"lineNum":" 2381","line":"      find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 2382","line":""},
{"lineNum":" 2383","line":"      /**"},
{"lineNum":" 2384","line":"       *  @brief  Find last position of a string."},
{"lineNum":" 2385","line":"       *  @param __str  String to locate."},
{"lineNum":" 2386","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 2387","line":"       *  @return  Index of start of last occurrence."},
{"lineNum":" 2388","line":"       *"},
{"lineNum":" 2389","line":"       *  Starting from @a __pos, searches backward for value of @a"},
{"lineNum":" 2390","line":"       *  __str within this string.  If found, returns the index where"},
{"lineNum":" 2391","line":"       *  it begins.  If not found, returns npos."},
{"lineNum":" 2392","line":"      */"},
{"lineNum":" 2393","line":"      size_type"},
{"lineNum":" 2394","line":"      rfind(const basic_string& __str, size_type __pos = npos) const"},
{"lineNum":" 2395","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 2396","line":"      { return this->rfind(__str.data(), __pos, __str.size()); }"},
{"lineNum":" 2397","line":""},
{"lineNum":" 2398","line":"#if __cplusplus > 201402L"},
{"lineNum":" 2399","line":"      /**"},
{"lineNum":" 2400","line":"       *  @brief  Find last position of a string_view."},
{"lineNum":" 2401","line":"       *  @param __svt  The object convertible to string_view to locate."},
{"lineNum":" 2402","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 2403","line":"       *  @return  Index of start of last occurrence."},
{"lineNum":" 2404","line":"      */"},
{"lineNum":" 2405","line":"      template<typename _Tp>"},
{"lineNum":" 2406","line":"\t_If_sv<_Tp, size_type>"},
{"lineNum":" 2407","line":"\trfind(const _Tp& __svt, size_type __pos = npos) const"},
{"lineNum":" 2408","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 2409","line":"\t{"},
{"lineNum":" 2410","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 2411","line":"\t  return this->rfind(__sv.data(), __pos, __sv.size());"},
{"lineNum":" 2412","line":"\t}"},
{"lineNum":" 2413","line":"#endif // C++17"},
{"lineNum":" 2414","line":""},
{"lineNum":" 2415","line":"      /**"},
{"lineNum":" 2416","line":"       *  @brief  Find last position of a C substring."},
{"lineNum":" 2417","line":"       *  @param __s  C string to locate."},
{"lineNum":" 2418","line":"       *  @param __pos  Index of character to search back from."},
{"lineNum":" 2419","line":"       *  @param __n  Number of characters from s to search for."},
{"lineNum":" 2420","line":"       *  @return  Index of start of last occurrence."},
{"lineNum":" 2421","line":"       *"},
{"lineNum":" 2422","line":"       *  Starting from @a __pos, searches backward for the first @a"},
{"lineNum":" 2423","line":"       *  __n characters in @a __s within this string.  If found,"},
{"lineNum":" 2424","line":"       *  returns the index where it begins.  If not found, returns"},
{"lineNum":" 2425","line":"       *  npos."},
{"lineNum":" 2426","line":"      */"},
{"lineNum":" 2427","line":"      size_type"},
{"lineNum":" 2428","line":"      rfind(const _CharT* __s, size_type __pos, size_type __n) const"},
{"lineNum":" 2429","line":"      _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 2430","line":""},
{"lineNum":" 2431","line":"      /**"},
{"lineNum":" 2432","line":"       *  @brief  Find last position of a C string."},
{"lineNum":" 2433","line":"       *  @param __s  C string to locate."},
{"lineNum":" 2434","line":"       *  @param __pos  Index of character to start search at (default end)."},
{"lineNum":" 2435","line":"       *  @return  Index of start of  last occurrence."},
{"lineNum":" 2436","line":"       *"},
{"lineNum":" 2437","line":"       *  Starting from @a __pos, searches backward for the value of"},
{"lineNum":" 2438","line":"       *  @a __s within this string.  If found, returns the index"},
{"lineNum":" 2439","line":"       *  where it begins.  If not found, returns npos."},
{"lineNum":" 2440","line":"      */"},
{"lineNum":" 2441","line":"      size_type"},
{"lineNum":" 2442","line":"      rfind(const _CharT* __s, size_type __pos = npos) const"},
{"lineNum":" 2443","line":"      {"},
{"lineNum":" 2444","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 2445","line":"\treturn this->rfind(__s, __pos, traits_type::length(__s));"},
{"lineNum":" 2446","line":"      }"},
{"lineNum":" 2447","line":""},
{"lineNum":" 2448","line":"      /**"},
{"lineNum":" 2449","line":"       *  @brief  Find last position of a character."},
{"lineNum":" 2450","line":"       *  @param __c  Character to locate."},
{"lineNum":" 2451","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 2452","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 2453","line":"       *"},
{"lineNum":" 2454","line":"       *  Starting from @a __pos, searches backward for @a __c within"},
{"lineNum":" 2455","line":"       *  this string.  If found, returns the index where it was"},
{"lineNum":" 2456","line":"       *  found.  If not found, returns npos."},
{"lineNum":" 2457","line":"      */"},
{"lineNum":" 2458","line":"      size_type"},
{"lineNum":" 2459","line":"      rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 2460","line":""},
{"lineNum":" 2461","line":"      /**"},
{"lineNum":" 2462","line":"       *  @brief  Find position of a character of string."},
{"lineNum":" 2463","line":"       *  @param __str  String containing characters to locate."},
{"lineNum":" 2464","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 2465","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 2466","line":"       *"},
{"lineNum":" 2467","line":"       *  Starting from @a __pos, searches forward for one of the"},
{"lineNum":" 2468","line":"       *  characters of @a __str within this string.  If found,"},
{"lineNum":" 2469","line":"       *  returns the index where it was found.  If not found, returns"},
{"lineNum":" 2470","line":"       *  npos."},
{"lineNum":" 2471","line":"      */"},
{"lineNum":" 2472","line":"      size_type"},
{"lineNum":" 2473","line":"      find_first_of(const basic_string& __str, size_type __pos = 0) const"},
{"lineNum":" 2474","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 2475","line":"      { return this->find_first_of(__str.data(), __pos, __str.size()); }"},
{"lineNum":" 2476","line":""},
{"lineNum":" 2477","line":"#if __cplusplus > 201402L"},
{"lineNum":" 2478","line":"      /**"},
{"lineNum":" 2479","line":"       *  @brief  Find position of a character of a string_view."},
{"lineNum":" 2480","line":"       *  @param __svt  An object convertible to string_view containing"},
{"lineNum":" 2481","line":"       *                characters to locate."},
{"lineNum":" 2482","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 2483","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 2484","line":"      */"},
{"lineNum":" 2485","line":"      template<typename _Tp>"},
{"lineNum":" 2486","line":"\t_If_sv<_Tp, size_type>"},
{"lineNum":" 2487","line":"\tfind_first_of(const _Tp& __svt, size_type __pos = 0) const"},
{"lineNum":" 2488","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 2489","line":"\t{"},
{"lineNum":" 2490","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 2491","line":"\t  return this->find_first_of(__sv.data(), __pos, __sv.size());"},
{"lineNum":" 2492","line":"\t}"},
{"lineNum":" 2493","line":"#endif // C++17"},
{"lineNum":" 2494","line":""},
{"lineNum":" 2495","line":"      /**"},
{"lineNum":" 2496","line":"       *  @brief  Find position of a character of C substring."},
{"lineNum":" 2497","line":"       *  @param __s  String containing characters to locate."},
{"lineNum":" 2498","line":"       *  @param __pos  Index of character to search from."},
{"lineNum":" 2499","line":"       *  @param __n  Number of characters from s to search for."},
{"lineNum":" 2500","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 2501","line":"       *"},
{"lineNum":" 2502","line":"       *  Starting from @a __pos, searches forward for one of the"},
{"lineNum":" 2503","line":"       *  first @a __n characters of @a __s within this string.  If"},
{"lineNum":" 2504","line":"       *  found, returns the index where it was found.  If not found,"},
{"lineNum":" 2505","line":"       *  returns npos."},
{"lineNum":" 2506","line":"      */"},
{"lineNum":" 2507","line":"      size_type"},
{"lineNum":" 2508","line":"      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const"},
{"lineNum":" 2509","line":"      _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 2510","line":""},
{"lineNum":" 2511","line":"      /**"},
{"lineNum":" 2512","line":"       *  @brief  Find position of a character of C string."},
{"lineNum":" 2513","line":"       *  @param __s  String containing characters to locate."},
{"lineNum":" 2514","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 2515","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 2516","line":"       *"},
{"lineNum":" 2517","line":"       *  Starting from @a __pos, searches forward for one of the"},
{"lineNum":" 2518","line":"       *  characters of @a __s within this string.  If found, returns"},
{"lineNum":" 2519","line":"       *  the index where it was found.  If not found, returns npos."},
{"lineNum":" 2520","line":"      */"},
{"lineNum":" 2521","line":"      size_type"},
{"lineNum":" 2522","line":"      find_first_of(const _CharT* __s, size_type __pos = 0) const"},
{"lineNum":" 2523","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 2524","line":"      {"},
{"lineNum":" 2525","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 2526","line":"\treturn this->find_first_of(__s, __pos, traits_type::length(__s));"},
{"lineNum":" 2527","line":"      }"},
{"lineNum":" 2528","line":""},
{"lineNum":" 2529","line":"      /**"},
{"lineNum":" 2530","line":"       *  @brief  Find position of a character."},
{"lineNum":" 2531","line":"       *  @param __c  Character to locate."},
{"lineNum":" 2532","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 2533","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 2534","line":"       *"},
{"lineNum":" 2535","line":"       *  Starting from @a __pos, searches forward for the character"},
{"lineNum":" 2536","line":"       *  @a __c within this string.  If found, returns the index"},
{"lineNum":" 2537","line":"       *  where it was found.  If not found, returns npos."},
{"lineNum":" 2538","line":"       *"},
{"lineNum":" 2539","line":"       *  Note: equivalent to find(__c, __pos)."},
{"lineNum":" 2540","line":"      */"},
{"lineNum":" 2541","line":"      size_type"},
{"lineNum":" 2542","line":"      find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 2543","line":"      { return this->find(__c, __pos); }"},
{"lineNum":" 2544","line":""},
{"lineNum":" 2545","line":"      /**"},
{"lineNum":" 2546","line":"       *  @brief  Find last position of a character of string."},
{"lineNum":" 2547","line":"       *  @param __str  String containing characters to locate."},
{"lineNum":" 2548","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 2549","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 2550","line":"       *"},
{"lineNum":" 2551","line":"       *  Starting from @a __pos, searches backward for one of the"},
{"lineNum":" 2552","line":"       *  characters of @a __str within this string.  If found,"},
{"lineNum":" 2553","line":"       *  returns the index where it was found.  If not found, returns"},
{"lineNum":" 2554","line":"       *  npos."},
{"lineNum":" 2555","line":"      */"},
{"lineNum":" 2556","line":"      size_type"},
{"lineNum":" 2557","line":"      find_last_of(const basic_string& __str, size_type __pos = npos) const"},
{"lineNum":" 2558","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 2559","line":"      { return this->find_last_of(__str.data(), __pos, __str.size()); }"},
{"lineNum":" 2560","line":""},
{"lineNum":" 2561","line":"#if __cplusplus > 201402L"},
{"lineNum":" 2562","line":"      /**"},
{"lineNum":" 2563","line":"       *  @brief  Find last position of a character of string."},
{"lineNum":" 2564","line":"       *  @param __svt  An object convertible to string_view containing"},
{"lineNum":" 2565","line":"       *                characters to locate."},
{"lineNum":" 2566","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 2567","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 2568","line":"      */"},
{"lineNum":" 2569","line":"      template<typename _Tp>"},
{"lineNum":" 2570","line":"\t_If_sv<_Tp, size_type>"},
{"lineNum":" 2571","line":"\tfind_last_of(const _Tp& __svt, size_type __pos = npos) const"},
{"lineNum":" 2572","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 2573","line":"\t{"},
{"lineNum":" 2574","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 2575","line":"\t  return this->find_last_of(__sv.data(), __pos, __sv.size());"},
{"lineNum":" 2576","line":"\t}"},
{"lineNum":" 2577","line":"#endif // C++17"},
{"lineNum":" 2578","line":""},
{"lineNum":" 2579","line":"      /**"},
{"lineNum":" 2580","line":"       *  @brief  Find last position of a character of C substring."},
{"lineNum":" 2581","line":"       *  @param __s  C string containing characters to locate."},
{"lineNum":" 2582","line":"       *  @param __pos  Index of character to search back from."},
{"lineNum":" 2583","line":"       *  @param __n  Number of characters from s to search for."},
{"lineNum":" 2584","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 2585","line":"       *"},
{"lineNum":" 2586","line":"       *  Starting from @a __pos, searches backward for one of the"},
{"lineNum":" 2587","line":"       *  first @a __n characters of @a __s within this string.  If"},
{"lineNum":" 2588","line":"       *  found, returns the index where it was found.  If not found,"},
{"lineNum":" 2589","line":"       *  returns npos."},
{"lineNum":" 2590","line":"      */"},
{"lineNum":" 2591","line":"      size_type"},
{"lineNum":" 2592","line":"      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const"},
{"lineNum":" 2593","line":"      _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 2594","line":""},
{"lineNum":" 2595","line":"      /**"},
{"lineNum":" 2596","line":"       *  @brief  Find last position of a character of C string."},
{"lineNum":" 2597","line":"       *  @param __s  C string containing characters to locate."},
{"lineNum":" 2598","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 2599","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 2600","line":"       *"},
{"lineNum":" 2601","line":"       *  Starting from @a __pos, searches backward for one of the"},
{"lineNum":" 2602","line":"       *  characters of @a __s within this string.  If found, returns"},
{"lineNum":" 2603","line":"       *  the index where it was found.  If not found, returns npos."},
{"lineNum":" 2604","line":"      */"},
{"lineNum":" 2605","line":"      size_type"},
{"lineNum":" 2606","line":"      find_last_of(const _CharT* __s, size_type __pos = npos) const"},
{"lineNum":" 2607","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 2608","line":"      {"},
{"lineNum":" 2609","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 2610","line":"\treturn this->find_last_of(__s, __pos, traits_type::length(__s));"},
{"lineNum":" 2611","line":"      }"},
{"lineNum":" 2612","line":""},
{"lineNum":" 2613","line":"      /**"},
{"lineNum":" 2614","line":"       *  @brief  Find last position of a character."},
{"lineNum":" 2615","line":"       *  @param __c  Character to locate."},
{"lineNum":" 2616","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 2617","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 2618","line":"       *"},
{"lineNum":" 2619","line":"       *  Starting from @a __pos, searches backward for @a __c within"},
{"lineNum":" 2620","line":"       *  this string.  If found, returns the index where it was"},
{"lineNum":" 2621","line":"       *  found.  If not found, returns npos."},
{"lineNum":" 2622","line":"       *"},
{"lineNum":" 2623","line":"       *  Note: equivalent to rfind(__c, __pos)."},
{"lineNum":" 2624","line":"      */"},
{"lineNum":" 2625","line":"      size_type"},
{"lineNum":" 2626","line":"      find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 2627","line":"      { return this->rfind(__c, __pos); }"},
{"lineNum":" 2628","line":""},
{"lineNum":" 2629","line":"      /**"},
{"lineNum":" 2630","line":"       *  @brief  Find position of a character not in string."},
{"lineNum":" 2631","line":"       *  @param __str  String containing characters to avoid."},
{"lineNum":" 2632","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 2633","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 2634","line":"       *"},
{"lineNum":" 2635","line":"       *  Starting from @a __pos, searches forward for a character not contained"},
{"lineNum":" 2636","line":"       *  in @a __str within this string.  If found, returns the index where it"},
{"lineNum":" 2637","line":"       *  was found.  If not found, returns npos."},
{"lineNum":" 2638","line":"      */"},
{"lineNum":" 2639","line":"      size_type"},
{"lineNum":" 2640","line":"      find_first_not_of(const basic_string& __str, size_type __pos = 0) const"},
{"lineNum":" 2641","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 2642","line":"      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }"},
{"lineNum":" 2643","line":""},
{"lineNum":" 2644","line":"#if __cplusplus > 201402L"},
{"lineNum":" 2645","line":"      /**"},
{"lineNum":" 2646","line":"       *  @brief  Find position of a character not in a string_view."},
{"lineNum":" 2647","line":"       *  @param __svt  A object convertible to string_view containing"},
{"lineNum":" 2648","line":"       *                characters to avoid."},
{"lineNum":" 2649","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 2650","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 2651","line":"       */"},
{"lineNum":" 2652","line":"      template<typename _Tp>"},
{"lineNum":" 2653","line":"\t_If_sv<_Tp, size_type>"},
{"lineNum":" 2654","line":"\tfind_first_not_of(const _Tp& __svt, size_type __pos = 0) const"},
{"lineNum":" 2655","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 2656","line":"\t{"},
{"lineNum":" 2657","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 2658","line":"\t  return this->find_first_not_of(__sv.data(), __pos, __sv.size());"},
{"lineNum":" 2659","line":"\t}"},
{"lineNum":" 2660","line":"#endif // C++17"},
{"lineNum":" 2661","line":""},
{"lineNum":" 2662","line":"      /**"},
{"lineNum":" 2663","line":"       *  @brief  Find position of a character not in C substring."},
{"lineNum":" 2664","line":"       *  @param __s  C string containing characters to avoid."},
{"lineNum":" 2665","line":"       *  @param __pos  Index of character to search from."},
{"lineNum":" 2666","line":"       *  @param __n  Number of characters from __s to consider."},
{"lineNum":" 2667","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 2668","line":"       *"},
{"lineNum":" 2669","line":"       *  Starting from @a __pos, searches forward for a character not"},
{"lineNum":" 2670","line":"       *  contained in the first @a __n characters of @a __s within"},
{"lineNum":" 2671","line":"       *  this string.  If found, returns the index where it was"},
{"lineNum":" 2672","line":"       *  found.  If not found, returns npos."},
{"lineNum":" 2673","line":"      */"},
{"lineNum":" 2674","line":"      size_type"},
{"lineNum":" 2675","line":"      find_first_not_of(const _CharT* __s, size_type __pos,"},
{"lineNum":" 2676","line":"\t\t\tsize_type __n) const _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 2677","line":""},
{"lineNum":" 2678","line":"      /**"},
{"lineNum":" 2679","line":"       *  @brief  Find position of a character not in C string."},
{"lineNum":" 2680","line":"       *  @param __s  C string containing characters to avoid."},
{"lineNum":" 2681","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 2682","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 2683","line":"       *"},
{"lineNum":" 2684","line":"       *  Starting from @a __pos, searches forward for a character not"},
{"lineNum":" 2685","line":"       *  contained in @a __s within this string.  If found, returns"},
{"lineNum":" 2686","line":"       *  the index where it was found.  If not found, returns npos."},
{"lineNum":" 2687","line":"      */"},
{"lineNum":" 2688","line":"      size_type"},
{"lineNum":" 2689","line":"      find_first_not_of(const _CharT* __s, size_type __pos = 0) const"},
{"lineNum":" 2690","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 2691","line":"      {"},
{"lineNum":" 2692","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 2693","line":"\treturn this->find_first_not_of(__s, __pos, traits_type::length(__s));"},
{"lineNum":" 2694","line":"      }"},
{"lineNum":" 2695","line":""},
{"lineNum":" 2696","line":"      /**"},
{"lineNum":" 2697","line":"       *  @brief  Find position of a different character."},
{"lineNum":" 2698","line":"       *  @param __c  Character to avoid."},
{"lineNum":" 2699","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 2700","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 2701","line":"       *"},
{"lineNum":" 2702","line":"       *  Starting from @a __pos, searches forward for a character"},
{"lineNum":" 2703","line":"       *  other than @a __c within this string.  If found, returns the"},
{"lineNum":" 2704","line":"       *  index where it was found.  If not found, returns npos."},
{"lineNum":" 2705","line":"      */"},
{"lineNum":" 2706","line":"      size_type"},
{"lineNum":" 2707","line":"      find_first_not_of(_CharT __c, size_type __pos = 0) const"},
{"lineNum":" 2708","line":"      _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 2709","line":""},
{"lineNum":" 2710","line":"      /**"},
{"lineNum":" 2711","line":"       *  @brief  Find last position of a character not in string."},
{"lineNum":" 2712","line":"       *  @param __str  String containing characters to avoid."},
{"lineNum":" 2713","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 2714","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 2715","line":"       *"},
{"lineNum":" 2716","line":"       *  Starting from @a __pos, searches backward for a character"},
{"lineNum":" 2717","line":"       *  not contained in @a __str within this string.  If found,"},
{"lineNum":" 2718","line":"       *  returns the index where it was found.  If not found, returns"},
{"lineNum":" 2719","line":"       *  npos."},
{"lineNum":" 2720","line":"      */"},
{"lineNum":" 2721","line":"      size_type"},
{"lineNum":" 2722","line":"      find_last_not_of(const basic_string& __str, size_type __pos = npos) const"},
{"lineNum":" 2723","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 2724","line":"      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }"},
{"lineNum":" 2725","line":""},
{"lineNum":" 2726","line":"#if __cplusplus > 201402L"},
{"lineNum":" 2727","line":"      /**"},
{"lineNum":" 2728","line":"       *  @brief  Find last position of a character not in a string_view."},
{"lineNum":" 2729","line":"       *  @param __svt  An object convertible to string_view containing"},
{"lineNum":" 2730","line":"       *                characters to avoid."},
{"lineNum":" 2731","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 2732","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 2733","line":"       */"},
{"lineNum":" 2734","line":"      template<typename _Tp>"},
{"lineNum":" 2735","line":"\t_If_sv<_Tp, size_type>"},
{"lineNum":" 2736","line":"\tfind_last_not_of(const _Tp& __svt, size_type __pos = npos) const"},
{"lineNum":" 2737","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 2738","line":"\t{"},
{"lineNum":" 2739","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 2740","line":"\t  return this->find_last_not_of(__sv.data(), __pos, __sv.size());"},
{"lineNum":" 2741","line":"\t}"},
{"lineNum":" 2742","line":"#endif // C++17"},
{"lineNum":" 2743","line":""},
{"lineNum":" 2744","line":"      /**"},
{"lineNum":" 2745","line":"       *  @brief  Find last position of a character not in C substring."},
{"lineNum":" 2746","line":"       *  @param __s  C string containing characters to avoid."},
{"lineNum":" 2747","line":"       *  @param __pos  Index of character to search back from."},
{"lineNum":" 2748","line":"       *  @param __n  Number of characters from s to consider."},
{"lineNum":" 2749","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 2750","line":"       *"},
{"lineNum":" 2751","line":"       *  Starting from @a __pos, searches backward for a character not"},
{"lineNum":" 2752","line":"       *  contained in the first @a __n characters of @a __s within this string."},
{"lineNum":" 2753","line":"       *  If found, returns the index where it was found.  If not found,"},
{"lineNum":" 2754","line":"       *  returns npos."},
{"lineNum":" 2755","line":"      */"},
{"lineNum":" 2756","line":"      size_type"},
{"lineNum":" 2757","line":"      find_last_not_of(const _CharT* __s, size_type __pos,"},
{"lineNum":" 2758","line":"\t\t       size_type __n) const _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 2759","line":"      /**"},
{"lineNum":" 2760","line":"       *  @brief  Find last position of a character not in C string."},
{"lineNum":" 2761","line":"       *  @param __s  C string containing characters to avoid."},
{"lineNum":" 2762","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 2763","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 2764","line":"       *"},
{"lineNum":" 2765","line":"       *  Starting from @a __pos, searches backward for a character"},
{"lineNum":" 2766","line":"       *  not contained in @a __s within this string.  If found,"},
{"lineNum":" 2767","line":"       *  returns the index where it was found.  If not found, returns"},
{"lineNum":" 2768","line":"       *  npos."},
{"lineNum":" 2769","line":"      */"},
{"lineNum":" 2770","line":"      size_type"},
{"lineNum":" 2771","line":"      find_last_not_of(const _CharT* __s, size_type __pos = npos) const"},
{"lineNum":" 2772","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 2773","line":"      {"},
{"lineNum":" 2774","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 2775","line":"\treturn this->find_last_not_of(__s, __pos, traits_type::length(__s));"},
{"lineNum":" 2776","line":"      }"},
{"lineNum":" 2777","line":""},
{"lineNum":" 2778","line":"      /**"},
{"lineNum":" 2779","line":"       *  @brief  Find last position of a different character."},
{"lineNum":" 2780","line":"       *  @param __c  Character to avoid."},
{"lineNum":" 2781","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 2782","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 2783","line":"       *"},
{"lineNum":" 2784","line":"       *  Starting from @a __pos, searches backward for a character other than"},
{"lineNum":" 2785","line":"       *  @a __c within this string.  If found, returns the index where it was"},
{"lineNum":" 2786","line":"       *  found.  If not found, returns npos."},
{"lineNum":" 2787","line":"      */"},
{"lineNum":" 2788","line":"      size_type"},
{"lineNum":" 2789","line":"      find_last_not_of(_CharT __c, size_type __pos = npos) const"},
{"lineNum":" 2790","line":"      _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 2791","line":""},
{"lineNum":" 2792","line":"      /**"},
{"lineNum":" 2793","line":"       *  @brief  Get a substring."},
{"lineNum":" 2794","line":"       *  @param __pos  Index of first character (default 0)."},
{"lineNum":" 2795","line":"       *  @param __n  Number of characters in substring (default remainder)."},
{"lineNum":" 2796","line":"       *  @return  The new string."},
{"lineNum":" 2797","line":"       *  @throw  std::out_of_range  If __pos > size()."},
{"lineNum":" 2798","line":"       *"},
{"lineNum":" 2799","line":"       *  Construct and return a new string using the @a __n"},
{"lineNum":" 2800","line":"       *  characters starting at @a __pos.  If the string is too"},
{"lineNum":" 2801","line":"       *  short, use the remainder of the characters.  If @a __pos is"},
{"lineNum":" 2802","line":"       *  beyond the end of the string, out_of_range is thrown."},
{"lineNum":" 2803","line":"      */"},
{"lineNum":" 2804","line":"      basic_string"},
{"lineNum":" 2805","line":"      substr(size_type __pos = 0, size_type __n = npos) const"},
{"lineNum":" 2806","line":"      { return basic_string(*this,"},
{"lineNum":" 2807","line":"\t\t\t    _M_check(__pos, \"basic_string::substr\"), __n); }"},
{"lineNum":" 2808","line":""},
{"lineNum":" 2809","line":"      /**"},
{"lineNum":" 2810","line":"       *  @brief  Compare to a string."},
{"lineNum":" 2811","line":"       *  @param __str  String to compare against."},
{"lineNum":" 2812","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 2813","line":"       *"},
{"lineNum":" 2814","line":"       *  Returns an integer < 0 if this string is ordered before @a"},
{"lineNum":" 2815","line":"       *  __str, 0 if their values are equivalent, or > 0 if this"},
{"lineNum":" 2816","line":"       *  string is ordered after @a __str.  Determines the effective"},
{"lineNum":" 2817","line":"       *  length rlen of the strings to compare as the smallest of"},
{"lineNum":" 2818","line":"       *  size() and str.size().  The function then compares the two"},
{"lineNum":" 2819","line":"       *  strings by calling traits::compare(data(), str.data(),rlen)."},
{"lineNum":" 2820","line":"       *  If the result of the comparison is nonzero returns it,"},
{"lineNum":" 2821","line":"       *  otherwise the shorter one is ordered first."},
{"lineNum":" 2822","line":"      */"},
{"lineNum":" 2823","line":"      int"},
{"lineNum":" 2824","line":"      compare(const basic_string& __str) const"},
{"lineNum":" 2825","line":"      {"},
{"lineNum":" 2826","line":"\tconst size_type __size = this->size();"},
{"lineNum":" 2827","line":"\tconst size_type __osize = __str.size();"},
{"lineNum":" 2828","line":"\tconst size_type __len = std::min(__size, __osize);"},
{"lineNum":" 2829","line":""},
{"lineNum":" 2830","line":"\tint __r = traits_type::compare(_M_data(), __str.data(), __len);"},
{"lineNum":" 2831","line":"\tif (!__r)"},
{"lineNum":" 2832","line":"\t  __r = _S_compare(__size, __osize);"},
{"lineNum":" 2833","line":"\treturn __r;"},
{"lineNum":" 2834","line":"      }"},
{"lineNum":" 2835","line":""},
{"lineNum":" 2836","line":"#if __cplusplus > 201402L"},
{"lineNum":" 2837","line":"      /**"},
{"lineNum":" 2838","line":"       *  @brief  Compare to a string_view."},
{"lineNum":" 2839","line":"       *  @param __svt An object convertible to string_view to compare against."},
{"lineNum":" 2840","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 2841","line":"       */"},
{"lineNum":" 2842","line":"      template<typename _Tp>"},
{"lineNum":" 2843","line":"\t_If_sv<_Tp, int>"},
{"lineNum":" 2844","line":"\tcompare(const _Tp& __svt) const"},
{"lineNum":" 2845","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 2846","line":"\t{"},
{"lineNum":" 2847","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 2848","line":"\t  const size_type __size = this->size();"},
{"lineNum":" 2849","line":"\t  const size_type __osize = __sv.size();"},
{"lineNum":" 2850","line":"\t  const size_type __len = std::min(__size, __osize);"},
{"lineNum":" 2851","line":""},
{"lineNum":" 2852","line":"\t  int __r = traits_type::compare(_M_data(), __sv.data(), __len);"},
{"lineNum":" 2853","line":"\t  if (!__r)"},
{"lineNum":" 2854","line":"\t    __r = _S_compare(__size, __osize);"},
{"lineNum":" 2855","line":"\t  return __r;"},
{"lineNum":" 2856","line":"\t}"},
{"lineNum":" 2857","line":""},
{"lineNum":" 2858","line":"      /**"},
{"lineNum":" 2859","line":"       *  @brief  Compare to a string_view."},
{"lineNum":" 2860","line":"       *  @param __pos  A position in the string to start comparing from."},
{"lineNum":" 2861","line":"       *  @param __n  The number of characters to compare."},
{"lineNum":" 2862","line":"       *  @param __svt  An object convertible to string_view to compare"},
{"lineNum":" 2863","line":"       *                against."},
{"lineNum":" 2864","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 2865","line":"       */"},
{"lineNum":" 2866","line":"      template<typename _Tp>"},
{"lineNum":" 2867","line":"\t_If_sv<_Tp, int>"},
{"lineNum":" 2868","line":"\tcompare(size_type __pos, size_type __n, const _Tp& __svt) const"},
{"lineNum":" 2869","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 2870","line":"\t{"},
{"lineNum":" 2871","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 2872","line":"\t  return __sv_type(*this).substr(__pos, __n).compare(__sv);"},
{"lineNum":" 2873","line":"\t}"},
{"lineNum":" 2874","line":""},
{"lineNum":" 2875","line":"      /**"},
{"lineNum":" 2876","line":"       *  @brief  Compare to a string_view."},
{"lineNum":" 2877","line":"       *  @param __pos1  A position in the string to start comparing from."},
{"lineNum":" 2878","line":"       *  @param __n1  The number of characters to compare."},
{"lineNum":" 2879","line":"       *  @param __svt  An object convertible to string_view to compare"},
{"lineNum":" 2880","line":"       *                against."},
{"lineNum":" 2881","line":"       *  @param __pos2  A position in the string_view to start comparing from."},
{"lineNum":" 2882","line":"       *  @param __n2  The number of characters to compare."},
{"lineNum":" 2883","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 2884","line":"       */"},
{"lineNum":" 2885","line":"      template<typename _Tp>"},
{"lineNum":" 2886","line":"\t_If_sv<_Tp, int>"},
{"lineNum":" 2887","line":"\tcompare(size_type __pos1, size_type __n1, const _Tp& __svt,"},
{"lineNum":" 2888","line":"\t\tsize_type __pos2, size_type __n2 = npos) const"},
{"lineNum":" 2889","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 2890","line":"\t{"},
{"lineNum":" 2891","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 2892","line":"\t  return __sv_type(*this)"},
{"lineNum":" 2893","line":"\t    .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));"},
{"lineNum":" 2894","line":"\t}"},
{"lineNum":" 2895","line":"#endif // C++17"},
{"lineNum":" 2896","line":""},
{"lineNum":" 2897","line":"      /**"},
{"lineNum":" 2898","line":"       *  @brief  Compare substring to a string."},
{"lineNum":" 2899","line":"       *  @param __pos  Index of first character of substring."},
{"lineNum":" 2900","line":"       *  @param __n  Number of characters in substring."},
{"lineNum":" 2901","line":"       *  @param __str  String to compare against."},
{"lineNum":" 2902","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 2903","line":"       *"},
{"lineNum":" 2904","line":"       *  Form the substring of this string from the @a __n characters"},
{"lineNum":" 2905","line":"       *  starting at @a __pos.  Returns an integer < 0 if the"},
{"lineNum":" 2906","line":"       *  substring is ordered before @a __str, 0 if their values are"},
{"lineNum":" 2907","line":"       *  equivalent, or > 0 if the substring is ordered after @a"},
{"lineNum":" 2908","line":"       *  __str.  Determines the effective length rlen of the strings"},
{"lineNum":" 2909","line":"       *  to compare as the smallest of the length of the substring"},
{"lineNum":" 2910","line":"       *  and @a __str.size().  The function then compares the two"},
{"lineNum":" 2911","line":"       *  strings by calling"},
{"lineNum":" 2912","line":"       *  traits::compare(substring.data(),str.data(),rlen).  If the"},
{"lineNum":" 2913","line":"       *  result of the comparison is nonzero returns it, otherwise"},
{"lineNum":" 2914","line":"       *  the shorter one is ordered first."},
{"lineNum":" 2915","line":"      */"},
{"lineNum":" 2916","line":"      int"},
{"lineNum":" 2917","line":"      compare(size_type __pos, size_type __n, const basic_string& __str) const;"},
{"lineNum":" 2918","line":""},
{"lineNum":" 2919","line":"      /**"},
{"lineNum":" 2920","line":"       *  @brief  Compare substring to a substring."},
{"lineNum":" 2921","line":"       *  @param __pos1  Index of first character of substring."},
{"lineNum":" 2922","line":"       *  @param __n1  Number of characters in substring."},
{"lineNum":" 2923","line":"       *  @param __str  String to compare against."},
{"lineNum":" 2924","line":"       *  @param __pos2  Index of first character of substring of str."},
{"lineNum":" 2925","line":"       *  @param __n2  Number of characters in substring of str."},
{"lineNum":" 2926","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 2927","line":"       *"},
{"lineNum":" 2928","line":"       *  Form the substring of this string from the @a __n1"},
{"lineNum":" 2929","line":"       *  characters starting at @a __pos1.  Form the substring of @a"},
{"lineNum":" 2930","line":"       *  __str from the @a __n2 characters starting at @a __pos2."},
{"lineNum":" 2931","line":"       *  Returns an integer < 0 if this substring is ordered before"},
{"lineNum":" 2932","line":"       *  the substring of @a __str, 0 if their values are equivalent,"},
{"lineNum":" 2933","line":"       *  or > 0 if this substring is ordered after the substring of"},
{"lineNum":" 2934","line":"       *  @a __str.  Determines the effective length rlen of the"},
{"lineNum":" 2935","line":"       *  strings to compare as the smallest of the lengths of the"},
{"lineNum":" 2936","line":"       *  substrings.  The function then compares the two strings by"},
{"lineNum":" 2937","line":"       *  calling"},
{"lineNum":" 2938","line":"       *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen)."},
{"lineNum":" 2939","line":"       *  If the result of the comparison is nonzero returns it,"},
{"lineNum":" 2940","line":"       *  otherwise the shorter one is ordered first."},
{"lineNum":" 2941","line":"      */"},
{"lineNum":" 2942","line":"      int"},
{"lineNum":" 2943","line":"      compare(size_type __pos1, size_type __n1, const basic_string& __str,"},
{"lineNum":" 2944","line":"\t      size_type __pos2, size_type __n2) const;"},
{"lineNum":" 2945","line":""},
{"lineNum":" 2946","line":"      /**"},
{"lineNum":" 2947","line":"       *  @brief  Compare to a C string."},
{"lineNum":" 2948","line":"       *  @param __s  C string to compare against."},
{"lineNum":" 2949","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 2950","line":"       *"},
{"lineNum":" 2951","line":"       *  Returns an integer < 0 if this string is ordered before @a __s, 0 if"},
{"lineNum":" 2952","line":"       *  their values are equivalent, or > 0 if this string is ordered after"},
{"lineNum":" 2953","line":"       *  @a __s.  Determines the effective length rlen of the strings to"},
{"lineNum":" 2954","line":"       *  compare as the smallest of size() and the length of a string"},
{"lineNum":" 2955","line":"       *  constructed from @a __s.  The function then compares the two strings"},
{"lineNum":" 2956","line":"       *  by calling traits::compare(data(),s,rlen).  If the result of the"},
{"lineNum":" 2957","line":"       *  comparison is nonzero returns it, otherwise the shorter one is"},
{"lineNum":" 2958","line":"       *  ordered first."},
{"lineNum":" 2959","line":"      */"},
{"lineNum":" 2960","line":"      int"},
{"lineNum":" 2961","line":"      compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 2962","line":""},
{"lineNum":" 2963","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":" 2964","line":"      // 5 String::compare specification questionable"},
{"lineNum":" 2965","line":"      /**"},
{"lineNum":" 2966","line":"       *  @brief  Compare substring to a C string."},
{"lineNum":" 2967","line":"       *  @param __pos  Index of first character of substring."},
{"lineNum":" 2968","line":"       *  @param __n1  Number of characters in substring."},
{"lineNum":" 2969","line":"       *  @param __s  C string to compare against."},
{"lineNum":" 2970","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 2971","line":"       *"},
{"lineNum":" 2972","line":"       *  Form the substring of this string from the @a __n1"},
{"lineNum":" 2973","line":"       *  characters starting at @a pos.  Returns an integer < 0 if"},
{"lineNum":" 2974","line":"       *  the substring is ordered before @a __s, 0 if their values"},
{"lineNum":" 2975","line":"       *  are equivalent, or > 0 if the substring is ordered after @a"},
{"lineNum":" 2976","line":"       *  __s.  Determines the effective length rlen of the strings to"},
{"lineNum":" 2977","line":"       *  compare as the smallest of the length of the substring and"},
{"lineNum":" 2978","line":"       *  the length of a string constructed from @a __s.  The"},
{"lineNum":" 2979","line":"       *  function then compares the two string by calling"},
{"lineNum":" 2980","line":"       *  traits::compare(substring.data(),__s,rlen).  If the result of"},
{"lineNum":" 2981","line":"       *  the comparison is nonzero returns it, otherwise the shorter"},
{"lineNum":" 2982","line":"       *  one is ordered first."},
{"lineNum":" 2983","line":"      */"},
{"lineNum":" 2984","line":"      int"},
{"lineNum":" 2985","line":"      compare(size_type __pos, size_type __n1, const _CharT* __s) const;"},
{"lineNum":" 2986","line":""},
{"lineNum":" 2987","line":"      /**"},
{"lineNum":" 2988","line":"       *  @brief  Compare substring against a character %array."},
{"lineNum":" 2989","line":"       *  @param __pos  Index of first character of substring."},
{"lineNum":" 2990","line":"       *  @param __n1  Number of characters in substring."},
{"lineNum":" 2991","line":"       *  @param __s  character %array to compare against."},
{"lineNum":" 2992","line":"       *  @param __n2  Number of characters of s."},
{"lineNum":" 2993","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 2994","line":"       *"},
{"lineNum":" 2995","line":"       *  Form the substring of this string from the @a __n1"},
{"lineNum":" 2996","line":"       *  characters starting at @a __pos.  Form a string from the"},
{"lineNum":" 2997","line":"       *  first @a __n2 characters of @a __s.  Returns an integer < 0"},
{"lineNum":" 2998","line":"       *  if this substring is ordered before the string from @a __s,"},
{"lineNum":" 2999","line":"       *  0 if their values are equivalent, or > 0 if this substring"},
{"lineNum":" 3000","line":"       *  is ordered after the string from @a __s.  Determines the"},
{"lineNum":" 3001","line":"       *  effective length rlen of the strings to compare as the"},
{"lineNum":" 3002","line":"       *  smallest of the length of the substring and @a __n2.  The"},
{"lineNum":" 3003","line":"       *  function then compares the two strings by calling"},
{"lineNum":" 3004","line":"       *  traits::compare(substring.data(),s,rlen).  If the result of"},
{"lineNum":" 3005","line":"       *  the comparison is nonzero returns it, otherwise the shorter"},
{"lineNum":" 3006","line":"       *  one is ordered first."},
{"lineNum":" 3007","line":"       *"},
{"lineNum":" 3008","line":"       *  NB: s must have at least n2 characters, &apos;\\\\0&apos; has"},
{"lineNum":" 3009","line":"       *  no special meaning."},
{"lineNum":" 3010","line":"      */"},
{"lineNum":" 3011","line":"      int"},
{"lineNum":" 3012","line":"      compare(size_type __pos, size_type __n1, const _CharT* __s,"},
{"lineNum":" 3013","line":"\t      size_type __n2) const;"},
{"lineNum":" 3014","line":""},
{"lineNum":" 3015","line":"      // Allow basic_stringbuf::__xfer_bufptrs to call _M_length:"},
{"lineNum":" 3016","line":"      template<typename, typename, typename> friend class basic_stringbuf;"},
{"lineNum":" 3017","line":"    };"},
{"lineNum":" 3018","line":"_GLIBCXX_END_NAMESPACE_CXX11"},
{"lineNum":" 3019","line":"#else  // !_GLIBCXX_USE_CXX11_ABI"},
{"lineNum":" 3020","line":"  // Reference-counted COW string implentation"},
{"lineNum":" 3021","line":""},
{"lineNum":" 3022","line":"  /**"},
{"lineNum":" 3023","line":"   *  @class basic_string basic_string.h <string>"},
{"lineNum":" 3024","line":"   *  @brief  Managing sequences of characters and character-like objects."},
{"lineNum":" 3025","line":"   *"},
{"lineNum":" 3026","line":"   *  @ingroup strings"},
{"lineNum":" 3027","line":"   *  @ingroup sequences"},
{"lineNum":" 3028","line":"   *"},
{"lineNum":" 3029","line":"   *  @tparam _CharT  Type of character"},
{"lineNum":" 3030","line":"   *  @tparam _Traits  Traits for character type, defaults to"},
{"lineNum":" 3031","line":"   *                   char_traits<_CharT>."},
{"lineNum":" 3032","line":"   *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>."},
{"lineNum":" 3033","line":"   *"},
{"lineNum":" 3034","line":"   *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a"},
{"lineNum":" 3035","line":"   *  <a href=\"tables.html#66\">reversible container</a>, and a"},
{"lineNum":" 3036","line":"   *  <a href=\"tables.html#67\">sequence</a>.  Of the"},
{"lineNum":" 3037","line":"   *  <a href=\"tables.html#68\">optional sequence requirements</a>, only"},
{"lineNum":" 3038","line":"   *  @c push_back, @c at, and @c %array access are supported."},
{"lineNum":" 3039","line":"   *"},
{"lineNum":" 3040","line":"   *  @doctodo"},
{"lineNum":" 3041","line":"   *"},
{"lineNum":" 3042","line":"   *"},
{"lineNum":" 3043","line":"   *  Documentation?  What\'s that?"},
{"lineNum":" 3044","line":"   *  Nathan Myers <ncm@cantrip.org>."},
{"lineNum":" 3045","line":"   *"},
{"lineNum":" 3046","line":"   *  A string looks like this:"},
{"lineNum":" 3047","line":"   *"},
{"lineNum":" 3048","line":"   *  @code"},
{"lineNum":" 3049","line":"   *                                        [_Rep]"},
{"lineNum":" 3050","line":"   *                                        _M_length"},
{"lineNum":" 3051","line":"   *   [basic_string<char_type>]            _M_capacity"},
{"lineNum":" 3052","line":"   *   _M_dataplus                          _M_refcount"},
{"lineNum":" 3053","line":"   *   _M_p ---------------->               unnamed array of char_type"},
{"lineNum":" 3054","line":"   *  @endcode"},
{"lineNum":" 3055","line":"   *"},
{"lineNum":" 3056","line":"   *  Where the _M_p points to the first character in the string, and"},
{"lineNum":" 3057","line":"   *  you cast it to a pointer-to-_Rep and subtract 1 to get a"},
{"lineNum":" 3058","line":"   *  pointer to the header."},
{"lineNum":" 3059","line":"   *"},
{"lineNum":" 3060","line":"   *  This approach has the enormous advantage that a string object"},
{"lineNum":" 3061","line":"   *  requires only one allocation.  All the ugliness is confined"},
{"lineNum":" 3062","line":"   *  within a single %pair of inline functions, which each compile to"},
{"lineNum":" 3063","line":"   *  a single @a add instruction: _Rep::_M_data(), and"},
{"lineNum":" 3064","line":"   *  string::_M_rep(); and the allocation function which gets a"},
{"lineNum":" 3065","line":"   *  block of raw bytes and with room enough and constructs a _Rep"},
{"lineNum":" 3066","line":"   *  object at the front."},
{"lineNum":" 3067","line":"   *"},
{"lineNum":" 3068","line":"   *  The reason you want _M_data pointing to the character %array and"},
{"lineNum":" 3069","line":"   *  not the _Rep is so that the debugger can see the string"},
{"lineNum":" 3070","line":"   *  contents. (Probably we should add a non-inline member to get"},
{"lineNum":" 3071","line":"   *  the _Rep for the debugger to use, so users can check the actual"},
{"lineNum":" 3072","line":"   *  string length.)"},
{"lineNum":" 3073","line":"   *"},
{"lineNum":" 3074","line":"   *  Note that the _Rep object is a POD so that you can have a"},
{"lineNum":" 3075","line":"   *  static <em>empty string</em> _Rep object already @a constructed before"},
{"lineNum":" 3076","line":"   *  static constructors have run.  The reference-count encoding is"},
{"lineNum":" 3077","line":"   *  chosen so that a 0 indicates one reference, so you never try to"},
{"lineNum":" 3078","line":"   *  destroy the empty-string _Rep object."},
{"lineNum":" 3079","line":"   *"},
{"lineNum":" 3080","line":"   *  All but the last paragraph is considered pretty conventional"},
{"lineNum":" 3081","line":"   *  for a C++ string implementation."},
{"lineNum":" 3082","line":"  */"},
{"lineNum":" 3083","line":"  // 21.3  Template class basic_string"},
{"lineNum":" 3084","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 3085","line":"    class basic_string"},
{"lineNum":" 3086","line":"    {"},
{"lineNum":" 3087","line":"      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;"},
{"lineNum":" 3088","line":""},
{"lineNum":" 3089","line":"      // Types:"},
{"lineNum":" 3090","line":"    public:"},
{"lineNum":" 3091","line":"      typedef _Traits\t\t\t\t\t    traits_type;"},
{"lineNum":" 3092","line":"      typedef typename _Traits::char_type\t\t    value_type;"},
{"lineNum":" 3093","line":"      typedef _Alloc\t\t\t\t\t    allocator_type;"},
{"lineNum":" 3094","line":"      typedef typename _CharT_alloc_type::size_type\t    size_type;"},
{"lineNum":" 3095","line":"      typedef typename _CharT_alloc_type::difference_type   difference_type;"},
{"lineNum":" 3096","line":"      typedef typename _CharT_alloc_type::reference\t    reference;"},
{"lineNum":" 3097","line":"      typedef typename _CharT_alloc_type::const_reference   const_reference;"},
{"lineNum":" 3098","line":"      typedef typename _CharT_alloc_type::pointer\t    pointer;"},
{"lineNum":" 3099","line":"      typedef typename _CharT_alloc_type::const_pointer\t    const_pointer;"},
{"lineNum":" 3100","line":"      typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;"},
{"lineNum":" 3101","line":"      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>"},
{"lineNum":" 3102","line":"                                                            const_iterator;"},
{"lineNum":" 3103","line":"      typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;"},
{"lineNum":" 3104","line":"      typedef std::reverse_iterator<iterator>\t\t    reverse_iterator;"},
{"lineNum":" 3105","line":""},
{"lineNum":" 3106","line":"    private:"},
{"lineNum":" 3107","line":"      // _Rep: string representation"},
{"lineNum":" 3108","line":"      //   Invariants:"},
{"lineNum":" 3109","line":"      //   1. String really contains _M_length + 1 characters: due to 21.3.4"},
{"lineNum":" 3110","line":"      //      must be kept null-terminated."},
{"lineNum":" 3111","line":"      //   2. _M_capacity >= _M_length"},
{"lineNum":" 3112","line":"      //      Allocated memory is always (_M_capacity + 1) * sizeof(_CharT)."},
{"lineNum":" 3113","line":"      //   3. _M_refcount has three states:"},
{"lineNum":" 3114","line":"      //      -1: leaked, one reference, no ref-copies allowed, non-const."},
{"lineNum":" 3115","line":"      //       0: one reference, non-const."},
{"lineNum":" 3116","line":"      //     n>0: n + 1 references, operations require a lock, const."},
{"lineNum":" 3117","line":"      //   4. All fields==0 is an empty string, given the extra storage"},
{"lineNum":" 3118","line":"      //      beyond-the-end for a null terminator; thus, the shared"},
{"lineNum":" 3119","line":"      //      empty string representation needs no constructor."},
{"lineNum":" 3120","line":""},
{"lineNum":" 3121","line":"      struct _Rep_base"},
{"lineNum":" 3122","line":"      {"},
{"lineNum":" 3123","line":"\tsize_type\t\t_M_length;"},
{"lineNum":" 3124","line":"\tsize_type\t\t_M_capacity;"},
{"lineNum":" 3125","line":"\t_Atomic_word\t\t_M_refcount;"},
{"lineNum":" 3126","line":"      };"},
{"lineNum":" 3127","line":""},
{"lineNum":" 3128","line":"      struct _Rep : _Rep_base"},
{"lineNum":" 3129","line":"      {"},
{"lineNum":" 3130","line":"\t// Types:"},
{"lineNum":" 3131","line":"\ttypedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;"},
{"lineNum":" 3132","line":""},
{"lineNum":" 3133","line":"\t// (Public) Data members:"},
{"lineNum":" 3134","line":""},
{"lineNum":" 3135","line":"\t// The maximum number of individual char_type elements of an"},
{"lineNum":" 3136","line":"\t// individual string is determined by _S_max_size. This is the"},
{"lineNum":" 3137","line":"\t// value that will be returned by max_size().  (Whereas npos"},
{"lineNum":" 3138","line":"\t// is the maximum number of bytes the allocator can allocate.)"},
{"lineNum":" 3139","line":"\t// If one was to divvy up the theoretical largest size string,"},
{"lineNum":" 3140","line":"\t// with a terminating character and m _CharT elements, it\'d"},
{"lineNum":" 3141","line":"\t// look like this:"},
{"lineNum":" 3142","line":"\t// npos = sizeof(_Rep) + (m * sizeof(_CharT)) + sizeof(_CharT)"},
{"lineNum":" 3143","line":"\t// Solving for m:"},
{"lineNum":" 3144","line":"\t// m = ((npos - sizeof(_Rep))/sizeof(CharT)) - 1"},
{"lineNum":" 3145","line":"\t// In addition, this implementation quarters this amount."},
{"lineNum":" 3146","line":"\tstatic const size_type\t_S_max_size;"},
{"lineNum":" 3147","line":"\tstatic const _CharT\t_S_terminal;"},
{"lineNum":" 3148","line":""},
{"lineNum":" 3149","line":"\t// The following storage is init\'d to 0 by the linker, resulting"},
{"lineNum":" 3150","line":"        // (carefully) in an empty string with one reference."},
{"lineNum":" 3151","line":"        static size_type _S_empty_rep_storage[];"},
{"lineNum":" 3152","line":""},
{"lineNum":" 3153","line":"        static _Rep&"},
{"lineNum":" 3154","line":"        _S_empty_rep() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3155","line":"        {"},
{"lineNum":" 3156","line":"\t  // NB: Mild hack to avoid strict-aliasing warnings.  Note that"},
{"lineNum":" 3157","line":"\t  // _S_empty_rep_storage is never modified and the punning should"},
{"lineNum":" 3158","line":"\t  // be reasonably safe in this case."},
{"lineNum":" 3159","line":"\t  void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);"},
{"lineNum":" 3160","line":"\t  return *reinterpret_cast<_Rep*>(__p);"},
{"lineNum":" 3161","line":"\t}"},
{"lineNum":" 3162","line":""},
{"lineNum":" 3163","line":"        bool"},
{"lineNum":" 3164","line":"\t_M_is_leaked() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3165","line":"        {"},
{"lineNum":" 3166","line":"#if defined(__GTHREADS)"},
{"lineNum":" 3167","line":"          // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,"},
{"lineNum":" 3168","line":"          // so we need to use an atomic load. However, _M_is_leaked"},
{"lineNum":" 3169","line":"          // predicate does not change concurrently (i.e. the string is either"},
{"lineNum":" 3170","line":"          // leaked or not), so a relaxed load is enough."},
{"lineNum":" 3171","line":"          return __atomic_load_n(&this->_M_refcount, __ATOMIC_RELAXED) < 0;"},
{"lineNum":" 3172","line":"#else"},
{"lineNum":" 3173","line":"          return this->_M_refcount < 0;"},
{"lineNum":" 3174","line":"#endif"},
{"lineNum":" 3175","line":"        }"},
{"lineNum":" 3176","line":""},
{"lineNum":" 3177","line":"        bool"},
{"lineNum":" 3178","line":"\t_M_is_shared() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3179","line":"\t{"},
{"lineNum":" 3180","line":"#if defined(__GTHREADS)"},
{"lineNum":" 3181","line":"          // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,"},
{"lineNum":" 3182","line":"          // so we need to use an atomic load. Another thread can drop last"},
{"lineNum":" 3183","line":"          // but one reference concurrently with this check, so we need this"},
{"lineNum":" 3184","line":"          // load to be acquire to synchronize with release fetch_and_add in"},
{"lineNum":" 3185","line":"          // _M_dispose."},
{"lineNum":" 3186","line":"          return __atomic_load_n(&this->_M_refcount, __ATOMIC_ACQUIRE) > 0;"},
{"lineNum":" 3187","line":"#else"},
{"lineNum":" 3188","line":"          return this->_M_refcount > 0;"},
{"lineNum":" 3189","line":"#endif"},
{"lineNum":" 3190","line":"        }"},
{"lineNum":" 3191","line":""},
{"lineNum":" 3192","line":"        void"},
{"lineNum":" 3193","line":"\t_M_set_leaked() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3194","line":"        { this->_M_refcount = -1; }"},
{"lineNum":" 3195","line":""},
{"lineNum":" 3196","line":"        void"},
{"lineNum":" 3197","line":"\t_M_set_sharable() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3198","line":"        { this->_M_refcount = 0; }"},
{"lineNum":" 3199","line":""},
{"lineNum":" 3200","line":"\tvoid"},
{"lineNum":" 3201","line":"\t_M_set_length_and_sharable(size_type __n) _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3202","line":"\t{"},
{"lineNum":" 3203","line":"#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0"},
{"lineNum":" 3204","line":"\t  if (__builtin_expect(this != &_S_empty_rep(), false))"},
{"lineNum":" 3205","line":"#endif"},
{"lineNum":" 3206","line":"\t    {"},
{"lineNum":" 3207","line":"\t      this->_M_set_sharable();  // One reference."},
{"lineNum":" 3208","line":"\t      this->_M_length = __n;"},
{"lineNum":" 3209","line":"\t      traits_type::assign(this->_M_refdata()[__n], _S_terminal);"},
{"lineNum":" 3210","line":"\t      // grrr. (per 21.3.4)"},
{"lineNum":" 3211","line":"\t      // You cannot leave those LWG people alone for a second."},
{"lineNum":" 3212","line":"\t    }"},
{"lineNum":" 3213","line":"\t}"},
{"lineNum":" 3214","line":""},
{"lineNum":" 3215","line":"\t_CharT*"},
{"lineNum":" 3216","line":"\t_M_refdata() throw()"},
{"lineNum":" 3217","line":"\t{ return reinterpret_cast<_CharT*>(this + 1); }"},
{"lineNum":" 3218","line":""},
{"lineNum":" 3219","line":"\t_CharT*"},
{"lineNum":" 3220","line":"\t_M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)"},
{"lineNum":" 3221","line":"\t{"},
{"lineNum":" 3222","line":"\t  return (!_M_is_leaked() && __alloc1 == __alloc2)"},
{"lineNum":" 3223","line":"\t          ? _M_refcopy() : _M_clone(__alloc1);"},
{"lineNum":" 3224","line":"\t}"},
{"lineNum":" 3225","line":""},
{"lineNum":" 3226","line":"\t// Create & Destroy"},
{"lineNum":" 3227","line":"\tstatic _Rep*"},
{"lineNum":" 3228","line":"\t_S_create(size_type, size_type, const _Alloc&);"},
{"lineNum":" 3229","line":""},
{"lineNum":" 3230","line":"\tvoid"},
{"lineNum":" 3231","line":"\t_M_dispose(const _Alloc& __a) _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3232","line":"\t{"},
{"lineNum":" 3233","line":"#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0"},
{"lineNum":" 3234","line":"\t  if (__builtin_expect(this != &_S_empty_rep(), false))"},
{"lineNum":" 3235","line":"#endif"},
{"lineNum":" 3236","line":"\t    {"},
{"lineNum":" 3237","line":"\t      // Be race-detector-friendly.  For more info see bits/c++config."},
{"lineNum":" 3238","line":"\t      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);"},
{"lineNum":" 3239","line":"              // Decrement of _M_refcount is acq_rel, because:"},
{"lineNum":" 3240","line":"              // - all but last decrements need to release to synchronize with"},
{"lineNum":" 3241","line":"              //   the last decrement that will delete the object."},
{"lineNum":" 3242","line":"              // - the last decrement needs to acquire to synchronize with"},
{"lineNum":" 3243","line":"              //   all the previous decrements."},
{"lineNum":" 3244","line":"              // - last but one decrement needs to release to synchronize with"},
{"lineNum":" 3245","line":"              //   the acquire load in _M_is_shared that will conclude that"},
{"lineNum":" 3246","line":"              //   the object is not shared anymore."},
{"lineNum":" 3247","line":"\t      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,"},
{"lineNum":" 3248","line":"\t\t\t\t\t\t\t -1) <= 0)"},
{"lineNum":" 3249","line":"\t\t{"},
{"lineNum":" 3250","line":"\t\t  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);"},
{"lineNum":" 3251","line":"\t\t  _M_destroy(__a);"},
{"lineNum":" 3252","line":"\t\t}"},
{"lineNum":" 3253","line":"\t    }"},
{"lineNum":" 3254","line":"\t}  // XXX MT"},
{"lineNum":" 3255","line":""},
{"lineNum":" 3256","line":"\tvoid"},
{"lineNum":" 3257","line":"\t_M_destroy(const _Alloc&) throw();"},
{"lineNum":" 3258","line":""},
{"lineNum":" 3259","line":"\t_CharT*"},
{"lineNum":" 3260","line":"\t_M_refcopy() throw()"},
{"lineNum":" 3261","line":"\t{"},
{"lineNum":" 3262","line":"#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0"},
{"lineNum":" 3263","line":"\t  if (__builtin_expect(this != &_S_empty_rep(), false))"},
{"lineNum":" 3264","line":"#endif"},
{"lineNum":" 3265","line":"            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);"},
{"lineNum":" 3266","line":"\t  return _M_refdata();"},
{"lineNum":" 3267","line":"\t}  // XXX MT"},
{"lineNum":" 3268","line":""},
{"lineNum":" 3269","line":"\t_CharT*"},
{"lineNum":" 3270","line":"\t_M_clone(const _Alloc&, size_type __res = 0);"},
{"lineNum":" 3271","line":"      };"},
{"lineNum":" 3272","line":""},
{"lineNum":" 3273","line":"      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html"},
{"lineNum":" 3274","line":"      struct _Alloc_hider : _Alloc"},
{"lineNum":" 3275","line":"      {"},
{"lineNum":" 3276","line":"\t_Alloc_hider(_CharT* __dat, const _Alloc& __a) _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3277","line":"\t: _Alloc(__a), _M_p(__dat) { }"},
{"lineNum":" 3278","line":""},
{"lineNum":" 3279","line":"\t_CharT* _M_p; // The actual data."},
{"lineNum":" 3280","line":"      };"},
{"lineNum":" 3281","line":""},
{"lineNum":" 3282","line":"    public:"},
{"lineNum":" 3283","line":"      // Data Members (public):"},
{"lineNum":" 3284","line":"      // NB: This is an unsigned type, and thus represents the maximum"},
{"lineNum":" 3285","line":"      // size that the allocator can hold."},
{"lineNum":" 3286","line":"      ///  Value returned by various member functions when they fail."},
{"lineNum":" 3287","line":"      static const size_type\tnpos = static_cast<size_type>(-1);"},
{"lineNum":" 3288","line":""},
{"lineNum":" 3289","line":"    private:"},
{"lineNum":" 3290","line":"      // Data Members (private):"},
{"lineNum":" 3291","line":"      mutable _Alloc_hider\t_M_dataplus;"},
{"lineNum":" 3292","line":""},
{"lineNum":" 3293","line":"      _CharT*"},
{"lineNum":" 3294","line":"      _M_data() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3295","line":"      { return  _M_dataplus._M_p; }"},
{"lineNum":" 3296","line":""},
{"lineNum":" 3297","line":"      _CharT*"},
{"lineNum":" 3298","line":"      _M_data(_CharT* __p) _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3299","line":"      { return (_M_dataplus._M_p = __p); }"},
{"lineNum":" 3300","line":""},
{"lineNum":" 3301","line":"      _Rep*"},
{"lineNum":" 3302","line":"      _M_rep() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3303","line":"      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }"},
{"lineNum":" 3304","line":""},
{"lineNum":" 3305","line":"      // For the internal use we have functions similar to `begin\'/`end\'"},
{"lineNum":" 3306","line":"      // but they do not call _M_leak."},
{"lineNum":" 3307","line":"      iterator"},
{"lineNum":" 3308","line":"      _M_ibegin() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3309","line":"      { return iterator(_M_data()); }"},
{"lineNum":" 3310","line":""},
{"lineNum":" 3311","line":"      iterator"},
{"lineNum":" 3312","line":"      _M_iend() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3313","line":"      { return iterator(_M_data() + this->size()); }"},
{"lineNum":" 3314","line":""},
{"lineNum":" 3315","line":"      void"},
{"lineNum":" 3316","line":"      _M_leak()    // for use in begin() & non-const op[]"},
{"lineNum":" 3317","line":"      {"},
{"lineNum":" 3318","line":"\tif (!_M_rep()->_M_is_leaked())"},
{"lineNum":" 3319","line":"\t  _M_leak_hard();"},
{"lineNum":" 3320","line":"      }"},
{"lineNum":" 3321","line":""},
{"lineNum":" 3322","line":"      size_type"},
{"lineNum":" 3323","line":"      _M_check(size_type __pos, const char* __s) const"},
{"lineNum":" 3324","line":"      {"},
{"lineNum":" 3325","line":"\tif (__pos > this->size())"},
{"lineNum":" 3326","line":"\t  __throw_out_of_range_fmt(__N(\"%s: __pos (which is %zu) > \""},
{"lineNum":" 3327","line":"\t\t\t\t       \"this->size() (which is %zu)\"),"},
{"lineNum":" 3328","line":"\t\t\t\t   __s, __pos, this->size());"},
{"lineNum":" 3329","line":"\treturn __pos;"},
{"lineNum":" 3330","line":"      }"},
{"lineNum":" 3331","line":""},
{"lineNum":" 3332","line":"      void"},
{"lineNum":" 3333","line":"      _M_check_length(size_type __n1, size_type __n2, const char* __s) const"},
{"lineNum":" 3334","line":"      {"},
{"lineNum":" 3335","line":"\tif (this->max_size() - (this->size() - __n1) < __n2)"},
{"lineNum":" 3336","line":"\t  __throw_length_error(__N(__s));"},
{"lineNum":" 3337","line":"      }"},
{"lineNum":" 3338","line":""},
{"lineNum":" 3339","line":"      // NB: _M_limit doesn\'t check for a bad __pos value."},
{"lineNum":" 3340","line":"      size_type"},
{"lineNum":" 3341","line":"      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3342","line":"      {"},
{"lineNum":" 3343","line":"\tconst bool __testoff =  __off < this->size() - __pos;"},
{"lineNum":" 3344","line":"\treturn __testoff ? __off : this->size() - __pos;"},
{"lineNum":" 3345","line":"      }"},
{"lineNum":" 3346","line":""},
{"lineNum":" 3347","line":"      // True if _Rep and source do not overlap."},
{"lineNum":" 3348","line":"      bool"},
{"lineNum":" 3349","line":"      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3350","line":"      {"},
{"lineNum":" 3351","line":"\treturn (less<const _CharT*>()(__s, _M_data())"},
{"lineNum":" 3352","line":"\t\t|| less<const _CharT*>()(_M_data() + this->size(), __s));"},
{"lineNum":" 3353","line":"      }"},
{"lineNum":" 3354","line":""},
{"lineNum":" 3355","line":"      // When __n = 1 way faster than the general multichar"},
{"lineNum":" 3356","line":"      // traits_type::copy/move/assign."},
{"lineNum":" 3357","line":"      static void"},
{"lineNum":" 3358","line":"      _M_copy(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3359","line":"      {"},
{"lineNum":" 3360","line":"\tif (__n == 1)"},
{"lineNum":" 3361","line":"\t  traits_type::assign(*__d, *__s);"},
{"lineNum":" 3362","line":"\telse"},
{"lineNum":" 3363","line":"\t  traits_type::copy(__d, __s, __n);"},
{"lineNum":" 3364","line":"      }"},
{"lineNum":" 3365","line":""},
{"lineNum":" 3366","line":"      static void"},
{"lineNum":" 3367","line":"      _M_move(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3368","line":"      {"},
{"lineNum":" 3369","line":"\tif (__n == 1)"},
{"lineNum":" 3370","line":"\t  traits_type::assign(*__d, *__s);"},
{"lineNum":" 3371","line":"\telse"},
{"lineNum":" 3372","line":"\t  traits_type::move(__d, __s, __n);"},
{"lineNum":" 3373","line":"      }"},
{"lineNum":" 3374","line":""},
{"lineNum":" 3375","line":"      static void"},
{"lineNum":" 3376","line":"      _M_assign(_CharT* __d, size_type __n, _CharT __c) _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3377","line":"      {"},
{"lineNum":" 3378","line":"\tif (__n == 1)"},
{"lineNum":" 3379","line":"\t  traits_type::assign(*__d, __c);"},
{"lineNum":" 3380","line":"\telse"},
{"lineNum":" 3381","line":"\t  traits_type::assign(__d, __n, __c);"},
{"lineNum":" 3382","line":"      }"},
{"lineNum":" 3383","line":""},
{"lineNum":" 3384","line":"      // _S_copy_chars is a separate template to permit specialization"},
{"lineNum":" 3385","line":"      // to optimize for the common case of pointers as iterators."},
{"lineNum":" 3386","line":"      template<class _Iterator>"},
{"lineNum":" 3387","line":"        static void"},
{"lineNum":" 3388","line":"        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)"},
{"lineNum":" 3389","line":"        {"},
{"lineNum":" 3390","line":"\t  for (; __k1 != __k2; ++__k1, (void)++__p)"},
{"lineNum":" 3391","line":"\t    traits_type::assign(*__p, *__k1); // These types are off."},
{"lineNum":" 3392","line":"\t}"},
{"lineNum":" 3393","line":""},
{"lineNum":" 3394","line":"      static void"},
{"lineNum":" 3395","line":"      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3396","line":"      { _S_copy_chars(__p, __k1.base(), __k2.base()); }"},
{"lineNum":" 3397","line":""},
{"lineNum":" 3398","line":"      static void"},
{"lineNum":" 3399","line":"      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)"},
{"lineNum":" 3400","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3401","line":"      { _S_copy_chars(__p, __k1.base(), __k2.base()); }"},
{"lineNum":" 3402","line":""},
{"lineNum":" 3403","line":"      static void"},
{"lineNum":" 3404","line":"      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3405","line":"      { _M_copy(__p, __k1, __k2 - __k1); }"},
{"lineNum":" 3406","line":""},
{"lineNum":" 3407","line":"      static void"},
{"lineNum":" 3408","line":"      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)"},
{"lineNum":" 3409","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3410","line":"      { _M_copy(__p, __k1, __k2 - __k1); }"},
{"lineNum":" 3411","line":""},
{"lineNum":" 3412","line":"      static int"},
{"lineNum":" 3413","line":"      _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3414","line":"      {"},
{"lineNum":" 3415","line":"\tconst difference_type __d = difference_type(__n1 - __n2);"},
{"lineNum":" 3416","line":""},
{"lineNum":" 3417","line":"\tif (__d > __gnu_cxx::__numeric_traits<int>::__max)"},
{"lineNum":" 3418","line":"\t  return __gnu_cxx::__numeric_traits<int>::__max;"},
{"lineNum":" 3419","line":"\telse if (__d < __gnu_cxx::__numeric_traits<int>::__min)"},
{"lineNum":" 3420","line":"\t  return __gnu_cxx::__numeric_traits<int>::__min;"},
{"lineNum":" 3421","line":"\telse"},
{"lineNum":" 3422","line":"\t  return int(__d);"},
{"lineNum":" 3423","line":"      }"},
{"lineNum":" 3424","line":""},
{"lineNum":" 3425","line":"      void"},
{"lineNum":" 3426","line":"      _M_mutate(size_type __pos, size_type __len1, size_type __len2);"},
{"lineNum":" 3427","line":""},
{"lineNum":" 3428","line":"      void"},
{"lineNum":" 3429","line":"      _M_leak_hard();"},
{"lineNum":" 3430","line":""},
{"lineNum":" 3431","line":"      static _Rep&"},
{"lineNum":" 3432","line":"      _S_empty_rep() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3433","line":"      { return _Rep::_S_empty_rep(); }"},
{"lineNum":" 3434","line":""},
{"lineNum":" 3435","line":"#if __cplusplus > 201402L"},
{"lineNum":" 3436","line":"      // A helper type for avoiding boiler-plate."},
{"lineNum":" 3437","line":"      typedef basic_string_view<_CharT, _Traits> __sv_type;"},
{"lineNum":" 3438","line":""},
{"lineNum":" 3439","line":"      template<typename _Tp, typename _Res>"},
{"lineNum":" 3440","line":"\tusing _If_sv = enable_if_t<"},
{"lineNum":" 3441","line":"\t  __and_<is_convertible<const _Tp&, __sv_type>,"},
{"lineNum":" 3442","line":"\t\t __not_<is_convertible<const _Tp*, const basic_string*>>,"},
{"lineNum":" 3443","line":"\t\t __not_<is_convertible<const _Tp&, const _CharT*>>>::value,"},
{"lineNum":" 3444","line":"\t  _Res>;"},
{"lineNum":" 3445","line":""},
{"lineNum":" 3446","line":"      // Allows an implicit conversion to __sv_type."},
{"lineNum":" 3447","line":"      static __sv_type"},
{"lineNum":" 3448","line":"      _S_to_string_view(__sv_type __svt) noexcept"},
{"lineNum":" 3449","line":"      { return __svt; }"},
{"lineNum":" 3450","line":""},
{"lineNum":" 3451","line":"      // Wraps a string_view by explicit conversion and thus"},
{"lineNum":" 3452","line":"      // allows to add an internal constructor that does not"},
{"lineNum":" 3453","line":"      // participate in overload resolution when a string_view"},
{"lineNum":" 3454","line":"      // is provided."},
{"lineNum":" 3455","line":"      struct __sv_wrapper"},
{"lineNum":" 3456","line":"      {"},
{"lineNum":" 3457","line":"\texplicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }"},
{"lineNum":" 3458","line":"\t__sv_type _M_sv;"},
{"lineNum":" 3459","line":"      };"},
{"lineNum":" 3460","line":"#endif"},
{"lineNum":" 3461","line":""},
{"lineNum":" 3462","line":"    public:"},
{"lineNum":" 3463","line":"      // Construct/copy/destroy:"},
{"lineNum":" 3464","line":"      // NB: We overload ctors in some cases instead of using default"},
{"lineNum":" 3465","line":"      // arguments, per 17.4.4.4 para. 2 item 2."},
{"lineNum":" 3466","line":""},
{"lineNum":" 3467","line":"      /**"},
{"lineNum":" 3468","line":"       *  @brief  Default constructor creates an empty string."},
{"lineNum":" 3469","line":"       */"},
{"lineNum":" 3470","line":"      basic_string()"},
{"lineNum":" 3471","line":"#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0"},
{"lineNum":" 3472","line":"      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }"},
{"lineNum":" 3473","line":"#else"},
{"lineNum":" 3474","line":"      : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()){ }"},
{"lineNum":" 3475","line":"#endif"},
{"lineNum":" 3476","line":""},
{"lineNum":" 3477","line":"      /**"},
{"lineNum":" 3478","line":"       *  @brief  Construct an empty string using allocator @a a."},
{"lineNum":" 3479","line":"       */"},
{"lineNum":" 3480","line":"      explicit"},
{"lineNum":" 3481","line":"      basic_string(const _Alloc& __a);"},
{"lineNum":" 3482","line":""},
{"lineNum":" 3483","line":"      // NB: per LWG issue 42, semantics different from IS:"},
{"lineNum":" 3484","line":"      /**"},
{"lineNum":" 3485","line":"       *  @brief  Construct string with copy of value of @a str."},
{"lineNum":" 3486","line":"       *  @param  __str  Source string."},
{"lineNum":" 3487","line":"       */"},
{"lineNum":" 3488","line":"      basic_string(const basic_string& __str);"},
{"lineNum":" 3489","line":""},
{"lineNum":" 3490","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":" 3491","line":"      // 2583. no way to supply an allocator for basic_string(str, pos)"},
{"lineNum":" 3492","line":"      /**"},
{"lineNum":" 3493","line":"       *  @brief  Construct string as copy of a substring."},
{"lineNum":" 3494","line":"       *  @param  __str  Source string."},
{"lineNum":" 3495","line":"       *  @param  __pos  Index of first character to copy from."},
{"lineNum":" 3496","line":"       *  @param  __a  Allocator to use."},
{"lineNum":" 3497","line":"       */"},
{"lineNum":" 3498","line":"      basic_string(const basic_string& __str, size_type __pos,"},
{"lineNum":" 3499","line":"\t\t   const _Alloc& __a = _Alloc());"},
{"lineNum":" 3500","line":""},
{"lineNum":" 3501","line":"      /**"},
{"lineNum":" 3502","line":"       *  @brief  Construct string as copy of a substring."},
{"lineNum":" 3503","line":"       *  @param  __str  Source string."},
{"lineNum":" 3504","line":"       *  @param  __pos  Index of first character to copy from."},
{"lineNum":" 3505","line":"       *  @param  __n  Number of characters to copy."},
{"lineNum":" 3506","line":"       */"},
{"lineNum":" 3507","line":"      basic_string(const basic_string& __str, size_type __pos,"},
{"lineNum":" 3508","line":"\t\t   size_type __n);"},
{"lineNum":" 3509","line":"      /**"},
{"lineNum":" 3510","line":"       *  @brief  Construct string as copy of a substring."},
{"lineNum":" 3511","line":"       *  @param  __str  Source string."},
{"lineNum":" 3512","line":"       *  @param  __pos  Index of first character to copy from."},
{"lineNum":" 3513","line":"       *  @param  __n  Number of characters to copy."},
{"lineNum":" 3514","line":"       *  @param  __a  Allocator to use."},
{"lineNum":" 3515","line":"       */"},
{"lineNum":" 3516","line":"      basic_string(const basic_string& __str, size_type __pos,"},
{"lineNum":" 3517","line":"\t\t   size_type __n, const _Alloc& __a);"},
{"lineNum":" 3518","line":""},
{"lineNum":" 3519","line":"      /**"},
{"lineNum":" 3520","line":"       *  @brief  Construct string initialized by a character %array."},
{"lineNum":" 3521","line":"       *  @param  __s  Source character %array."},
{"lineNum":" 3522","line":"       *  @param  __n  Number of characters to copy."},
{"lineNum":" 3523","line":"       *  @param  __a  Allocator to use (default is default allocator)."},
{"lineNum":" 3524","line":"       *"},
{"lineNum":" 3525","line":"       *  NB: @a __s must have at least @a __n characters, &apos;\\\\0&apos;"},
{"lineNum":" 3526","line":"       *  has no special meaning."},
{"lineNum":" 3527","line":"       */"},
{"lineNum":" 3528","line":"      basic_string(const _CharT* __s, size_type __n,"},
{"lineNum":" 3529","line":"\t\t   const _Alloc& __a = _Alloc());"},
{"lineNum":" 3530","line":"      /**"},
{"lineNum":" 3531","line":"       *  @brief  Construct string as copy of a C string."},
{"lineNum":" 3532","line":"       *  @param  __s  Source C string."},
{"lineNum":" 3533","line":"       *  @param  __a  Allocator to use (default is default allocator)."},
{"lineNum":" 3534","line":"       */"},
{"lineNum":" 3535","line":"      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());"},
{"lineNum":" 3536","line":"      /**"},
{"lineNum":" 3537","line":"       *  @brief  Construct string as multiple characters."},
{"lineNum":" 3538","line":"       *  @param  __n  Number of characters."},
{"lineNum":" 3539","line":"       *  @param  __c  Character to use."},
{"lineNum":" 3540","line":"       *  @param  __a  Allocator to use (default is default allocator)."},
{"lineNum":" 3541","line":"       */"},
{"lineNum":" 3542","line":"      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());"},
{"lineNum":" 3543","line":""},
{"lineNum":" 3544","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 3545","line":"      /**"},
{"lineNum":" 3546","line":"       *  @brief  Move construct string."},
{"lineNum":" 3547","line":"       *  @param  __str  Source string."},
{"lineNum":" 3548","line":"       *"},
{"lineNum":" 3549","line":"       *  The newly-created string contains the exact contents of @a __str."},
{"lineNum":" 3550","line":"       *  @a __str is a valid, but unspecified string."},
{"lineNum":" 3551","line":"       **/"},
{"lineNum":" 3552","line":"      basic_string(basic_string&& __str)"},
{"lineNum":" 3553","line":"#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0"},
{"lineNum":" 3554","line":"      noexcept // FIXME C++11: should always be noexcept."},
{"lineNum":" 3555","line":"#endif"},
{"lineNum":" 3556","line":"      : _M_dataplus(__str._M_dataplus)"},
{"lineNum":" 3557","line":"      {"},
{"lineNum":" 3558","line":"#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0"},
{"lineNum":" 3559","line":"\t__str._M_data(_S_empty_rep()._M_refdata());"},
{"lineNum":" 3560","line":"#else"},
{"lineNum":" 3561","line":"\t__str._M_data(_S_construct(size_type(), _CharT(), get_allocator()));"},
{"lineNum":" 3562","line":"#endif"},
{"lineNum":" 3563","line":"      }"},
{"lineNum":" 3564","line":""},
{"lineNum":" 3565","line":"      /**"},
{"lineNum":" 3566","line":"       *  @brief  Construct string from an initializer %list."},
{"lineNum":" 3567","line":"       *  @param  __l  std::initializer_list of characters."},
{"lineNum":" 3568","line":"       *  @param  __a  Allocator to use (default is default allocator)."},
{"lineNum":" 3569","line":"       */"},
{"lineNum":" 3570","line":"      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());"},
{"lineNum":" 3571","line":"#endif // C++11"},
{"lineNum":" 3572","line":""},
{"lineNum":" 3573","line":"      /**"},
{"lineNum":" 3574","line":"       *  @brief  Construct string as copy of a range."},
{"lineNum":" 3575","line":"       *  @param  __beg  Start of range."},
{"lineNum":" 3576","line":"       *  @param  __end  End of range."},
{"lineNum":" 3577","line":"       *  @param  __a  Allocator to use (default is default allocator)."},
{"lineNum":" 3578","line":"       */"},
{"lineNum":" 3579","line":"      template<class _InputIterator>"},
{"lineNum":" 3580","line":"        basic_string(_InputIterator __beg, _InputIterator __end,"},
{"lineNum":" 3581","line":"\t\t     const _Alloc& __a = _Alloc());"},
{"lineNum":" 3582","line":""},
{"lineNum":" 3583","line":"#if __cplusplus > 201402L"},
{"lineNum":" 3584","line":"      /**"},
{"lineNum":" 3585","line":"       *  @brief  Construct string from a substring of a string_view."},
{"lineNum":" 3586","line":"       *  @param  __t   Source object convertible to string view."},
{"lineNum":" 3587","line":"       *  @param  __pos The index of the first character to copy from __t."},
{"lineNum":" 3588","line":"       *  @param  __n   The number of characters to copy from __t."},
{"lineNum":" 3589","line":"       *  @param  __a   Allocator to use."},
{"lineNum":" 3590","line":"       */"},
{"lineNum":" 3591","line":"      template<typename _Tp, typename = _If_sv<_Tp, void>>"},
{"lineNum":" 3592","line":"\tbasic_string(const _Tp& __t, size_type __pos, size_type __n,"},
{"lineNum":" 3593","line":"\t\t     const _Alloc& __a = _Alloc())"},
{"lineNum":" 3594","line":"\t: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }"},
{"lineNum":" 3595","line":""},
{"lineNum":" 3596","line":"      /**"},
{"lineNum":" 3597","line":"       *  @brief  Construct string from a string_view."},
{"lineNum":" 3598","line":"       *  @param  __t  Source object convertible to string view."},
{"lineNum":" 3599","line":"       *  @param  __a  Allocator to use (default is default allocator)."},
{"lineNum":" 3600","line":"       */"},
{"lineNum":" 3601","line":"      template<typename _Tp, typename = _If_sv<_Tp, void>>"},
{"lineNum":" 3602","line":"\texplicit"},
{"lineNum":" 3603","line":"\tbasic_string(const _Tp& __t, const _Alloc& __a = _Alloc())"},
{"lineNum":" 3604","line":"\t: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }"},
{"lineNum":" 3605","line":""},
{"lineNum":" 3606","line":"      /**"},
{"lineNum":" 3607","line":"       *  @brief  Only internally used: Construct string from a string view"},
{"lineNum":" 3608","line":"       *          wrapper."},
{"lineNum":" 3609","line":"       *  @param  __svw  string view wrapper."},
{"lineNum":" 3610","line":"       *  @param  __a  Allocator to use."},
{"lineNum":" 3611","line":"       */"},
{"lineNum":" 3612","line":"      explicit"},
{"lineNum":" 3613","line":"      basic_string(__sv_wrapper __svw, const _Alloc& __a)"},
{"lineNum":" 3614","line":"      : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }"},
{"lineNum":" 3615","line":"#endif // C++17"},
{"lineNum":" 3616","line":""},
{"lineNum":" 3617","line":"      /**"},
{"lineNum":" 3618","line":"       *  @brief  Destroy the string instance."},
{"lineNum":" 3619","line":"       */"},
{"lineNum":" 3620","line":"      ~basic_string() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3621","line":"      { _M_rep()->_M_dispose(this->get_allocator()); }"},
{"lineNum":" 3622","line":""},
{"lineNum":" 3623","line":"      /**"},
{"lineNum":" 3624","line":"       *  @brief  Assign the value of @a str to this string."},
{"lineNum":" 3625","line":"       *  @param  __str  Source string."},
{"lineNum":" 3626","line":"       */"},
{"lineNum":" 3627","line":"      basic_string&"},
{"lineNum":" 3628","line":"      operator=(const basic_string& __str)"},
{"lineNum":" 3629","line":"      { return this->assign(__str); }"},
{"lineNum":" 3630","line":""},
{"lineNum":" 3631","line":"      /**"},
{"lineNum":" 3632","line":"       *  @brief  Copy contents of @a s into this string."},
{"lineNum":" 3633","line":"       *  @param  __s  Source null-terminated string."},
{"lineNum":" 3634","line":"       */"},
{"lineNum":" 3635","line":"      basic_string&"},
{"lineNum":" 3636","line":"      operator=(const _CharT* __s)"},
{"lineNum":" 3637","line":"      { return this->assign(__s); }"},
{"lineNum":" 3638","line":""},
{"lineNum":" 3639","line":"      /**"},
{"lineNum":" 3640","line":"       *  @brief  Set value to string of length 1."},
{"lineNum":" 3641","line":"       *  @param  __c  Source character."},
{"lineNum":" 3642","line":"       *"},
{"lineNum":" 3643","line":"       *  Assigning to a character makes this string length 1 and"},
{"lineNum":" 3644","line":"       *  (*this)[0] == @a c."},
{"lineNum":" 3645","line":"       */"},
{"lineNum":" 3646","line":"      basic_string&"},
{"lineNum":" 3647","line":"      operator=(_CharT __c)"},
{"lineNum":" 3648","line":"      {"},
{"lineNum":" 3649","line":"\tthis->assign(1, __c);"},
{"lineNum":" 3650","line":"\treturn *this;"},
{"lineNum":" 3651","line":"      }"},
{"lineNum":" 3652","line":""},
{"lineNum":" 3653","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 3654","line":"      /**"},
{"lineNum":" 3655","line":"       *  @brief  Move assign the value of @a str to this string."},
{"lineNum":" 3656","line":"       *  @param  __str  Source string."},
{"lineNum":" 3657","line":"       *"},
{"lineNum":" 3658","line":"       *  The contents of @a str are moved into this string (without copying)."},
{"lineNum":" 3659","line":"       *  @a str is a valid, but unspecified string."},
{"lineNum":" 3660","line":"       **/"},
{"lineNum":" 3661","line":"      // PR 58265, this should be noexcept."},
{"lineNum":" 3662","line":"      basic_string&"},
{"lineNum":" 3663","line":"      operator=(basic_string&& __str)"},
{"lineNum":" 3664","line":"      {"},
{"lineNum":" 3665","line":"\t// NB: DR 1204."},
{"lineNum":" 3666","line":"\tthis->swap(__str);"},
{"lineNum":" 3667","line":"\treturn *this;"},
{"lineNum":" 3668","line":"      }"},
{"lineNum":" 3669","line":""},
{"lineNum":" 3670","line":"      /**"},
{"lineNum":" 3671","line":"       *  @brief  Set value to string constructed from initializer %list."},
{"lineNum":" 3672","line":"       *  @param  __l  std::initializer_list."},
{"lineNum":" 3673","line":"       */"},
{"lineNum":" 3674","line":"      basic_string&"},
{"lineNum":" 3675","line":"      operator=(initializer_list<_CharT> __l)"},
{"lineNum":" 3676","line":"      {"},
{"lineNum":" 3677","line":"\tthis->assign(__l.begin(), __l.size());"},
{"lineNum":" 3678","line":"\treturn *this;"},
{"lineNum":" 3679","line":"      }"},
{"lineNum":" 3680","line":"#endif // C++11"},
{"lineNum":" 3681","line":""},
{"lineNum":" 3682","line":"#if __cplusplus > 201402L"},
{"lineNum":" 3683","line":"      /**"},
{"lineNum":" 3684","line":"       *  @brief  Set value to string constructed from a string_view."},
{"lineNum":" 3685","line":"       *  @param  __svt An object convertible to  string_view."},
{"lineNum":" 3686","line":"       */"},
{"lineNum":" 3687","line":"      template<typename _Tp>"},
{"lineNum":" 3688","line":"\t_If_sv<_Tp, basic_string&>"},
{"lineNum":" 3689","line":"\toperator=(const _Tp& __svt)"},
{"lineNum":" 3690","line":"\t{ return this->assign(__svt); }"},
{"lineNum":" 3691","line":""},
{"lineNum":" 3692","line":"      /**"},
{"lineNum":" 3693","line":"       *  @brief  Convert to a string_view."},
{"lineNum":" 3694","line":"       *  @return A string_view."},
{"lineNum":" 3695","line":"       */"},
{"lineNum":" 3696","line":"      operator __sv_type() const noexcept"},
{"lineNum":" 3697","line":"      { return __sv_type(data(), size()); }"},
{"lineNum":" 3698","line":"#endif // C++17"},
{"lineNum":" 3699","line":""},
{"lineNum":" 3700","line":"      // Iterators:"},
{"lineNum":" 3701","line":"      /**"},
{"lineNum":" 3702","line":"       *  Returns a read/write iterator that points to the first character in"},
{"lineNum":" 3703","line":"       *  the %string.  Unshares the string."},
{"lineNum":" 3704","line":"       */"},
{"lineNum":" 3705","line":"      iterator"},
{"lineNum":" 3706","line":"      begin() // FIXME C++11: should be noexcept."},
{"lineNum":" 3707","line":"      {"},
{"lineNum":" 3708","line":"\t_M_leak();"},
{"lineNum":" 3709","line":"\treturn iterator(_M_data());"},
{"lineNum":" 3710","line":"      }"},
{"lineNum":" 3711","line":""},
{"lineNum":" 3712","line":"      /**"},
{"lineNum":" 3713","line":"       *  Returns a read-only (constant) iterator that points to the first"},
{"lineNum":" 3714","line":"       *  character in the %string."},
{"lineNum":" 3715","line":"       */"},
{"lineNum":" 3716","line":"      const_iterator"},
{"lineNum":" 3717","line":"      begin() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3718","line":"      { return const_iterator(_M_data()); }"},
{"lineNum":" 3719","line":""},
{"lineNum":" 3720","line":"      /**"},
{"lineNum":" 3721","line":"       *  Returns a read/write iterator that points one past the last"},
{"lineNum":" 3722","line":"       *  character in the %string.  Unshares the string."},
{"lineNum":" 3723","line":"       */"},
{"lineNum":" 3724","line":"      iterator"},
{"lineNum":" 3725","line":"      end() // FIXME C++11: should be noexcept."},
{"lineNum":" 3726","line":"      {"},
{"lineNum":" 3727","line":"\t_M_leak();"},
{"lineNum":" 3728","line":"\treturn iterator(_M_data() + this->size());"},
{"lineNum":" 3729","line":"      }"},
{"lineNum":" 3730","line":""},
{"lineNum":" 3731","line":"      /**"},
{"lineNum":" 3732","line":"       *  Returns a read-only (constant) iterator that points one past the"},
{"lineNum":" 3733","line":"       *  last character in the %string."},
{"lineNum":" 3734","line":"       */"},
{"lineNum":" 3735","line":"      const_iterator"},
{"lineNum":" 3736","line":"      end() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3737","line":"      { return const_iterator(_M_data() + this->size()); }"},
{"lineNum":" 3738","line":""},
{"lineNum":" 3739","line":"      /**"},
{"lineNum":" 3740","line":"       *  Returns a read/write reverse iterator that points to the last"},
{"lineNum":" 3741","line":"       *  character in the %string.  Iteration is done in reverse element"},
{"lineNum":" 3742","line":"       *  order.  Unshares the string."},
{"lineNum":" 3743","line":"       */"},
{"lineNum":" 3744","line":"      reverse_iterator"},
{"lineNum":" 3745","line":"      rbegin() // FIXME C++11: should be noexcept."},
{"lineNum":" 3746","line":"      { return reverse_iterator(this->end()); }"},
{"lineNum":" 3747","line":""},
{"lineNum":" 3748","line":"      /**"},
{"lineNum":" 3749","line":"       *  Returns a read-only (constant) reverse iterator that points"},
{"lineNum":" 3750","line":"       *  to the last character in the %string.  Iteration is done in"},
{"lineNum":" 3751","line":"       *  reverse element order."},
{"lineNum":" 3752","line":"       */"},
{"lineNum":" 3753","line":"      const_reverse_iterator"},
{"lineNum":" 3754","line":"      rbegin() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3755","line":"      { return const_reverse_iterator(this->end()); }"},
{"lineNum":" 3756","line":""},
{"lineNum":" 3757","line":"      /**"},
{"lineNum":" 3758","line":"       *  Returns a read/write reverse iterator that points to one before the"},
{"lineNum":" 3759","line":"       *  first character in the %string.  Iteration is done in reverse"},
{"lineNum":" 3760","line":"       *  element order.  Unshares the string."},
{"lineNum":" 3761","line":"       */"},
{"lineNum":" 3762","line":"      reverse_iterator"},
{"lineNum":" 3763","line":"      rend() // FIXME C++11: should be noexcept."},
{"lineNum":" 3764","line":"      { return reverse_iterator(this->begin()); }"},
{"lineNum":" 3765","line":""},
{"lineNum":" 3766","line":"      /**"},
{"lineNum":" 3767","line":"       *  Returns a read-only (constant) reverse iterator that points"},
{"lineNum":" 3768","line":"       *  to one before the first character in the %string.  Iteration"},
{"lineNum":" 3769","line":"       *  is done in reverse element order."},
{"lineNum":" 3770","line":"       */"},
{"lineNum":" 3771","line":"      const_reverse_iterator"},
{"lineNum":" 3772","line":"      rend() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3773","line":"      { return const_reverse_iterator(this->begin()); }"},
{"lineNum":" 3774","line":""},
{"lineNum":" 3775","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 3776","line":"      /**"},
{"lineNum":" 3777","line":"       *  Returns a read-only (constant) iterator that points to the first"},
{"lineNum":" 3778","line":"       *  character in the %string."},
{"lineNum":" 3779","line":"       */"},
{"lineNum":" 3780","line":"      const_iterator"},
{"lineNum":" 3781","line":"      cbegin() const noexcept"},
{"lineNum":" 3782","line":"      { return const_iterator(this->_M_data()); }"},
{"lineNum":" 3783","line":""},
{"lineNum":" 3784","line":"      /**"},
{"lineNum":" 3785","line":"       *  Returns a read-only (constant) iterator that points one past the"},
{"lineNum":" 3786","line":"       *  last character in the %string."},
{"lineNum":" 3787","line":"       */"},
{"lineNum":" 3788","line":"      const_iterator"},
{"lineNum":" 3789","line":"      cend() const noexcept"},
{"lineNum":" 3790","line":"      { return const_iterator(this->_M_data() + this->size()); }"},
{"lineNum":" 3791","line":""},
{"lineNum":" 3792","line":"      /**"},
{"lineNum":" 3793","line":"       *  Returns a read-only (constant) reverse iterator that points"},
{"lineNum":" 3794","line":"       *  to the last character in the %string.  Iteration is done in"},
{"lineNum":" 3795","line":"       *  reverse element order."},
{"lineNum":" 3796","line":"       */"},
{"lineNum":" 3797","line":"      const_reverse_iterator"},
{"lineNum":" 3798","line":"      crbegin() const noexcept"},
{"lineNum":" 3799","line":"      { return const_reverse_iterator(this->end()); }"},
{"lineNum":" 3800","line":""},
{"lineNum":" 3801","line":"      /**"},
{"lineNum":" 3802","line":"       *  Returns a read-only (constant) reverse iterator that points"},
{"lineNum":" 3803","line":"       *  to one before the first character in the %string.  Iteration"},
{"lineNum":" 3804","line":"       *  is done in reverse element order."},
{"lineNum":" 3805","line":"       */"},
{"lineNum":" 3806","line":"      const_reverse_iterator"},
{"lineNum":" 3807","line":"      crend() const noexcept"},
{"lineNum":" 3808","line":"      { return const_reverse_iterator(this->begin()); }"},
{"lineNum":" 3809","line":"#endif"},
{"lineNum":" 3810","line":""},
{"lineNum":" 3811","line":"    public:"},
{"lineNum":" 3812","line":"      // Capacity:"},
{"lineNum":" 3813","line":"      ///  Returns the number of characters in the string, not including any"},
{"lineNum":" 3814","line":"      ///  null-termination."},
{"lineNum":" 3815","line":"      size_type"},
{"lineNum":" 3816","line":"      size() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3817","line":"      { return _M_rep()->_M_length; }"},
{"lineNum":" 3818","line":""},
{"lineNum":" 3819","line":"      ///  Returns the number of characters in the string, not including any"},
{"lineNum":" 3820","line":"      ///  null-termination."},
{"lineNum":" 3821","line":"      size_type"},
{"lineNum":" 3822","line":"      length() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3823","line":"      { return _M_rep()->_M_length; }"},
{"lineNum":" 3824","line":""},
{"lineNum":" 3825","line":"      ///  Returns the size() of the largest possible %string."},
{"lineNum":" 3826","line":"      size_type"},
{"lineNum":" 3827","line":"      max_size() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3828","line":"      { return _Rep::_S_max_size; }"},
{"lineNum":" 3829","line":""},
{"lineNum":" 3830","line":"      /**"},
{"lineNum":" 3831","line":"       *  @brief  Resizes the %string to the specified number of characters."},
{"lineNum":" 3832","line":"       *  @param  __n  Number of characters the %string should contain."},
{"lineNum":" 3833","line":"       *  @param  __c  Character to fill any new elements."},
{"lineNum":" 3834","line":"       *"},
{"lineNum":" 3835","line":"       *  This function will %resize the %string to the specified"},
{"lineNum":" 3836","line":"       *  number of characters.  If the number is smaller than the"},
{"lineNum":" 3837","line":"       *  %string\'s current size the %string is truncated, otherwise"},
{"lineNum":" 3838","line":"       *  the %string is extended and new elements are %set to @a __c."},
{"lineNum":" 3839","line":"       */"},
{"lineNum":" 3840","line":"      void"},
{"lineNum":" 3841","line":"      resize(size_type __n, _CharT __c);"},
{"lineNum":" 3842","line":""},
{"lineNum":" 3843","line":"      /**"},
{"lineNum":" 3844","line":"       *  @brief  Resizes the %string to the specified number of characters."},
{"lineNum":" 3845","line":"       *  @param  __n  Number of characters the %string should contain."},
{"lineNum":" 3846","line":"       *"},
{"lineNum":" 3847","line":"       *  This function will resize the %string to the specified length.  If"},
{"lineNum":" 3848","line":"       *  the new size is smaller than the %string\'s current size the %string"},
{"lineNum":" 3849","line":"       *  is truncated, otherwise the %string is extended and new characters"},
{"lineNum":" 3850","line":"       *  are default-constructed.  For basic types such as char, this means"},
{"lineNum":" 3851","line":"       *  setting them to 0."},
{"lineNum":" 3852","line":"       */"},
{"lineNum":" 3853","line":"      void"},
{"lineNum":" 3854","line":"      resize(size_type __n)"},
{"lineNum":" 3855","line":"      { this->resize(__n, _CharT()); }"},
{"lineNum":" 3856","line":""},
{"lineNum":" 3857","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 3858","line":"      ///  A non-binding request to reduce capacity() to size()."},
{"lineNum":" 3859","line":"      void"},
{"lineNum":" 3860","line":"      shrink_to_fit() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3861","line":"      {"},
{"lineNum":" 3862","line":"#if __cpp_exceptions"},
{"lineNum":" 3863","line":"\tif (capacity() > size())"},
{"lineNum":" 3864","line":"\t  {"},
{"lineNum":" 3865","line":"\t    try"},
{"lineNum":" 3866","line":"\t      { reserve(0); }"},
{"lineNum":" 3867","line":"\t    catch(...)"},
{"lineNum":" 3868","line":"\t      { }"},
{"lineNum":" 3869","line":"\t  }"},
{"lineNum":" 3870","line":"#endif"},
{"lineNum":" 3871","line":"      }"},
{"lineNum":" 3872","line":"#endif"},
{"lineNum":" 3873","line":""},
{"lineNum":" 3874","line":"      /**"},
{"lineNum":" 3875","line":"       *  Returns the total number of characters that the %string can hold"},
{"lineNum":" 3876","line":"       *  before needing to allocate more memory."},
{"lineNum":" 3877","line":"       */"},
{"lineNum":" 3878","line":"      size_type"},
{"lineNum":" 3879","line":"      capacity() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3880","line":"      { return _M_rep()->_M_capacity; }"},
{"lineNum":" 3881","line":""},
{"lineNum":" 3882","line":"      /**"},
{"lineNum":" 3883","line":"       *  @brief  Attempt to preallocate enough memory for specified number of"},
{"lineNum":" 3884","line":"       *          characters."},
{"lineNum":" 3885","line":"       *  @param  __res_arg  Number of characters required."},
{"lineNum":" 3886","line":"       *  @throw  std::length_error  If @a __res_arg exceeds @c max_size()."},
{"lineNum":" 3887","line":"       *"},
{"lineNum":" 3888","line":"       *  This function attempts to reserve enough memory for the"},
{"lineNum":" 3889","line":"       *  %string to hold the specified number of characters.  If the"},
{"lineNum":" 3890","line":"       *  number requested is more than max_size(), length_error is"},
{"lineNum":" 3891","line":"       *  thrown."},
{"lineNum":" 3892","line":"       *"},
{"lineNum":" 3893","line":"       *  The advantage of this function is that if optimal code is a"},
{"lineNum":" 3894","line":"       *  necessity and the user can determine the string length that will be"},
{"lineNum":" 3895","line":"       *  required, the user can reserve the memory in %advance, and thus"},
{"lineNum":" 3896","line":"       *  prevent a possible reallocation of memory and copying of %string"},
{"lineNum":" 3897","line":"       *  data."},
{"lineNum":" 3898","line":"       */"},
{"lineNum":" 3899","line":"      void"},
{"lineNum":" 3900","line":"      reserve(size_type __res_arg = 0);"},
{"lineNum":" 3901","line":""},
{"lineNum":" 3902","line":"      /**"},
{"lineNum":" 3903","line":"       *  Erases the string, making it empty."},
{"lineNum":" 3904","line":"       */"},
{"lineNum":" 3905","line":"#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0"},
{"lineNum":" 3906","line":"      void"},
{"lineNum":" 3907","line":"      clear() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3908","line":"      {"},
{"lineNum":" 3909","line":"\tif (_M_rep()->_M_is_shared())"},
{"lineNum":" 3910","line":"\t  {"},
{"lineNum":" 3911","line":"\t    _M_rep()->_M_dispose(this->get_allocator());"},
{"lineNum":" 3912","line":"\t    _M_data(_S_empty_rep()._M_refdata());"},
{"lineNum":" 3913","line":"\t  }"},
{"lineNum":" 3914","line":"\telse"},
{"lineNum":" 3915","line":"\t  _M_rep()->_M_set_length_and_sharable(0);"},
{"lineNum":" 3916","line":"      }"},
{"lineNum":" 3917","line":"#else"},
{"lineNum":" 3918","line":"      // PR 56166: this should not throw."},
{"lineNum":" 3919","line":"      void"},
{"lineNum":" 3920","line":"      clear()"},
{"lineNum":" 3921","line":"      { _M_mutate(0, this->size(), 0); }"},
{"lineNum":" 3922","line":"#endif"},
{"lineNum":" 3923","line":""},
{"lineNum":" 3924","line":"      /**"},
{"lineNum":" 3925","line":"       *  Returns true if the %string is empty.  Equivalent to"},
{"lineNum":" 3926","line":"       *  <code>*this == \"\"</code>."},
{"lineNum":" 3927","line":"       */"},
{"lineNum":" 3928","line":"      bool"},
{"lineNum":" 3929","line":"      empty() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3930","line":"      { return this->size() == 0; }"},
{"lineNum":" 3931","line":""},
{"lineNum":" 3932","line":"      // Element access:"},
{"lineNum":" 3933","line":"      /**"},
{"lineNum":" 3934","line":"       *  @brief  Subscript access to the data contained in the %string."},
{"lineNum":" 3935","line":"       *  @param  __pos  The index of the character to access."},
{"lineNum":" 3936","line":"       *  @return  Read-only (constant) reference to the character."},
{"lineNum":" 3937","line":"       *"},
{"lineNum":" 3938","line":"       *  This operator allows for easy, array-style, data access."},
{"lineNum":" 3939","line":"       *  Note that data access with this operator is unchecked and"},
{"lineNum":" 3940","line":"       *  out_of_range lookups are not defined. (For checked lookups"},
{"lineNum":" 3941","line":"       *  see at().)"},
{"lineNum":" 3942","line":"       */"},
{"lineNum":" 3943","line":"      const_reference"},
{"lineNum":" 3944","line":"      operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 3945","line":"      {"},
{"lineNum":" 3946","line":"\t__glibcxx_assert(__pos <= size());"},
{"lineNum":" 3947","line":"\treturn _M_data()[__pos];"},
{"lineNum":" 3948","line":"      }"},
{"lineNum":" 3949","line":""},
{"lineNum":" 3950","line":"      /**"},
{"lineNum":" 3951","line":"       *  @brief  Subscript access to the data contained in the %string."},
{"lineNum":" 3952","line":"       *  @param  __pos  The index of the character to access."},
{"lineNum":" 3953","line":"       *  @return  Read/write reference to the character."},
{"lineNum":" 3954","line":"       *"},
{"lineNum":" 3955","line":"       *  This operator allows for easy, array-style, data access."},
{"lineNum":" 3956","line":"       *  Note that data access with this operator is unchecked and"},
{"lineNum":" 3957","line":"       *  out_of_range lookups are not defined. (For checked lookups"},
{"lineNum":" 3958","line":"       *  see at().)  Unshares the string."},
{"lineNum":" 3959","line":"       */"},
{"lineNum":" 3960","line":"      reference"},
{"lineNum":" 3961","line":"      operator[](size_type __pos)"},
{"lineNum":" 3962","line":"      {"},
{"lineNum":" 3963","line":"        // Allow pos == size() both in C++98 mode, as v3 extension,"},
{"lineNum":" 3964","line":"\t// and in C++11 mode."},
{"lineNum":" 3965","line":"\t__glibcxx_assert(__pos <= size());"},
{"lineNum":" 3966","line":"        // In pedantic mode be strict in C++98 mode."},
{"lineNum":" 3967","line":"\t_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());"},
{"lineNum":" 3968","line":"\t_M_leak();"},
{"lineNum":" 3969","line":"\treturn _M_data()[__pos];"},
{"lineNum":" 3970","line":"      }"},
{"lineNum":" 3971","line":""},
{"lineNum":" 3972","line":"      /**"},
{"lineNum":" 3973","line":"       *  @brief  Provides access to the data contained in the %string."},
{"lineNum":" 3974","line":"       *  @param __n The index of the character to access."},
{"lineNum":" 3975","line":"       *  @return  Read-only (const) reference to the character."},
{"lineNum":" 3976","line":"       *  @throw  std::out_of_range  If @a n is an invalid index."},
{"lineNum":" 3977","line":"       *"},
{"lineNum":" 3978","line":"       *  This function provides for safer data access.  The parameter is"},
{"lineNum":" 3979","line":"       *  first checked that it is in the range of the string.  The function"},
{"lineNum":" 3980","line":"       *  throws out_of_range if the check fails."},
{"lineNum":" 3981","line":"       */"},
{"lineNum":" 3982","line":"      const_reference"},
{"lineNum":" 3983","line":"      at(size_type __n) const"},
{"lineNum":" 3984","line":"      {"},
{"lineNum":" 3985","line":"\tif (__n >= this->size())"},
{"lineNum":" 3986","line":"\t  __throw_out_of_range_fmt(__N(\"basic_string::at: __n \""},
{"lineNum":" 3987","line":"\t\t\t\t       \"(which is %zu) >= this->size() \""},
{"lineNum":" 3988","line":"\t\t\t\t       \"(which is %zu)\"),"},
{"lineNum":" 3989","line":"\t\t\t\t   __n, this->size());"},
{"lineNum":" 3990","line":"\treturn _M_data()[__n];"},
{"lineNum":" 3991","line":"      }"},
{"lineNum":" 3992","line":""},
{"lineNum":" 3993","line":"      /**"},
{"lineNum":" 3994","line":"       *  @brief  Provides access to the data contained in the %string."},
{"lineNum":" 3995","line":"       *  @param __n The index of the character to access."},
{"lineNum":" 3996","line":"       *  @return  Read/write reference to the character."},
{"lineNum":" 3997","line":"       *  @throw  std::out_of_range  If @a n is an invalid index."},
{"lineNum":" 3998","line":"       *"},
{"lineNum":" 3999","line":"       *  This function provides for safer data access.  The parameter is"},
{"lineNum":" 4000","line":"       *  first checked that it is in the range of the string.  The function"},
{"lineNum":" 4001","line":"       *  throws out_of_range if the check fails.  Success results in"},
{"lineNum":" 4002","line":"       *  unsharing the string."},
{"lineNum":" 4003","line":"       */"},
{"lineNum":" 4004","line":"      reference"},
{"lineNum":" 4005","line":"      at(size_type __n)"},
{"lineNum":" 4006","line":"      {"},
{"lineNum":" 4007","line":"\tif (__n >= size())"},
{"lineNum":" 4008","line":"\t  __throw_out_of_range_fmt(__N(\"basic_string::at: __n \""},
{"lineNum":" 4009","line":"\t\t\t\t       \"(which is %zu) >= this->size() \""},
{"lineNum":" 4010","line":"\t\t\t\t       \"(which is %zu)\"),"},
{"lineNum":" 4011","line":"\t\t\t\t   __n, this->size());"},
{"lineNum":" 4012","line":"\t_M_leak();"},
{"lineNum":" 4013","line":"\treturn _M_data()[__n];"},
{"lineNum":" 4014","line":"      }"},
{"lineNum":" 4015","line":""},
{"lineNum":" 4016","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 4017","line":"      /**"},
{"lineNum":" 4018","line":"       *  Returns a read/write reference to the data at the first"},
{"lineNum":" 4019","line":"       *  element of the %string."},
{"lineNum":" 4020","line":"       */"},
{"lineNum":" 4021","line":"      reference"},
{"lineNum":" 4022","line":"      front()"},
{"lineNum":" 4023","line":"      {"},
{"lineNum":" 4024","line":"\t__glibcxx_assert(!empty());"},
{"lineNum":" 4025","line":"\treturn operator[](0);"},
{"lineNum":" 4026","line":"      }"},
{"lineNum":" 4027","line":""},
{"lineNum":" 4028","line":"      /**"},
{"lineNum":" 4029","line":"       *  Returns a read-only (constant) reference to the data at the first"},
{"lineNum":" 4030","line":"       *  element of the %string."},
{"lineNum":" 4031","line":"       */"},
{"lineNum":" 4032","line":"      const_reference"},
{"lineNum":" 4033","line":"      front() const noexcept"},
{"lineNum":" 4034","line":"      {"},
{"lineNum":" 4035","line":"\t__glibcxx_assert(!empty());"},
{"lineNum":" 4036","line":"\treturn operator[](0);"},
{"lineNum":" 4037","line":"      }"},
{"lineNum":" 4038","line":""},
{"lineNum":" 4039","line":"      /**"},
{"lineNum":" 4040","line":"       *  Returns a read/write reference to the data at the last"},
{"lineNum":" 4041","line":"       *  element of the %string."},
{"lineNum":" 4042","line":"       */"},
{"lineNum":" 4043","line":"      reference"},
{"lineNum":" 4044","line":"      back()"},
{"lineNum":" 4045","line":"      {"},
{"lineNum":" 4046","line":"\t__glibcxx_assert(!empty());"},
{"lineNum":" 4047","line":"\treturn operator[](this->size() - 1);"},
{"lineNum":" 4048","line":"      }"},
{"lineNum":" 4049","line":""},
{"lineNum":" 4050","line":"      /**"},
{"lineNum":" 4051","line":"       *  Returns a read-only (constant) reference to the data at the"},
{"lineNum":" 4052","line":"       *  last element of the %string."},
{"lineNum":" 4053","line":"       */"},
{"lineNum":" 4054","line":"      const_reference"},
{"lineNum":" 4055","line":"      back() const noexcept"},
{"lineNum":" 4056","line":"      {"},
{"lineNum":" 4057","line":"\t__glibcxx_assert(!empty());"},
{"lineNum":" 4058","line":"\treturn operator[](this->size() - 1);"},
{"lineNum":" 4059","line":"      }"},
{"lineNum":" 4060","line":"#endif"},
{"lineNum":" 4061","line":""},
{"lineNum":" 4062","line":"      // Modifiers:"},
{"lineNum":" 4063","line":"      /**"},
{"lineNum":" 4064","line":"       *  @brief  Append a string to this string."},
{"lineNum":" 4065","line":"       *  @param __str  The string to append."},
{"lineNum":" 4066","line":"       *  @return  Reference to this string."},
{"lineNum":" 4067","line":"       */"},
{"lineNum":" 4068","line":"      basic_string&"},
{"lineNum":" 4069","line":"      operator+=(const basic_string& __str)"},
{"lineNum":" 4070","line":"      { return this->append(__str); }"},
{"lineNum":" 4071","line":""},
{"lineNum":" 4072","line":"      /**"},
{"lineNum":" 4073","line":"       *  @brief  Append a C string."},
{"lineNum":" 4074","line":"       *  @param __s  The C string to append."},
{"lineNum":" 4075","line":"       *  @return  Reference to this string."},
{"lineNum":" 4076","line":"       */"},
{"lineNum":" 4077","line":"      basic_string&"},
{"lineNum":" 4078","line":"      operator+=(const _CharT* __s)"},
{"lineNum":" 4079","line":"      { return this->append(__s); }"},
{"lineNum":" 4080","line":""},
{"lineNum":" 4081","line":"      /**"},
{"lineNum":" 4082","line":"       *  @brief  Append a character."},
{"lineNum":" 4083","line":"       *  @param __c  The character to append."},
{"lineNum":" 4084","line":"       *  @return  Reference to this string."},
{"lineNum":" 4085","line":"       */"},
{"lineNum":" 4086","line":"      basic_string&"},
{"lineNum":" 4087","line":"      operator+=(_CharT __c)"},
{"lineNum":" 4088","line":"      {"},
{"lineNum":" 4089","line":"\tthis->push_back(__c);"},
{"lineNum":" 4090","line":"\treturn *this;"},
{"lineNum":" 4091","line":"      }"},
{"lineNum":" 4092","line":""},
{"lineNum":" 4093","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 4094","line":"      /**"},
{"lineNum":" 4095","line":"       *  @brief  Append an initializer_list of characters."},
{"lineNum":" 4096","line":"       *  @param __l  The initializer_list of characters to be appended."},
{"lineNum":" 4097","line":"       *  @return  Reference to this string."},
{"lineNum":" 4098","line":"       */"},
{"lineNum":" 4099","line":"      basic_string&"},
{"lineNum":" 4100","line":"      operator+=(initializer_list<_CharT> __l)"},
{"lineNum":" 4101","line":"      { return this->append(__l.begin(), __l.size()); }"},
{"lineNum":" 4102","line":"#endif // C++11"},
{"lineNum":" 4103","line":""},
{"lineNum":" 4104","line":"#if __cplusplus > 201402L"},
{"lineNum":" 4105","line":"      /**"},
{"lineNum":" 4106","line":"       *  @brief  Append a string_view."},
{"lineNum":" 4107","line":"       *  @param __svt The object convertible to string_view to be appended."},
{"lineNum":" 4108","line":"       *  @return  Reference to this string."},
{"lineNum":" 4109","line":"       */"},
{"lineNum":" 4110","line":"      template<typename _Tp>"},
{"lineNum":" 4111","line":"\t_If_sv<_Tp, basic_string&>"},
{"lineNum":" 4112","line":"\toperator+=(const _Tp& __svt)"},
{"lineNum":" 4113","line":"\t{ return this->append(__svt); }"},
{"lineNum":" 4114","line":"#endif // C++17"},
{"lineNum":" 4115","line":""},
{"lineNum":" 4116","line":"      /**"},
{"lineNum":" 4117","line":"       *  @brief  Append a string to this string."},
{"lineNum":" 4118","line":"       *  @param __str  The string to append."},
{"lineNum":" 4119","line":"       *  @return  Reference to this string."},
{"lineNum":" 4120","line":"       */"},
{"lineNum":" 4121","line":"      basic_string&"},
{"lineNum":" 4122","line":"      append(const basic_string& __str);"},
{"lineNum":" 4123","line":""},
{"lineNum":" 4124","line":"      /**"},
{"lineNum":" 4125","line":"       *  @brief  Append a substring."},
{"lineNum":" 4126","line":"       *  @param __str  The string to append."},
{"lineNum":" 4127","line":"       *  @param __pos  Index of the first character of str to append."},
{"lineNum":" 4128","line":"       *  @param __n  The number of characters to append."},
{"lineNum":" 4129","line":"       *  @return  Reference to this string."},
{"lineNum":" 4130","line":"       *  @throw  std::out_of_range if @a __pos is not a valid index."},
{"lineNum":" 4131","line":"       *"},
{"lineNum":" 4132","line":"       *  This function appends @a __n characters from @a __str"},
{"lineNum":" 4133","line":"       *  starting at @a __pos to this string.  If @a __n is is larger"},
{"lineNum":" 4134","line":"       *  than the number of available characters in @a __str, the"},
{"lineNum":" 4135","line":"       *  remainder of @a __str is appended."},
{"lineNum":" 4136","line":"       */"},
{"lineNum":" 4137","line":"      basic_string&"},
{"lineNum":" 4138","line":"      append(const basic_string& __str, size_type __pos, size_type __n);"},
{"lineNum":" 4139","line":""},
{"lineNum":" 4140","line":"      /**"},
{"lineNum":" 4141","line":"       *  @brief  Append a C substring."},
{"lineNum":" 4142","line":"       *  @param __s  The C string to append."},
{"lineNum":" 4143","line":"       *  @param __n  The number of characters to append."},
{"lineNum":" 4144","line":"       *  @return  Reference to this string."},
{"lineNum":" 4145","line":"       */"},
{"lineNum":" 4146","line":"      basic_string&"},
{"lineNum":" 4147","line":"      append(const _CharT* __s, size_type __n);"},
{"lineNum":" 4148","line":""},
{"lineNum":" 4149","line":"      /**"},
{"lineNum":" 4150","line":"       *  @brief  Append a C string."},
{"lineNum":" 4151","line":"       *  @param __s  The C string to append."},
{"lineNum":" 4152","line":"       *  @return  Reference to this string."},
{"lineNum":" 4153","line":"       */"},
{"lineNum":" 4154","line":"      basic_string&"},
{"lineNum":" 4155","line":"      append(const _CharT* __s)"},
{"lineNum":" 4156","line":"      {"},
{"lineNum":" 4157","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 4158","line":"\treturn this->append(__s, traits_type::length(__s));"},
{"lineNum":" 4159","line":"      }"},
{"lineNum":" 4160","line":""},
{"lineNum":" 4161","line":"      /**"},
{"lineNum":" 4162","line":"       *  @brief  Append multiple characters."},
{"lineNum":" 4163","line":"       *  @param __n  The number of characters to append."},
{"lineNum":" 4164","line":"       *  @param __c  The character to use."},
{"lineNum":" 4165","line":"       *  @return  Reference to this string."},
{"lineNum":" 4166","line":"       *"},
{"lineNum":" 4167","line":"       *  Appends __n copies of __c to this string."},
{"lineNum":" 4168","line":"       */"},
{"lineNum":" 4169","line":"      basic_string&"},
{"lineNum":" 4170","line":"      append(size_type __n, _CharT __c);"},
{"lineNum":" 4171","line":""},
{"lineNum":" 4172","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 4173","line":"      /**"},
{"lineNum":" 4174","line":"       *  @brief  Append an initializer_list of characters."},
{"lineNum":" 4175","line":"       *  @param __l  The initializer_list of characters to append."},
{"lineNum":" 4176","line":"       *  @return  Reference to this string."},
{"lineNum":" 4177","line":"       */"},
{"lineNum":" 4178","line":"      basic_string&"},
{"lineNum":" 4179","line":"      append(initializer_list<_CharT> __l)"},
{"lineNum":" 4180","line":"      { return this->append(__l.begin(), __l.size()); }"},
{"lineNum":" 4181","line":"#endif // C++11"},
{"lineNum":" 4182","line":""},
{"lineNum":" 4183","line":"      /**"},
{"lineNum":" 4184","line":"       *  @brief  Append a range of characters."},
{"lineNum":" 4185","line":"       *  @param __first  Iterator referencing the first character to append."},
{"lineNum":" 4186","line":"       *  @param __last  Iterator marking the end of the range."},
{"lineNum":" 4187","line":"       *  @return  Reference to this string."},
{"lineNum":" 4188","line":"       *"},
{"lineNum":" 4189","line":"       *  Appends characters in the range [__first,__last) to this string."},
{"lineNum":" 4190","line":"       */"},
{"lineNum":" 4191","line":"      template<class _InputIterator>"},
{"lineNum":" 4192","line":"        basic_string&"},
{"lineNum":" 4193","line":"        append(_InputIterator __first, _InputIterator __last)"},
{"lineNum":" 4194","line":"        { return this->replace(_M_iend(), _M_iend(), __first, __last); }"},
{"lineNum":" 4195","line":""},
{"lineNum":" 4196","line":"#if __cplusplus > 201402L"},
{"lineNum":" 4197","line":"      /**"},
{"lineNum":" 4198","line":"       *  @brief  Append a string_view."},
{"lineNum":" 4199","line":"       *  @param __svt The object convertible to string_view to be appended."},
{"lineNum":" 4200","line":"       *  @return  Reference to this string."},
{"lineNum":" 4201","line":"       */"},
{"lineNum":" 4202","line":"      template<typename _Tp>"},
{"lineNum":" 4203","line":"\t_If_sv<_Tp, basic_string&>"},
{"lineNum":" 4204","line":"\tappend(const _Tp& __svt)"},
{"lineNum":" 4205","line":"\t{"},
{"lineNum":" 4206","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 4207","line":"\t  return this->append(__sv.data(), __sv.size());"},
{"lineNum":" 4208","line":"\t}"},
{"lineNum":" 4209","line":""},
{"lineNum":" 4210","line":"      /**"},
{"lineNum":" 4211","line":"       *  @brief  Append a range of characters from a string_view."},
{"lineNum":" 4212","line":"       *  @param __svt The object convertible to string_view to be appended"},
{"lineNum":" 4213","line":"       *               from."},
{"lineNum":" 4214","line":"       *  @param __pos The position in the string_view to append from."},
{"lineNum":" 4215","line":"       *  @param __n   The number of characters to append from the string_view."},
{"lineNum":" 4216","line":"       *  @return  Reference to this string."},
{"lineNum":" 4217","line":"       */"},
{"lineNum":" 4218","line":"      template<typename _Tp>"},
{"lineNum":" 4219","line":"        _If_sv<_Tp, basic_string&>"},
{"lineNum":" 4220","line":"\tappend(const _Tp& __svt, size_type __pos, size_type __n = npos)"},
{"lineNum":" 4221","line":"\t{"},
{"lineNum":" 4222","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 4223","line":"\t  return append(__sv.data()"},
{"lineNum":" 4224","line":"\t\t\t+ __sv._M_check(__pos, \"basic_string::append\"),"},
{"lineNum":" 4225","line":"\t\t\t__sv._M_limit(__pos, __n));"},
{"lineNum":" 4226","line":"\t}"},
{"lineNum":" 4227","line":"#endif // C++17"},
{"lineNum":" 4228","line":""},
{"lineNum":" 4229","line":"      /**"},
{"lineNum":" 4230","line":"       *  @brief  Append a single character."},
{"lineNum":" 4231","line":"       *  @param __c  Character to append."},
{"lineNum":" 4232","line":"       */"},
{"lineNum":" 4233","line":"      void"},
{"lineNum":" 4234","line":"      push_back(_CharT __c)"},
{"lineNum":" 4235","line":"      {"},
{"lineNum":" 4236","line":"\tconst size_type __len = 1 + this->size();"},
{"lineNum":" 4237","line":"\tif (__len > this->capacity() || _M_rep()->_M_is_shared())"},
{"lineNum":" 4238","line":"\t  this->reserve(__len);"},
{"lineNum":" 4239","line":"\ttraits_type::assign(_M_data()[this->size()], __c);"},
{"lineNum":" 4240","line":"\t_M_rep()->_M_set_length_and_sharable(__len);"},
{"lineNum":" 4241","line":"      }"},
{"lineNum":" 4242","line":""},
{"lineNum":" 4243","line":"      /**"},
{"lineNum":" 4244","line":"       *  @brief  Set value to contents of another string."},
{"lineNum":" 4245","line":"       *  @param  __str  Source string to use."},
{"lineNum":" 4246","line":"       *  @return  Reference to this string."},
{"lineNum":" 4247","line":"       */"},
{"lineNum":" 4248","line":"      basic_string&"},
{"lineNum":" 4249","line":"      assign(const basic_string& __str);"},
{"lineNum":" 4250","line":""},
{"lineNum":" 4251","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 4252","line":"      /**"},
{"lineNum":" 4253","line":"       *  @brief  Set value to contents of another string."},
{"lineNum":" 4254","line":"       *  @param  __str  Source string to use."},
{"lineNum":" 4255","line":"       *  @return  Reference to this string."},
{"lineNum":" 4256","line":"       *"},
{"lineNum":" 4257","line":"       *  This function sets this string to the exact contents of @a __str."},
{"lineNum":" 4258","line":"       *  @a __str is a valid, but unspecified string."},
{"lineNum":" 4259","line":"       */"},
{"lineNum":" 4260","line":"      // PR 58265, this should be noexcept."},
{"lineNum":" 4261","line":"      basic_string&"},
{"lineNum":" 4262","line":"      assign(basic_string&& __str)"},
{"lineNum":" 4263","line":"      {"},
{"lineNum":" 4264","line":"\tthis->swap(__str);"},
{"lineNum":" 4265","line":"\treturn *this;"},
{"lineNum":" 4266","line":"      }"},
{"lineNum":" 4267","line":"#endif // C++11"},
{"lineNum":" 4268","line":""},
{"lineNum":" 4269","line":"      /**"},
{"lineNum":" 4270","line":"       *  @brief  Set value to a substring of a string."},
{"lineNum":" 4271","line":"       *  @param __str  The string to use."},
{"lineNum":" 4272","line":"       *  @param __pos  Index of the first character of str."},
{"lineNum":" 4273","line":"       *  @param __n  Number of characters to use."},
{"lineNum":" 4274","line":"       *  @return  Reference to this string."},
{"lineNum":" 4275","line":"       *  @throw  std::out_of_range if @a pos is not a valid index."},
{"lineNum":" 4276","line":"       *"},
{"lineNum":" 4277","line":"       *  This function sets this string to the substring of @a __str"},
{"lineNum":" 4278","line":"       *  consisting of @a __n characters at @a __pos.  If @a __n is"},
{"lineNum":" 4279","line":"       *  is larger than the number of available characters in @a"},
{"lineNum":" 4280","line":"       *  __str, the remainder of @a __str is used."},
{"lineNum":" 4281","line":"       */"},
{"lineNum":" 4282","line":"      basic_string&"},
{"lineNum":" 4283","line":"      assign(const basic_string& __str, size_type __pos, size_type __n)"},
{"lineNum":" 4284","line":"      { return this->assign(__str._M_data()"},
{"lineNum":" 4285","line":"\t\t\t    + __str._M_check(__pos, \"basic_string::assign\"),"},
{"lineNum":" 4286","line":"\t\t\t    __str._M_limit(__pos, __n)); }"},
{"lineNum":" 4287","line":""},
{"lineNum":" 4288","line":"      /**"},
{"lineNum":" 4289","line":"       *  @brief  Set value to a C substring."},
{"lineNum":" 4290","line":"       *  @param __s  The C string to use."},
{"lineNum":" 4291","line":"       *  @param __n  Number of characters to use."},
{"lineNum":" 4292","line":"       *  @return  Reference to this string."},
{"lineNum":" 4293","line":"       *"},
{"lineNum":" 4294","line":"       *  This function sets the value of this string to the first @a __n"},
{"lineNum":" 4295","line":"       *  characters of @a __s.  If @a __n is is larger than the number of"},
{"lineNum":" 4296","line":"       *  available characters in @a __s, the remainder of @a __s is used."},
{"lineNum":" 4297","line":"       */"},
{"lineNum":" 4298","line":"      basic_string&"},
{"lineNum":" 4299","line":"      assign(const _CharT* __s, size_type __n);"},
{"lineNum":" 4300","line":""},
{"lineNum":" 4301","line":"      /**"},
{"lineNum":" 4302","line":"       *  @brief  Set value to contents of a C string."},
{"lineNum":" 4303","line":"       *  @param __s  The C string to use."},
{"lineNum":" 4304","line":"       *  @return  Reference to this string."},
{"lineNum":" 4305","line":"       *"},
{"lineNum":" 4306","line":"       *  This function sets the value of this string to the value of @a __s."},
{"lineNum":" 4307","line":"       *  The data is copied, so there is no dependence on @a __s once the"},
{"lineNum":" 4308","line":"       *  function returns."},
{"lineNum":" 4309","line":"       */"},
{"lineNum":" 4310","line":"      basic_string&"},
{"lineNum":" 4311","line":"      assign(const _CharT* __s)"},
{"lineNum":" 4312","line":"      {"},
{"lineNum":" 4313","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 4314","line":"\treturn this->assign(__s, traits_type::length(__s));"},
{"lineNum":" 4315","line":"      }"},
{"lineNum":" 4316","line":""},
{"lineNum":" 4317","line":"      /**"},
{"lineNum":" 4318","line":"       *  @brief  Set value to multiple characters."},
{"lineNum":" 4319","line":"       *  @param __n  Length of the resulting string."},
{"lineNum":" 4320","line":"       *  @param __c  The character to use."},
{"lineNum":" 4321","line":"       *  @return  Reference to this string."},
{"lineNum":" 4322","line":"       *"},
{"lineNum":" 4323","line":"       *  This function sets the value of this string to @a __n copies of"},
{"lineNum":" 4324","line":"       *  character @a __c."},
{"lineNum":" 4325","line":"       */"},
{"lineNum":" 4326","line":"      basic_string&"},
{"lineNum":" 4327","line":"      assign(size_type __n, _CharT __c)"},
{"lineNum":" 4328","line":"      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }"},
{"lineNum":" 4329","line":""},
{"lineNum":" 4330","line":"      /**"},
{"lineNum":" 4331","line":"       *  @brief  Set value to a range of characters."},
{"lineNum":" 4332","line":"       *  @param __first  Iterator referencing the first character to append."},
{"lineNum":" 4333","line":"       *  @param __last  Iterator marking the end of the range."},
{"lineNum":" 4334","line":"       *  @return  Reference to this string."},
{"lineNum":" 4335","line":"       *"},
{"lineNum":" 4336","line":"       *  Sets value of string to characters in the range [__first,__last)."},
{"lineNum":" 4337","line":"      */"},
{"lineNum":" 4338","line":"      template<class _InputIterator>"},
{"lineNum":" 4339","line":"        basic_string&"},
{"lineNum":" 4340","line":"        assign(_InputIterator __first, _InputIterator __last)"},
{"lineNum":" 4341","line":"        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }"},
{"lineNum":" 4342","line":""},
{"lineNum":" 4343","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 4344","line":"      /**"},
{"lineNum":" 4345","line":"       *  @brief  Set value to an initializer_list of characters."},
{"lineNum":" 4346","line":"       *  @param __l  The initializer_list of characters to assign."},
{"lineNum":" 4347","line":"       *  @return  Reference to this string."},
{"lineNum":" 4348","line":"       */"},
{"lineNum":" 4349","line":"      basic_string&"},
{"lineNum":" 4350","line":"      assign(initializer_list<_CharT> __l)"},
{"lineNum":" 4351","line":"      { return this->assign(__l.begin(), __l.size()); }"},
{"lineNum":" 4352","line":"#endif // C++11"},
{"lineNum":" 4353","line":""},
{"lineNum":" 4354","line":"#if __cplusplus > 201402L"},
{"lineNum":" 4355","line":"      /**"},
{"lineNum":" 4356","line":"       *  @brief  Set value from a string_view."},
{"lineNum":" 4357","line":"       *  @param __svt The source object convertible to string_view."},
{"lineNum":" 4358","line":"       *  @return  Reference to this string."},
{"lineNum":" 4359","line":"       */"},
{"lineNum":" 4360","line":"      template<typename _Tp>"},
{"lineNum":" 4361","line":"\t_If_sv<_Tp, basic_string&>"},
{"lineNum":" 4362","line":"\tassign(const _Tp& __svt)"},
{"lineNum":" 4363","line":"\t{"},
{"lineNum":" 4364","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 4365","line":"\t  return this->assign(__sv.data(), __sv.size());"},
{"lineNum":" 4366","line":"\t}"},
{"lineNum":" 4367","line":""},
{"lineNum":" 4368","line":"      /**"},
{"lineNum":" 4369","line":"       *  @brief  Set value from a range of characters in a string_view."},
{"lineNum":" 4370","line":"       *  @param __svt  The source object convertible to string_view."},
{"lineNum":" 4371","line":"       *  @param __pos  The position in the string_view to assign from."},
{"lineNum":" 4372","line":"       *  @param __n  The number of characters to assign."},
{"lineNum":" 4373","line":"       *  @return  Reference to this string."},
{"lineNum":" 4374","line":"       */"},
{"lineNum":" 4375","line":"      template<typename _Tp>"},
{"lineNum":" 4376","line":"        _If_sv<_Tp, basic_string&>"},
{"lineNum":" 4377","line":"        assign(const _Tp& __svt, size_type __pos, size_type __n = npos)"},
{"lineNum":" 4378","line":"\t{"},
{"lineNum":" 4379","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 4380","line":"\t  return assign(__sv.data()"},
{"lineNum":" 4381","line":"\t\t\t+ __sv._M_check(__pos, \"basic_string::assign\"),"},
{"lineNum":" 4382","line":"\t\t\t__sv._M_limit(__pos, __n));"},
{"lineNum":" 4383","line":"\t}"},
{"lineNum":" 4384","line":"#endif // C++17"},
{"lineNum":" 4385","line":""},
{"lineNum":" 4386","line":"      /**"},
{"lineNum":" 4387","line":"       *  @brief  Insert multiple characters."},
{"lineNum":" 4388","line":"       *  @param __p  Iterator referencing location in string to insert at."},
{"lineNum":" 4389","line":"       *  @param __n  Number of characters to insert"},
{"lineNum":" 4390","line":"       *  @param __c  The character to insert."},
{"lineNum":" 4391","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4392","line":"       *"},
{"lineNum":" 4393","line":"       *  Inserts @a __n copies of character @a __c starting at the"},
{"lineNum":" 4394","line":"       *  position referenced by iterator @a __p.  If adding"},
{"lineNum":" 4395","line":"       *  characters causes the length to exceed max_size(),"},
{"lineNum":" 4396","line":"       *  length_error is thrown.  The value of the string doesn\'t"},
{"lineNum":" 4397","line":"       *  change if an error is thrown."},
{"lineNum":" 4398","line":"      */"},
{"lineNum":" 4399","line":"      void"},
{"lineNum":" 4400","line":"      insert(iterator __p, size_type __n, _CharT __c)"},
{"lineNum":" 4401","line":"      {\tthis->replace(__p, __p, __n, __c);  }"},
{"lineNum":" 4402","line":""},
{"lineNum":" 4403","line":"      /**"},
{"lineNum":" 4404","line":"       *  @brief  Insert a range of characters."},
{"lineNum":" 4405","line":"       *  @param __p  Iterator referencing location in string to insert at."},
{"lineNum":" 4406","line":"       *  @param __beg  Start of range."},
{"lineNum":" 4407","line":"       *  @param __end  End of range."},
{"lineNum":" 4408","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4409","line":"       *"},
{"lineNum":" 4410","line":"       *  Inserts characters in range [__beg,__end).  If adding"},
{"lineNum":" 4411","line":"       *  characters causes the length to exceed max_size(),"},
{"lineNum":" 4412","line":"       *  length_error is thrown.  The value of the string doesn\'t"},
{"lineNum":" 4413","line":"       *  change if an error is thrown."},
{"lineNum":" 4414","line":"      */"},
{"lineNum":" 4415","line":"      template<class _InputIterator>"},
{"lineNum":" 4416","line":"        void"},
{"lineNum":" 4417","line":"        insert(iterator __p, _InputIterator __beg, _InputIterator __end)"},
{"lineNum":" 4418","line":"        { this->replace(__p, __p, __beg, __end); }"},
{"lineNum":" 4419","line":""},
{"lineNum":" 4420","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 4421","line":"      /**"},
{"lineNum":" 4422","line":"       *  @brief  Insert an initializer_list of characters."},
{"lineNum":" 4423","line":"       *  @param __p  Iterator referencing location in string to insert at."},
{"lineNum":" 4424","line":"       *  @param __l  The initializer_list of characters to insert."},
{"lineNum":" 4425","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4426","line":"       */"},
{"lineNum":" 4427","line":"      void"},
{"lineNum":" 4428","line":"      insert(iterator __p, initializer_list<_CharT> __l)"},
{"lineNum":" 4429","line":"      {"},
{"lineNum":" 4430","line":"\t_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());"},
{"lineNum":" 4431","line":"\tthis->insert(__p - _M_ibegin(), __l.begin(), __l.size());"},
{"lineNum":" 4432","line":"      }"},
{"lineNum":" 4433","line":"#endif // C++11"},
{"lineNum":" 4434","line":""},
{"lineNum":" 4435","line":"      /**"},
{"lineNum":" 4436","line":"       *  @brief  Insert value of a string."},
{"lineNum":" 4437","line":"       *  @param __pos1  Iterator referencing location in string to insert at."},
{"lineNum":" 4438","line":"       *  @param __str  The string to insert."},
{"lineNum":" 4439","line":"       *  @return  Reference to this string."},
{"lineNum":" 4440","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4441","line":"       *"},
{"lineNum":" 4442","line":"       *  Inserts value of @a __str starting at @a __pos1.  If adding"},
{"lineNum":" 4443","line":"       *  characters causes the length to exceed max_size(),"},
{"lineNum":" 4444","line":"       *  length_error is thrown.  The value of the string doesn\'t"},
{"lineNum":" 4445","line":"       *  change if an error is thrown."},
{"lineNum":" 4446","line":"      */"},
{"lineNum":" 4447","line":"      basic_string&"},
{"lineNum":" 4448","line":"      insert(size_type __pos1, const basic_string& __str)"},
{"lineNum":" 4449","line":"      { return this->insert(__pos1, __str, size_type(0), __str.size()); }"},
{"lineNum":" 4450","line":""},
{"lineNum":" 4451","line":"      /**"},
{"lineNum":" 4452","line":"       *  @brief  Insert a substring."},
{"lineNum":" 4453","line":"       *  @param __pos1  Iterator referencing location in string to insert at."},
{"lineNum":" 4454","line":"       *  @param __str  The string to insert."},
{"lineNum":" 4455","line":"       *  @param __pos2  Start of characters in str to insert."},
{"lineNum":" 4456","line":"       *  @param __n  Number of characters to insert."},
{"lineNum":" 4457","line":"       *  @return  Reference to this string."},
{"lineNum":" 4458","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4459","line":"       *  @throw  std::out_of_range  If @a pos1 > size() or"},
{"lineNum":" 4460","line":"       *  @a __pos2 > @a str.size()."},
{"lineNum":" 4461","line":"       *"},
{"lineNum":" 4462","line":"       *  Starting at @a pos1, insert @a __n character of @a __str"},
{"lineNum":" 4463","line":"       *  beginning with @a __pos2.  If adding characters causes the"},
{"lineNum":" 4464","line":"       *  length to exceed max_size(), length_error is thrown.  If @a"},
{"lineNum":" 4465","line":"       *  __pos1 is beyond the end of this string or @a __pos2 is"},
{"lineNum":" 4466","line":"       *  beyond the end of @a __str, out_of_range is thrown.  The"},
{"lineNum":" 4467","line":"       *  value of the string doesn\'t change if an error is thrown."},
{"lineNum":" 4468","line":"      */"},
{"lineNum":" 4469","line":"      basic_string&"},
{"lineNum":" 4470","line":"      insert(size_type __pos1, const basic_string& __str,"},
{"lineNum":" 4471","line":"\t     size_type __pos2, size_type __n)"},
{"lineNum":" 4472","line":"      { return this->insert(__pos1, __str._M_data()"},
{"lineNum":" 4473","line":"\t\t\t    + __str._M_check(__pos2, \"basic_string::insert\"),"},
{"lineNum":" 4474","line":"\t\t\t    __str._M_limit(__pos2, __n)); }"},
{"lineNum":" 4475","line":""},
{"lineNum":" 4476","line":"      /**"},
{"lineNum":" 4477","line":"       *  @brief  Insert a C substring."},
{"lineNum":" 4478","line":"       *  @param __pos  Iterator referencing location in string to insert at."},
{"lineNum":" 4479","line":"       *  @param __s  The C string to insert."},
{"lineNum":" 4480","line":"       *  @param __n  The number of characters to insert."},
{"lineNum":" 4481","line":"       *  @return  Reference to this string."},
{"lineNum":" 4482","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4483","line":"       *  @throw  std::out_of_range  If @a __pos is beyond the end of this"},
{"lineNum":" 4484","line":"       *  string."},
{"lineNum":" 4485","line":"       *"},
{"lineNum":" 4486","line":"       *  Inserts the first @a __n characters of @a __s starting at @a"},
{"lineNum":" 4487","line":"       *  __pos.  If adding characters causes the length to exceed"},
{"lineNum":" 4488","line":"       *  max_size(), length_error is thrown.  If @a __pos is beyond"},
{"lineNum":" 4489","line":"       *  end(), out_of_range is thrown.  The value of the string"},
{"lineNum":" 4490","line":"       *  doesn\'t change if an error is thrown."},
{"lineNum":" 4491","line":"      */"},
{"lineNum":" 4492","line":"      basic_string&"},
{"lineNum":" 4493","line":"      insert(size_type __pos, const _CharT* __s, size_type __n);"},
{"lineNum":" 4494","line":""},
{"lineNum":" 4495","line":"      /**"},
{"lineNum":" 4496","line":"       *  @brief  Insert a C string."},
{"lineNum":" 4497","line":"       *  @param __pos  Iterator referencing location in string to insert at."},
{"lineNum":" 4498","line":"       *  @param __s  The C string to insert."},
{"lineNum":" 4499","line":"       *  @return  Reference to this string."},
{"lineNum":" 4500","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4501","line":"       *  @throw  std::out_of_range  If @a pos is beyond the end of this"},
{"lineNum":" 4502","line":"       *  string."},
{"lineNum":" 4503","line":"       *"},
{"lineNum":" 4504","line":"       *  Inserts the first @a n characters of @a __s starting at @a __pos.  If"},
{"lineNum":" 4505","line":"       *  adding characters causes the length to exceed max_size(),"},
{"lineNum":" 4506","line":"       *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is"},
{"lineNum":" 4507","line":"       *  thrown.  The value of the string doesn\'t change if an error is"},
{"lineNum":" 4508","line":"       *  thrown."},
{"lineNum":" 4509","line":"      */"},
{"lineNum":" 4510","line":"      basic_string&"},
{"lineNum":" 4511","line":"      insert(size_type __pos, const _CharT* __s)"},
{"lineNum":" 4512","line":"      {"},
{"lineNum":" 4513","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 4514","line":"\treturn this->insert(__pos, __s, traits_type::length(__s));"},
{"lineNum":" 4515","line":"      }"},
{"lineNum":" 4516","line":""},
{"lineNum":" 4517","line":"      /**"},
{"lineNum":" 4518","line":"       *  @brief  Insert multiple characters."},
{"lineNum":" 4519","line":"       *  @param __pos  Index in string to insert at."},
{"lineNum":" 4520","line":"       *  @param __n  Number of characters to insert"},
{"lineNum":" 4521","line":"       *  @param __c  The character to insert."},
{"lineNum":" 4522","line":"       *  @return  Reference to this string."},
{"lineNum":" 4523","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4524","line":"       *  @throw  std::out_of_range  If @a __pos is beyond the end of this"},
{"lineNum":" 4525","line":"       *  string."},
{"lineNum":" 4526","line":"       *"},
{"lineNum":" 4527","line":"       *  Inserts @a __n copies of character @a __c starting at index"},
{"lineNum":" 4528","line":"       *  @a __pos.  If adding characters causes the length to exceed"},
{"lineNum":" 4529","line":"       *  max_size(), length_error is thrown.  If @a __pos > length(),"},
{"lineNum":" 4530","line":"       *  out_of_range is thrown.  The value of the string doesn\'t"},
{"lineNum":" 4531","line":"       *  change if an error is thrown."},
{"lineNum":" 4532","line":"      */"},
{"lineNum":" 4533","line":"      basic_string&"},
{"lineNum":" 4534","line":"      insert(size_type __pos, size_type __n, _CharT __c)"},
{"lineNum":" 4535","line":"      { return _M_replace_aux(_M_check(__pos, \"basic_string::insert\"),"},
{"lineNum":" 4536","line":"\t\t\t      size_type(0), __n, __c); }"},
{"lineNum":" 4537","line":""},
{"lineNum":" 4538","line":"      /**"},
{"lineNum":" 4539","line":"       *  @brief  Insert one character."},
{"lineNum":" 4540","line":"       *  @param __p  Iterator referencing position in string to insert at."},
{"lineNum":" 4541","line":"       *  @param __c  The character to insert."},
{"lineNum":" 4542","line":"       *  @return  Iterator referencing newly inserted char."},
{"lineNum":" 4543","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4544","line":"       *"},
{"lineNum":" 4545","line":"       *  Inserts character @a __c at position referenced by @a __p."},
{"lineNum":" 4546","line":"       *  If adding character causes the length to exceed max_size(),"},
{"lineNum":" 4547","line":"       *  length_error is thrown.  If @a __p is beyond end of string,"},
{"lineNum":" 4548","line":"       *  out_of_range is thrown.  The value of the string doesn\'t"},
{"lineNum":" 4549","line":"       *  change if an error is thrown."},
{"lineNum":" 4550","line":"      */"},
{"lineNum":" 4551","line":"      iterator"},
{"lineNum":" 4552","line":"      insert(iterator __p, _CharT __c)"},
{"lineNum":" 4553","line":"      {"},
{"lineNum":" 4554","line":"\t_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());"},
{"lineNum":" 4555","line":"\tconst size_type __pos = __p - _M_ibegin();"},
{"lineNum":" 4556","line":"\t_M_replace_aux(__pos, size_type(0), size_type(1), __c);"},
{"lineNum":" 4557","line":"\t_M_rep()->_M_set_leaked();"},
{"lineNum":" 4558","line":"\treturn iterator(_M_data() + __pos);"},
{"lineNum":" 4559","line":"      }"},
{"lineNum":" 4560","line":""},
{"lineNum":" 4561","line":"#if __cplusplus > 201402L"},
{"lineNum":" 4562","line":"      /**"},
{"lineNum":" 4563","line":"       *  @brief  Insert a string_view."},
{"lineNum":" 4564","line":"       *  @param __pos  Iterator referencing position in string to insert at."},
{"lineNum":" 4565","line":"       *  @param __svt  The object convertible to string_view to insert."},
{"lineNum":" 4566","line":"       *  @return  Reference to this string."},
{"lineNum":" 4567","line":"      */"},
{"lineNum":" 4568","line":"      template<typename _Tp>"},
{"lineNum":" 4569","line":"\t_If_sv<_Tp, basic_string&>"},
{"lineNum":" 4570","line":"\tinsert(size_type __pos, const _Tp& __svt)"},
{"lineNum":" 4571","line":"\t{"},
{"lineNum":" 4572","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 4573","line":"\t  return this->insert(__pos, __sv.data(), __sv.size());"},
{"lineNum":" 4574","line":"\t}"},
{"lineNum":" 4575","line":""},
{"lineNum":" 4576","line":"      /**"},
{"lineNum":" 4577","line":"       *  @brief  Insert a string_view."},
{"lineNum":" 4578","line":"       *  @param __pos  Iterator referencing position in string to insert at."},
{"lineNum":" 4579","line":"       *  @param __svt  The object convertible to string_view to insert from."},
{"lineNum":" 4580","line":"       *  @param __pos  Iterator referencing position in string_view to insert"},
{"lineNum":" 4581","line":"       *  from."},
{"lineNum":" 4582","line":"       *  @param __n    The number of characters to insert."},
{"lineNum":" 4583","line":"       *  @return  Reference to this string."},
{"lineNum":" 4584","line":"      */"},
{"lineNum":" 4585","line":"      template<typename _Tp>"},
{"lineNum":" 4586","line":"        _If_sv<_Tp, basic_string&>"},
{"lineNum":" 4587","line":"        insert(size_type __pos1, const _Tp& __svt,"},
{"lineNum":" 4588","line":"\t       size_type __pos2, size_type __n = npos)"},
{"lineNum":" 4589","line":"\t{"},
{"lineNum":" 4590","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 4591","line":"\t  return this->replace(__pos1, size_type(0), __sv.data()"},
{"lineNum":" 4592","line":"\t\t\t       + __sv._M_check(__pos2, \"basic_string::insert\"),"},
{"lineNum":" 4593","line":"\t\t\t       __sv._M_limit(__pos2, __n));"},
{"lineNum":" 4594","line":"\t}"},
{"lineNum":" 4595","line":"#endif // C++17"},
{"lineNum":" 4596","line":""},
{"lineNum":" 4597","line":"      /**"},
{"lineNum":" 4598","line":"       *  @brief  Remove characters."},
{"lineNum":" 4599","line":"       *  @param __pos  Index of first character to remove (default 0)."},
{"lineNum":" 4600","line":"       *  @param __n  Number of characters to remove (default remainder)."},
{"lineNum":" 4601","line":"       *  @return  Reference to this string."},
{"lineNum":" 4602","line":"       *  @throw  std::out_of_range  If @a pos is beyond the end of this"},
{"lineNum":" 4603","line":"       *  string."},
{"lineNum":" 4604","line":"       *"},
{"lineNum":" 4605","line":"       *  Removes @a __n characters from this string starting at @a"},
{"lineNum":" 4606","line":"       *  __pos.  The length of the string is reduced by @a __n.  If"},
{"lineNum":" 4607","line":"       *  there are < @a __n characters to remove, the remainder of"},
{"lineNum":" 4608","line":"       *  the string is truncated.  If @a __p is beyond end of string,"},
{"lineNum":" 4609","line":"       *  out_of_range is thrown.  The value of the string doesn\'t"},
{"lineNum":" 4610","line":"       *  change if an error is thrown."},
{"lineNum":" 4611","line":"      */"},
{"lineNum":" 4612","line":"      basic_string&"},
{"lineNum":" 4613","line":"      erase(size_type __pos = 0, size_type __n = npos)"},
{"lineNum":" 4614","line":"      {"},
{"lineNum":" 4615","line":"\t_M_mutate(_M_check(__pos, \"basic_string::erase\"),"},
{"lineNum":" 4616","line":"\t\t  _M_limit(__pos, __n), size_type(0));"},
{"lineNum":" 4617","line":"\treturn *this;"},
{"lineNum":" 4618","line":"      }"},
{"lineNum":" 4619","line":""},
{"lineNum":" 4620","line":"      /**"},
{"lineNum":" 4621","line":"       *  @brief  Remove one character."},
{"lineNum":" 4622","line":"       *  @param __position  Iterator referencing the character to remove."},
{"lineNum":" 4623","line":"       *  @return  iterator referencing same location after removal."},
{"lineNum":" 4624","line":"       *"},
{"lineNum":" 4625","line":"       *  Removes the character at @a __position from this string. The value"},
{"lineNum":" 4626","line":"       *  of the string doesn\'t change if an error is thrown."},
{"lineNum":" 4627","line":"      */"},
{"lineNum":" 4628","line":"      iterator"},
{"lineNum":" 4629","line":"      erase(iterator __position)"},
{"lineNum":" 4630","line":"      {"},
{"lineNum":" 4631","line":"\t_GLIBCXX_DEBUG_PEDASSERT(__position >= _M_ibegin()"},
{"lineNum":" 4632","line":"\t\t\t\t && __position < _M_iend());"},
{"lineNum":" 4633","line":"\tconst size_type __pos = __position - _M_ibegin();"},
{"lineNum":" 4634","line":"\t_M_mutate(__pos, size_type(1), size_type(0));"},
{"lineNum":" 4635","line":"\t_M_rep()->_M_set_leaked();"},
{"lineNum":" 4636","line":"\treturn iterator(_M_data() + __pos);"},
{"lineNum":" 4637","line":"      }"},
{"lineNum":" 4638","line":""},
{"lineNum":" 4639","line":"      /**"},
{"lineNum":" 4640","line":"       *  @brief  Remove a range of characters."},
{"lineNum":" 4641","line":"       *  @param __first  Iterator referencing the first character to remove."},
{"lineNum":" 4642","line":"       *  @param __last  Iterator referencing the end of the range."},
{"lineNum":" 4643","line":"       *  @return  Iterator referencing location of first after removal."},
{"lineNum":" 4644","line":"       *"},
{"lineNum":" 4645","line":"       *  Removes the characters in the range [first,last) from this string."},
{"lineNum":" 4646","line":"       *  The value of the string doesn\'t change if an error is thrown."},
{"lineNum":" 4647","line":"      */"},
{"lineNum":" 4648","line":"      iterator"},
{"lineNum":" 4649","line":"      erase(iterator __first, iterator __last);"},
{"lineNum":" 4650","line":""},
{"lineNum":" 4651","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 4652","line":"      /**"},
{"lineNum":" 4653","line":"       *  @brief  Remove the last character."},
{"lineNum":" 4654","line":"       *"},
{"lineNum":" 4655","line":"       *  The string must be non-empty."},
{"lineNum":" 4656","line":"       */"},
{"lineNum":" 4657","line":"      void"},
{"lineNum":" 4658","line":"      pop_back() // FIXME C++11: should be noexcept."},
{"lineNum":" 4659","line":"      {"},
{"lineNum":" 4660","line":"\t__glibcxx_assert(!empty());"},
{"lineNum":" 4661","line":"\terase(size() - 1, 1);"},
{"lineNum":" 4662","line":"      }"},
{"lineNum":" 4663","line":"#endif // C++11"},
{"lineNum":" 4664","line":""},
{"lineNum":" 4665","line":"      /**"},
{"lineNum":" 4666","line":"       *  @brief  Replace characters with value from another string."},
{"lineNum":" 4667","line":"       *  @param __pos  Index of first character to replace."},
{"lineNum":" 4668","line":"       *  @param __n  Number of characters to be replaced."},
{"lineNum":" 4669","line":"       *  @param __str  String to insert."},
{"lineNum":" 4670","line":"       *  @return  Reference to this string."},
{"lineNum":" 4671","line":"       *  @throw  std::out_of_range  If @a pos is beyond the end of this"},
{"lineNum":" 4672","line":"       *  string."},
{"lineNum":" 4673","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4674","line":"       *"},
{"lineNum":" 4675","line":"       *  Removes the characters in the range [__pos,__pos+__n) from"},
{"lineNum":" 4676","line":"       *  this string.  In place, the value of @a __str is inserted."},
{"lineNum":" 4677","line":"       *  If @a __pos is beyond end of string, out_of_range is thrown."},
{"lineNum":" 4678","line":"       *  If the length of the result exceeds max_size(), length_error"},
{"lineNum":" 4679","line":"       *  is thrown.  The value of the string doesn\'t change if an"},
{"lineNum":" 4680","line":"       *  error is thrown."},
{"lineNum":" 4681","line":"      */"},
{"lineNum":" 4682","line":"      basic_string&"},
{"lineNum":" 4683","line":"      replace(size_type __pos, size_type __n, const basic_string& __str)"},
{"lineNum":" 4684","line":"      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }"},
{"lineNum":" 4685","line":""},
{"lineNum":" 4686","line":"      /**"},
{"lineNum":" 4687","line":"       *  @brief  Replace characters with value from another string."},
{"lineNum":" 4688","line":"       *  @param __pos1  Index of first character to replace."},
{"lineNum":" 4689","line":"       *  @param __n1  Number of characters to be replaced."},
{"lineNum":" 4690","line":"       *  @param __str  String to insert."},
{"lineNum":" 4691","line":"       *  @param __pos2  Index of first character of str to use."},
{"lineNum":" 4692","line":"       *  @param __n2  Number of characters from str to use."},
{"lineNum":" 4693","line":"       *  @return  Reference to this string."},
{"lineNum":" 4694","line":"       *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >"},
{"lineNum":" 4695","line":"       *  __str.size()."},
{"lineNum":" 4696","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4697","line":"       *"},
{"lineNum":" 4698","line":"       *  Removes the characters in the range [__pos1,__pos1 + n) from this"},
{"lineNum":" 4699","line":"       *  string.  In place, the value of @a __str is inserted.  If @a __pos is"},
{"lineNum":" 4700","line":"       *  beyond end of string, out_of_range is thrown.  If the length of the"},
{"lineNum":" 4701","line":"       *  result exceeds max_size(), length_error is thrown.  The value of the"},
{"lineNum":" 4702","line":"       *  string doesn\'t change if an error is thrown."},
{"lineNum":" 4703","line":"      */"},
{"lineNum":" 4704","line":"      basic_string&"},
{"lineNum":" 4705","line":"      replace(size_type __pos1, size_type __n1, const basic_string& __str,"},
{"lineNum":" 4706","line":"\t      size_type __pos2, size_type __n2)"},
{"lineNum":" 4707","line":"      { return this->replace(__pos1, __n1, __str._M_data()"},
{"lineNum":" 4708","line":"\t\t\t     + __str._M_check(__pos2, \"basic_string::replace\"),"},
{"lineNum":" 4709","line":"\t\t\t     __str._M_limit(__pos2, __n2)); }"},
{"lineNum":" 4710","line":""},
{"lineNum":" 4711","line":"      /**"},
{"lineNum":" 4712","line":"       *  @brief  Replace characters with value of a C substring."},
{"lineNum":" 4713","line":"       *  @param __pos  Index of first character to replace."},
{"lineNum":" 4714","line":"       *  @param __n1  Number of characters to be replaced."},
{"lineNum":" 4715","line":"       *  @param __s  C string to insert."},
{"lineNum":" 4716","line":"       *  @param __n2  Number of characters from @a s to use."},
{"lineNum":" 4717","line":"       *  @return  Reference to this string."},
{"lineNum":" 4718","line":"       *  @throw  std::out_of_range  If @a pos1 > size()."},
{"lineNum":" 4719","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4720","line":"       *"},
{"lineNum":" 4721","line":"       *  Removes the characters in the range [__pos,__pos + __n1)"},
{"lineNum":" 4722","line":"       *  from this string.  In place, the first @a __n2 characters of"},
{"lineNum":" 4723","line":"       *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If"},
{"lineNum":" 4724","line":"       *  @a __pos is beyond end of string, out_of_range is thrown.  If"},
{"lineNum":" 4725","line":"       *  the length of result exceeds max_size(), length_error is"},
{"lineNum":" 4726","line":"       *  thrown.  The value of the string doesn\'t change if an error"},
{"lineNum":" 4727","line":"       *  is thrown."},
{"lineNum":" 4728","line":"      */"},
{"lineNum":" 4729","line":"      basic_string&"},
{"lineNum":" 4730","line":"      replace(size_type __pos, size_type __n1, const _CharT* __s,"},
{"lineNum":" 4731","line":"\t      size_type __n2);"},
{"lineNum":" 4732","line":""},
{"lineNum":" 4733","line":"      /**"},
{"lineNum":" 4734","line":"       *  @brief  Replace characters with value of a C string."},
{"lineNum":" 4735","line":"       *  @param __pos  Index of first character to replace."},
{"lineNum":" 4736","line":"       *  @param __n1  Number of characters to be replaced."},
{"lineNum":" 4737","line":"       *  @param __s  C string to insert."},
{"lineNum":" 4738","line":"       *  @return  Reference to this string."},
{"lineNum":" 4739","line":"       *  @throw  std::out_of_range  If @a pos > size()."},
{"lineNum":" 4740","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4741","line":"       *"},
{"lineNum":" 4742","line":"       *  Removes the characters in the range [__pos,__pos + __n1)"},
{"lineNum":" 4743","line":"       *  from this string.  In place, the characters of @a __s are"},
{"lineNum":" 4744","line":"       *  inserted.  If @a __pos is beyond end of string, out_of_range"},
{"lineNum":" 4745","line":"       *  is thrown.  If the length of result exceeds max_size(),"},
{"lineNum":" 4746","line":"       *  length_error is thrown.  The value of the string doesn\'t"},
{"lineNum":" 4747","line":"       *  change if an error is thrown."},
{"lineNum":" 4748","line":"      */"},
{"lineNum":" 4749","line":"      basic_string&"},
{"lineNum":" 4750","line":"      replace(size_type __pos, size_type __n1, const _CharT* __s)"},
{"lineNum":" 4751","line":"      {"},
{"lineNum":" 4752","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 4753","line":"\treturn this->replace(__pos, __n1, __s, traits_type::length(__s));"},
{"lineNum":" 4754","line":"      }"},
{"lineNum":" 4755","line":""},
{"lineNum":" 4756","line":"      /**"},
{"lineNum":" 4757","line":"       *  @brief  Replace characters with multiple characters."},
{"lineNum":" 4758","line":"       *  @param __pos  Index of first character to replace."},
{"lineNum":" 4759","line":"       *  @param __n1  Number of characters to be replaced."},
{"lineNum":" 4760","line":"       *  @param __n2  Number of characters to insert."},
{"lineNum":" 4761","line":"       *  @param __c  Character to insert."},
{"lineNum":" 4762","line":"       *  @return  Reference to this string."},
{"lineNum":" 4763","line":"       *  @throw  std::out_of_range  If @a __pos > size()."},
{"lineNum":" 4764","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4765","line":"       *"},
{"lineNum":" 4766","line":"       *  Removes the characters in the range [pos,pos + n1) from this"},
{"lineNum":" 4767","line":"       *  string.  In place, @a __n2 copies of @a __c are inserted."},
{"lineNum":" 4768","line":"       *  If @a __pos is beyond end of string, out_of_range is thrown."},
{"lineNum":" 4769","line":"       *  If the length of result exceeds max_size(), length_error is"},
{"lineNum":" 4770","line":"       *  thrown.  The value of the string doesn\'t change if an error"},
{"lineNum":" 4771","line":"       *  is thrown."},
{"lineNum":" 4772","line":"      */"},
{"lineNum":" 4773","line":"      basic_string&"},
{"lineNum":" 4774","line":"      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)"},
{"lineNum":" 4775","line":"      { return _M_replace_aux(_M_check(__pos, \"basic_string::replace\"),"},
{"lineNum":" 4776","line":"\t\t\t      _M_limit(__pos, __n1), __n2, __c); }"},
{"lineNum":" 4777","line":""},
{"lineNum":" 4778","line":"      /**"},
{"lineNum":" 4779","line":"       *  @brief  Replace range of characters with string."},
{"lineNum":" 4780","line":"       *  @param __i1  Iterator referencing start of range to replace."},
{"lineNum":" 4781","line":"       *  @param __i2  Iterator referencing end of range to replace."},
{"lineNum":" 4782","line":"       *  @param __str  String value to insert."},
{"lineNum":" 4783","line":"       *  @return  Reference to this string."},
{"lineNum":" 4784","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4785","line":"       *"},
{"lineNum":" 4786","line":"       *  Removes the characters in the range [__i1,__i2).  In place,"},
{"lineNum":" 4787","line":"       *  the value of @a __str is inserted.  If the length of result"},
{"lineNum":" 4788","line":"       *  exceeds max_size(), length_error is thrown.  The value of"},
{"lineNum":" 4789","line":"       *  the string doesn\'t change if an error is thrown."},
{"lineNum":" 4790","line":"      */"},
{"lineNum":" 4791","line":"      basic_string&"},
{"lineNum":" 4792","line":"      replace(iterator __i1, iterator __i2, const basic_string& __str)"},
{"lineNum":" 4793","line":"      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }"},
{"lineNum":" 4794","line":""},
{"lineNum":" 4795","line":"      /**"},
{"lineNum":" 4796","line":"       *  @brief  Replace range of characters with C substring."},
{"lineNum":" 4797","line":"       *  @param __i1  Iterator referencing start of range to replace."},
{"lineNum":" 4798","line":"       *  @param __i2  Iterator referencing end of range to replace."},
{"lineNum":" 4799","line":"       *  @param __s  C string value to insert."},
{"lineNum":" 4800","line":"       *  @param __n  Number of characters from s to insert."},
{"lineNum":" 4801","line":"       *  @return  Reference to this string."},
{"lineNum":" 4802","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4803","line":"       *"},
{"lineNum":" 4804","line":"       *  Removes the characters in the range [__i1,__i2).  In place,"},
{"lineNum":" 4805","line":"       *  the first @a __n characters of @a __s are inserted.  If the"},
{"lineNum":" 4806","line":"       *  length of result exceeds max_size(), length_error is thrown."},
{"lineNum":" 4807","line":"       *  The value of the string doesn\'t change if an error is"},
{"lineNum":" 4808","line":"       *  thrown."},
{"lineNum":" 4809","line":"      */"},
{"lineNum":" 4810","line":"      basic_string&"},
{"lineNum":" 4811","line":"      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)"},
{"lineNum":" 4812","line":"      {"},
{"lineNum":" 4813","line":"\t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2"},
{"lineNum":" 4814","line":"\t\t\t\t && __i2 <= _M_iend());"},
{"lineNum":" 4815","line":"\treturn this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);"},
{"lineNum":" 4816","line":"      }"},
{"lineNum":" 4817","line":""},
{"lineNum":" 4818","line":"      /**"},
{"lineNum":" 4819","line":"       *  @brief  Replace range of characters with C string."},
{"lineNum":" 4820","line":"       *  @param __i1  Iterator referencing start of range to replace."},
{"lineNum":" 4821","line":"       *  @param __i2  Iterator referencing end of range to replace."},
{"lineNum":" 4822","line":"       *  @param __s  C string value to insert."},
{"lineNum":" 4823","line":"       *  @return  Reference to this string."},
{"lineNum":" 4824","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4825","line":"       *"},
{"lineNum":" 4826","line":"       *  Removes the characters in the range [__i1,__i2).  In place,"},
{"lineNum":" 4827","line":"       *  the characters of @a __s are inserted.  If the length of"},
{"lineNum":" 4828","line":"       *  result exceeds max_size(), length_error is thrown.  The"},
{"lineNum":" 4829","line":"       *  value of the string doesn\'t change if an error is thrown."},
{"lineNum":" 4830","line":"      */"},
{"lineNum":" 4831","line":"      basic_string&"},
{"lineNum":" 4832","line":"      replace(iterator __i1, iterator __i2, const _CharT* __s)"},
{"lineNum":" 4833","line":"      {"},
{"lineNum":" 4834","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 4835","line":"\treturn this->replace(__i1, __i2, __s, traits_type::length(__s));"},
{"lineNum":" 4836","line":"      }"},
{"lineNum":" 4837","line":""},
{"lineNum":" 4838","line":"      /**"},
{"lineNum":" 4839","line":"       *  @brief  Replace range of characters with multiple characters"},
{"lineNum":" 4840","line":"       *  @param __i1  Iterator referencing start of range to replace."},
{"lineNum":" 4841","line":"       *  @param __i2  Iterator referencing end of range to replace."},
{"lineNum":" 4842","line":"       *  @param __n  Number of characters to insert."},
{"lineNum":" 4843","line":"       *  @param __c  Character to insert."},
{"lineNum":" 4844","line":"       *  @return  Reference to this string."},
{"lineNum":" 4845","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4846","line":"       *"},
{"lineNum":" 4847","line":"       *  Removes the characters in the range [__i1,__i2).  In place,"},
{"lineNum":" 4848","line":"       *  @a __n copies of @a __c are inserted.  If the length of"},
{"lineNum":" 4849","line":"       *  result exceeds max_size(), length_error is thrown.  The"},
{"lineNum":" 4850","line":"       *  value of the string doesn\'t change if an error is thrown."},
{"lineNum":" 4851","line":"      */"},
{"lineNum":" 4852","line":"      basic_string&"},
{"lineNum":" 4853","line":"      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)"},
{"lineNum":" 4854","line":"      {"},
{"lineNum":" 4855","line":"\t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2"},
{"lineNum":" 4856","line":"\t\t\t\t && __i2 <= _M_iend());"},
{"lineNum":" 4857","line":"\treturn _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);"},
{"lineNum":" 4858","line":"      }"},
{"lineNum":" 4859","line":""},
{"lineNum":" 4860","line":"      /**"},
{"lineNum":" 4861","line":"       *  @brief  Replace range of characters with range."},
{"lineNum":" 4862","line":"       *  @param __i1  Iterator referencing start of range to replace."},
{"lineNum":" 4863","line":"       *  @param __i2  Iterator referencing end of range to replace."},
{"lineNum":" 4864","line":"       *  @param __k1  Iterator referencing start of range to insert."},
{"lineNum":" 4865","line":"       *  @param __k2  Iterator referencing end of range to insert."},
{"lineNum":" 4866","line":"       *  @return  Reference to this string."},
{"lineNum":" 4867","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4868","line":"       *"},
{"lineNum":" 4869","line":"       *  Removes the characters in the range [__i1,__i2).  In place,"},
{"lineNum":" 4870","line":"       *  characters in the range [__k1,__k2) are inserted.  If the"},
{"lineNum":" 4871","line":"       *  length of result exceeds max_size(), length_error is thrown."},
{"lineNum":" 4872","line":"       *  The value of the string doesn\'t change if an error is"},
{"lineNum":" 4873","line":"       *  thrown."},
{"lineNum":" 4874","line":"      */"},
{"lineNum":" 4875","line":"      template<class _InputIterator>"},
{"lineNum":" 4876","line":"        basic_string&"},
{"lineNum":" 4877","line":"        replace(iterator __i1, iterator __i2,"},
{"lineNum":" 4878","line":"\t\t_InputIterator __k1, _InputIterator __k2)"},
{"lineNum":" 4879","line":"        {"},
{"lineNum":" 4880","line":"\t  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2"},
{"lineNum":" 4881","line":"\t\t\t\t   && __i2 <= _M_iend());"},
{"lineNum":" 4882","line":"\t  __glibcxx_requires_valid_range(__k1, __k2);"},
{"lineNum":" 4883","line":"\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;"},
{"lineNum":" 4884","line":"\t  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());"},
{"lineNum":" 4885","line":"\t}"},
{"lineNum":" 4886","line":""},
{"lineNum":" 4887","line":"      // Specializations for the common case of pointer and iterator:"},
{"lineNum":" 4888","line":"      // useful to avoid the overhead of temporary buffering in _M_replace."},
{"lineNum":" 4889","line":"      basic_string&"},
{"lineNum":" 4890","line":"      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)"},
{"lineNum":" 4891","line":"      {"},
{"lineNum":" 4892","line":"\t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2"},
{"lineNum":" 4893","line":"\t\t\t\t && __i2 <= _M_iend());"},
{"lineNum":" 4894","line":"\t__glibcxx_requires_valid_range(__k1, __k2);"},
{"lineNum":" 4895","line":"\treturn this->replace(__i1 - _M_ibegin(), __i2 - __i1,"},
{"lineNum":" 4896","line":"\t\t\t     __k1, __k2 - __k1);"},
{"lineNum":" 4897","line":"      }"},
{"lineNum":" 4898","line":""},
{"lineNum":" 4899","line":"      basic_string&"},
{"lineNum":" 4900","line":"      replace(iterator __i1, iterator __i2,"},
{"lineNum":" 4901","line":"\t      const _CharT* __k1, const _CharT* __k2)"},
{"lineNum":" 4902","line":"      {"},
{"lineNum":" 4903","line":"\t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2"},
{"lineNum":" 4904","line":"\t\t\t\t && __i2 <= _M_iend());"},
{"lineNum":" 4905","line":"\t__glibcxx_requires_valid_range(__k1, __k2);"},
{"lineNum":" 4906","line":"\treturn this->replace(__i1 - _M_ibegin(), __i2 - __i1,"},
{"lineNum":" 4907","line":"\t\t\t     __k1, __k2 - __k1);"},
{"lineNum":" 4908","line":"      }"},
{"lineNum":" 4909","line":""},
{"lineNum":" 4910","line":"      basic_string&"},
{"lineNum":" 4911","line":"      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)"},
{"lineNum":" 4912","line":"      {"},
{"lineNum":" 4913","line":"\t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2"},
{"lineNum":" 4914","line":"\t\t\t\t && __i2 <= _M_iend());"},
{"lineNum":" 4915","line":"\t__glibcxx_requires_valid_range(__k1, __k2);"},
{"lineNum":" 4916","line":"\treturn this->replace(__i1 - _M_ibegin(), __i2 - __i1,"},
{"lineNum":" 4917","line":"\t\t\t     __k1.base(), __k2 - __k1);"},
{"lineNum":" 4918","line":"      }"},
{"lineNum":" 4919","line":""},
{"lineNum":" 4920","line":"      basic_string&"},
{"lineNum":" 4921","line":"      replace(iterator __i1, iterator __i2,"},
{"lineNum":" 4922","line":"\t      const_iterator __k1, const_iterator __k2)"},
{"lineNum":" 4923","line":"      {"},
{"lineNum":" 4924","line":"\t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2"},
{"lineNum":" 4925","line":"\t\t\t\t && __i2 <= _M_iend());"},
{"lineNum":" 4926","line":"\t__glibcxx_requires_valid_range(__k1, __k2);"},
{"lineNum":" 4927","line":"\treturn this->replace(__i1 - _M_ibegin(), __i2 - __i1,"},
{"lineNum":" 4928","line":"\t\t\t     __k1.base(), __k2 - __k1);"},
{"lineNum":" 4929","line":"      }"},
{"lineNum":" 4930","line":""},
{"lineNum":" 4931","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 4932","line":"      /**"},
{"lineNum":" 4933","line":"       *  @brief  Replace range of characters with initializer_list."},
{"lineNum":" 4934","line":"       *  @param __i1  Iterator referencing start of range to replace."},
{"lineNum":" 4935","line":"       *  @param __i2  Iterator referencing end of range to replace."},
{"lineNum":" 4936","line":"       *  @param __l  The initializer_list of characters to insert."},
{"lineNum":" 4937","line":"       *  @return  Reference to this string."},
{"lineNum":" 4938","line":"       *  @throw  std::length_error  If new length exceeds @c max_size()."},
{"lineNum":" 4939","line":"       *"},
{"lineNum":" 4940","line":"       *  Removes the characters in the range [__i1,__i2).  In place,"},
{"lineNum":" 4941","line":"       *  characters in the range [__k1,__k2) are inserted.  If the"},
{"lineNum":" 4942","line":"       *  length of result exceeds max_size(), length_error is thrown."},
{"lineNum":" 4943","line":"       *  The value of the string doesn\'t change if an error is"},
{"lineNum":" 4944","line":"       *  thrown."},
{"lineNum":" 4945","line":"      */"},
{"lineNum":" 4946","line":"      basic_string& replace(iterator __i1, iterator __i2,"},
{"lineNum":" 4947","line":"\t\t\t    initializer_list<_CharT> __l)"},
{"lineNum":" 4948","line":"      { return this->replace(__i1, __i2, __l.begin(), __l.end()); }"},
{"lineNum":" 4949","line":"#endif // C++11"},
{"lineNum":" 4950","line":""},
{"lineNum":" 4951","line":"#if __cplusplus > 201402L"},
{"lineNum":" 4952","line":"      /**"},
{"lineNum":" 4953","line":"       *  @brief  Replace range of characters with string_view."},
{"lineNum":" 4954","line":"       *  @param __pos  The position to replace at."},
{"lineNum":" 4955","line":"       *  @param __n    The number of characters to replace."},
{"lineNum":" 4956","line":"       *  @param __svt  The object convertible to string_view to insert."},
{"lineNum":" 4957","line":"       *  @return  Reference to this string."},
{"lineNum":" 4958","line":"      */"},
{"lineNum":" 4959","line":"      template<typename _Tp>"},
{"lineNum":" 4960","line":"\t_If_sv<_Tp, basic_string&>"},
{"lineNum":" 4961","line":"\treplace(size_type __pos, size_type __n, const _Tp& __svt)"},
{"lineNum":" 4962","line":"\t{"},
{"lineNum":" 4963","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 4964","line":"\t  return this->replace(__pos, __n, __sv.data(), __sv.size());"},
{"lineNum":" 4965","line":"\t}"},
{"lineNum":" 4966","line":""},
{"lineNum":" 4967","line":"      /**"},
{"lineNum":" 4968","line":"       *  @brief  Replace range of characters with string_view."},
{"lineNum":" 4969","line":"       *  @param __pos1  The position to replace at."},
{"lineNum":" 4970","line":"       *  @param __n1    The number of characters to replace."},
{"lineNum":" 4971","line":"       *  @param __svt   The object convertible to string_view to insert from."},
{"lineNum":" 4972","line":"       *  @param __pos2  The position in the string_view to insert from."},
{"lineNum":" 4973","line":"       *  @param __n2    The number of characters to insert."},
{"lineNum":" 4974","line":"       *  @return  Reference to this string."},
{"lineNum":" 4975","line":"      */"},
{"lineNum":" 4976","line":"      template<typename _Tp>"},
{"lineNum":" 4977","line":"        _If_sv<_Tp, basic_string&>"},
{"lineNum":" 4978","line":"        replace(size_type __pos1, size_type __n1, const _Tp& __svt,"},
{"lineNum":" 4979","line":"\t\tsize_type __pos2, size_type __n2 = npos)"},
{"lineNum":" 4980","line":"\t{"},
{"lineNum":" 4981","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 4982","line":"\t  return this->replace(__pos1, __n1,"},
{"lineNum":" 4983","line":"\t      __sv.data() + __sv._M_check(__pos2, \"basic_string::replace\"),"},
{"lineNum":" 4984","line":"\t      __sv._M_limit(__pos2, __n2));"},
{"lineNum":" 4985","line":"\t}"},
{"lineNum":" 4986","line":""},
{"lineNum":" 4987","line":"      /**"},
{"lineNum":" 4988","line":"       *  @brief  Replace range of characters with string_view."},
{"lineNum":" 4989","line":"       *  @param __i1    An iterator referencing the start position"},
{"lineNum":" 4990","line":"          to replace at."},
{"lineNum":" 4991","line":"       *  @param __i2    An iterator referencing the end position"},
{"lineNum":" 4992","line":"          for the replace."},
{"lineNum":" 4993","line":"       *  @param __svt   The object convertible to string_view to insert from."},
{"lineNum":" 4994","line":"       *  @return  Reference to this string."},
{"lineNum":" 4995","line":"      */"},
{"lineNum":" 4996","line":"      template<typename _Tp>"},
{"lineNum":" 4997","line":"\t_If_sv<_Tp, basic_string&>"},
{"lineNum":" 4998","line":"\treplace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)"},
{"lineNum":" 4999","line":"\t{"},
{"lineNum":" 5000","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 5001","line":"\t  return this->replace(__i1 - begin(), __i2 - __i1, __sv);"},
{"lineNum":" 5002","line":"\t}"},
{"lineNum":" 5003","line":"#endif // C++17"},
{"lineNum":" 5004","line":""},
{"lineNum":" 5005","line":"    private:"},
{"lineNum":" 5006","line":"      template<class _Integer>"},
{"lineNum":" 5007","line":"\tbasic_string&"},
{"lineNum":" 5008","line":"\t_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,"},
{"lineNum":" 5009","line":"\t\t\t    _Integer __val, __true_type)"},
{"lineNum":" 5010","line":"        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }"},
{"lineNum":" 5011","line":""},
{"lineNum":" 5012","line":"      template<class _InputIterator>"},
{"lineNum":" 5013","line":"\tbasic_string&"},
{"lineNum":" 5014","line":"\t_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,"},
{"lineNum":" 5015","line":"\t\t\t    _InputIterator __k2, __false_type);"},
{"lineNum":" 5016","line":""},
{"lineNum":" 5017","line":"      basic_string&"},
{"lineNum":" 5018","line":"      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,"},
{"lineNum":" 5019","line":"\t\t     _CharT __c);"},
{"lineNum":" 5020","line":""},
{"lineNum":" 5021","line":"      basic_string&"},
{"lineNum":" 5022","line":"      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,"},
{"lineNum":" 5023","line":"\t\t      size_type __n2);"},
{"lineNum":" 5024","line":""},
{"lineNum":" 5025","line":"      // _S_construct_aux is used to implement the 21.3.1 para 15 which"},
{"lineNum":" 5026","line":"      // requires special behaviour if _InIter is an integral type"},
{"lineNum":" 5027","line":"      template<class _InIterator>"},
{"lineNum":" 5028","line":"        static _CharT*"},
{"lineNum":" 5029","line":"        _S_construct_aux(_InIterator __beg, _InIterator __end,"},
{"lineNum":" 5030","line":"\t\t\t const _Alloc& __a, __false_type)"},
{"lineNum":" 5031","line":"\t{"},
{"lineNum":" 5032","line":"          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;"},
{"lineNum":" 5033","line":"          return _S_construct(__beg, __end, __a, _Tag());"},
{"lineNum":" 5034","line":"\t}"},
{"lineNum":" 5035","line":""},
{"lineNum":" 5036","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":" 5037","line":"      // 438. Ambiguity in the \"do the right thing\" clause"},
{"lineNum":" 5038","line":"      template<class _Integer>"},
{"lineNum":" 5039","line":"        static _CharT*"},
{"lineNum":" 5040","line":"        _S_construct_aux(_Integer __beg, _Integer __end,"},
{"lineNum":" 5041","line":"\t\t\t const _Alloc& __a, __true_type)"},
{"lineNum":" 5042","line":"        { return _S_construct_aux_2(static_cast<size_type>(__beg),"},
{"lineNum":" 5043","line":"\t\t\t\t    __end, __a); }"},
{"lineNum":" 5044","line":""},
{"lineNum":" 5045","line":"      static _CharT*"},
{"lineNum":" 5046","line":"      _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)"},
{"lineNum":" 5047","line":"      { return _S_construct(__req, __c, __a); }"},
{"lineNum":" 5048","line":""},
{"lineNum":" 5049","line":"      template<class _InIterator>"},
{"lineNum":" 5050","line":"        static _CharT*"},
{"lineNum":" 5051","line":"        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)"},
{"lineNum":" 5052","line":"\t{"},
{"lineNum":" 5053","line":"\t  typedef typename std::__is_integer<_InIterator>::__type _Integral;"},
{"lineNum":" 5054","line":"\t  return _S_construct_aux(__beg, __end, __a, _Integral());"},
{"lineNum":" 5055","line":"        }"},
{"lineNum":" 5056","line":""},
{"lineNum":" 5057","line":"      // For Input Iterators, used in istreambuf_iterators, etc."},
{"lineNum":" 5058","line":"      template<class _InIterator>"},
{"lineNum":" 5059","line":"        static _CharT*"},
{"lineNum":" 5060","line":"         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,"},
{"lineNum":" 5061","line":"\t\t      input_iterator_tag);"},
{"lineNum":" 5062","line":""},
{"lineNum":" 5063","line":"      // For forward_iterators up to random_access_iterators, used for"},
{"lineNum":" 5064","line":"      // string::iterator, _CharT*, etc."},
{"lineNum":" 5065","line":"      template<class _FwdIterator>"},
{"lineNum":" 5066","line":"        static _CharT*"},
{"lineNum":" 5067","line":"        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,"},
{"lineNum":" 5068","line":"\t\t     forward_iterator_tag);"},
{"lineNum":" 5069","line":""},
{"lineNum":" 5070","line":"      static _CharT*"},
{"lineNum":" 5071","line":"      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);"},
{"lineNum":" 5072","line":""},
{"lineNum":" 5073","line":"    public:"},
{"lineNum":" 5074","line":""},
{"lineNum":" 5075","line":"      /**"},
{"lineNum":" 5076","line":"       *  @brief  Copy substring into C string."},
{"lineNum":" 5077","line":"       *  @param __s  C string to copy value into."},
{"lineNum":" 5078","line":"       *  @param __n  Number of characters to copy."},
{"lineNum":" 5079","line":"       *  @param __pos  Index of first character to copy."},
{"lineNum":" 5080","line":"       *  @return  Number of characters actually copied"},
{"lineNum":" 5081","line":"       *  @throw  std::out_of_range  If __pos > size()."},
{"lineNum":" 5082","line":"       *"},
{"lineNum":" 5083","line":"       *  Copies up to @a __n characters starting at @a __pos into the"},
{"lineNum":" 5084","line":"       *  C string @a __s.  If @a __pos is %greater than size(),"},
{"lineNum":" 5085","line":"       *  out_of_range is thrown."},
{"lineNum":" 5086","line":"      */"},
{"lineNum":" 5087","line":"      size_type"},
{"lineNum":" 5088","line":"      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;"},
{"lineNum":" 5089","line":""},
{"lineNum":" 5090","line":"      /**"},
{"lineNum":" 5091","line":"       *  @brief  Swap contents with another string."},
{"lineNum":" 5092","line":"       *  @param __s  String to swap with."},
{"lineNum":" 5093","line":"       *"},
{"lineNum":" 5094","line":"       *  Exchanges the contents of this string with that of @a __s in constant"},
{"lineNum":" 5095","line":"       *  time."},
{"lineNum":" 5096","line":"      */"},
{"lineNum":" 5097","line":"      // PR 58265, this should be noexcept."},
{"lineNum":" 5098","line":"      void"},
{"lineNum":" 5099","line":"      swap(basic_string& __s);"},
{"lineNum":" 5100","line":""},
{"lineNum":" 5101","line":"      // String operations:"},
{"lineNum":" 5102","line":"      /**"},
{"lineNum":" 5103","line":"       *  @brief  Return const pointer to null-terminated contents."},
{"lineNum":" 5104","line":"       *"},
{"lineNum":" 5105","line":"       *  This is a handle to internal data.  Do not modify or dire things may"},
{"lineNum":" 5106","line":"       *  happen."},
{"lineNum":" 5107","line":"      */"},
{"lineNum":" 5108","line":"      const _CharT*"},
{"lineNum":" 5109","line":"      c_str() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 5110","line":"      { return _M_data(); }"},
{"lineNum":" 5111","line":""},
{"lineNum":" 5112","line":"      /**"},
{"lineNum":" 5113","line":"       *  @brief  Return const pointer to contents."},
{"lineNum":" 5114","line":"       *"},
{"lineNum":" 5115","line":"       *  This is a pointer to internal data.  It is undefined to modify"},
{"lineNum":" 5116","line":"       *  the contents through the returned pointer. To get a pointer that"},
{"lineNum":" 5117","line":"       *  allows modifying the contents use @c &str[0] instead,"},
{"lineNum":" 5118","line":"       *  (or in C++17 the non-const @c str.data() overload)."},
{"lineNum":" 5119","line":"      */"},
{"lineNum":" 5120","line":"      const _CharT*"},
{"lineNum":" 5121","line":"      data() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 5122","line":"      { return _M_data(); }"},
{"lineNum":" 5123","line":""},
{"lineNum":" 5124","line":"#if __cplusplus > 201402L"},
{"lineNum":" 5125","line":"      /**"},
{"lineNum":" 5126","line":"       *  @brief  Return non-const pointer to contents."},
{"lineNum":" 5127","line":"       *"},
{"lineNum":" 5128","line":"       *  This is a pointer to the character sequence held by the string."},
{"lineNum":" 5129","line":"       *  Modifying the characters in the sequence is allowed."},
{"lineNum":" 5130","line":"      */"},
{"lineNum":" 5131","line":"      _CharT*"},
{"lineNum":" 5132","line":"      data() noexcept"},
{"lineNum":" 5133","line":"      { return _M_data(); }"},
{"lineNum":" 5134","line":"#endif"},
{"lineNum":" 5135","line":""},
{"lineNum":" 5136","line":"      /**"},
{"lineNum":" 5137","line":"       *  @brief  Return copy of allocator used to construct this string."},
{"lineNum":" 5138","line":"      */"},
{"lineNum":" 5139","line":"      allocator_type"},
{"lineNum":" 5140","line":"      get_allocator() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 5141","line":"      { return _M_dataplus; }"},
{"lineNum":" 5142","line":""},
{"lineNum":" 5143","line":"      /**"},
{"lineNum":" 5144","line":"       *  @brief  Find position of a C substring."},
{"lineNum":" 5145","line":"       *  @param __s  C string to locate."},
{"lineNum":" 5146","line":"       *  @param __pos  Index of character to search from."},
{"lineNum":" 5147","line":"       *  @param __n  Number of characters from @a s to search for."},
{"lineNum":" 5148","line":"       *  @return  Index of start of first occurrence."},
{"lineNum":" 5149","line":"       *"},
{"lineNum":" 5150","line":"       *  Starting from @a __pos, searches forward for the first @a"},
{"lineNum":" 5151","line":"       *  __n characters in @a __s within this string.  If found,"},
{"lineNum":" 5152","line":"       *  returns the index where it begins.  If not found, returns"},
{"lineNum":" 5153","line":"       *  npos."},
{"lineNum":" 5154","line":"      */"},
{"lineNum":" 5155","line":"      size_type"},
{"lineNum":" 5156","line":"      find(const _CharT* __s, size_type __pos, size_type __n) const"},
{"lineNum":" 5157","line":"      _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 5158","line":""},
{"lineNum":" 5159","line":"      /**"},
{"lineNum":" 5160","line":"       *  @brief  Find position of a string."},
{"lineNum":" 5161","line":"       *  @param __str  String to locate."},
{"lineNum":" 5162","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 5163","line":"       *  @return  Index of start of first occurrence."},
{"lineNum":" 5164","line":"       *"},
{"lineNum":" 5165","line":"       *  Starting from @a __pos, searches forward for value of @a __str within"},
{"lineNum":" 5166","line":"       *  this string.  If found, returns the index where it begins.  If not"},
{"lineNum":" 5167","line":"       *  found, returns npos."},
{"lineNum":" 5168","line":"      */"},
{"lineNum":" 5169","line":"      size_type"},
{"lineNum":" 5170","line":"      find(const basic_string& __str, size_type __pos = 0) const"},
{"lineNum":" 5171","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 5172","line":"      { return this->find(__str.data(), __pos, __str.size()); }"},
{"lineNum":" 5173","line":""},
{"lineNum":" 5174","line":"      /**"},
{"lineNum":" 5175","line":"       *  @brief  Find position of a C string."},
{"lineNum":" 5176","line":"       *  @param __s  C string to locate."},
{"lineNum":" 5177","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 5178","line":"       *  @return  Index of start of first occurrence."},
{"lineNum":" 5179","line":"       *"},
{"lineNum":" 5180","line":"       *  Starting from @a __pos, searches forward for the value of @a"},
{"lineNum":" 5181","line":"       *  __s within this string.  If found, returns the index where"},
{"lineNum":" 5182","line":"       *  it begins.  If not found, returns npos."},
{"lineNum":" 5183","line":"      */"},
{"lineNum":" 5184","line":"      size_type"},
{"lineNum":" 5185","line":"      find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 5186","line":"      {"},
{"lineNum":" 5187","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 5188","line":"\treturn this->find(__s, __pos, traits_type::length(__s));"},
{"lineNum":" 5189","line":"      }"},
{"lineNum":" 5190","line":""},
{"lineNum":" 5191","line":"      /**"},
{"lineNum":" 5192","line":"       *  @brief  Find position of a character."},
{"lineNum":" 5193","line":"       *  @param __c  Character to locate."},
{"lineNum":" 5194","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 5195","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 5196","line":"       *"},
{"lineNum":" 5197","line":"       *  Starting from @a __pos, searches forward for @a __c within"},
{"lineNum":" 5198","line":"       *  this string.  If found, returns the index where it was"},
{"lineNum":" 5199","line":"       *  found.  If not found, returns npos."},
{"lineNum":" 5200","line":"      */"},
{"lineNum":" 5201","line":"      size_type"},
{"lineNum":" 5202","line":"      find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 5203","line":""},
{"lineNum":" 5204","line":"#if __cplusplus > 201402L"},
{"lineNum":" 5205","line":"      /**"},
{"lineNum":" 5206","line":"       *  @brief  Find position of a string_view."},
{"lineNum":" 5207","line":"       *  @param __svt  The object convertible to string_view to locate."},
{"lineNum":" 5208","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 5209","line":"       *  @return  Index of start of first occurrence."},
{"lineNum":" 5210","line":"      */"},
{"lineNum":" 5211","line":"      template<typename _Tp>"},
{"lineNum":" 5212","line":"\t_If_sv<_Tp, size_type>"},
{"lineNum":" 5213","line":"\tfind(const _Tp& __svt, size_type __pos = 0) const"},
{"lineNum":" 5214","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 5215","line":"\t{"},
{"lineNum":" 5216","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 5217","line":"\t  return this->find(__sv.data(), __pos, __sv.size());"},
{"lineNum":" 5218","line":"\t}"},
{"lineNum":" 5219","line":"#endif // C++17"},
{"lineNum":" 5220","line":""},
{"lineNum":" 5221","line":"      /**"},
{"lineNum":" 5222","line":"       *  @brief  Find last position of a string."},
{"lineNum":" 5223","line":"       *  @param __str  String to locate."},
{"lineNum":" 5224","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 5225","line":"       *  @return  Index of start of last occurrence."},
{"lineNum":" 5226","line":"       *"},
{"lineNum":" 5227","line":"       *  Starting from @a __pos, searches backward for value of @a"},
{"lineNum":" 5228","line":"       *  __str within this string.  If found, returns the index where"},
{"lineNum":" 5229","line":"       *  it begins.  If not found, returns npos."},
{"lineNum":" 5230","line":"      */"},
{"lineNum":" 5231","line":"      size_type"},
{"lineNum":" 5232","line":"      rfind(const basic_string& __str, size_type __pos = npos) const"},
{"lineNum":" 5233","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 5234","line":"      { return this->rfind(__str.data(), __pos, __str.size()); }"},
{"lineNum":" 5235","line":""},
{"lineNum":" 5236","line":"      /**"},
{"lineNum":" 5237","line":"       *  @brief  Find last position of a C substring."},
{"lineNum":" 5238","line":"       *  @param __s  C string to locate."},
{"lineNum":" 5239","line":"       *  @param __pos  Index of character to search back from."},
{"lineNum":" 5240","line":"       *  @param __n  Number of characters from s to search for."},
{"lineNum":" 5241","line":"       *  @return  Index of start of last occurrence."},
{"lineNum":" 5242","line":"       *"},
{"lineNum":" 5243","line":"       *  Starting from @a __pos, searches backward for the first @a"},
{"lineNum":" 5244","line":"       *  __n characters in @a __s within this string.  If found,"},
{"lineNum":" 5245","line":"       *  returns the index where it begins.  If not found, returns"},
{"lineNum":" 5246","line":"       *  npos."},
{"lineNum":" 5247","line":"      */"},
{"lineNum":" 5248","line":"      size_type"},
{"lineNum":" 5249","line":"      rfind(const _CharT* __s, size_type __pos, size_type __n) const"},
{"lineNum":" 5250","line":"      _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 5251","line":""},
{"lineNum":" 5252","line":"      /**"},
{"lineNum":" 5253","line":"       *  @brief  Find last position of a C string."},
{"lineNum":" 5254","line":"       *  @param __s  C string to locate."},
{"lineNum":" 5255","line":"       *  @param __pos  Index of character to start search at (default end)."},
{"lineNum":" 5256","line":"       *  @return  Index of start of  last occurrence."},
{"lineNum":" 5257","line":"       *"},
{"lineNum":" 5258","line":"       *  Starting from @a __pos, searches backward for the value of"},
{"lineNum":" 5259","line":"       *  @a __s within this string.  If found, returns the index"},
{"lineNum":" 5260","line":"       *  where it begins.  If not found, returns npos."},
{"lineNum":" 5261","line":"      */"},
{"lineNum":" 5262","line":"      size_type"},
{"lineNum":" 5263","line":"      rfind(const _CharT* __s, size_type __pos = npos) const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 5264","line":"      {"},
{"lineNum":" 5265","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 5266","line":"\treturn this->rfind(__s, __pos, traits_type::length(__s));"},
{"lineNum":" 5267","line":"      }"},
{"lineNum":" 5268","line":""},
{"lineNum":" 5269","line":"      /**"},
{"lineNum":" 5270","line":"       *  @brief  Find last position of a character."},
{"lineNum":" 5271","line":"       *  @param __c  Character to locate."},
{"lineNum":" 5272","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 5273","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 5274","line":"       *"},
{"lineNum":" 5275","line":"       *  Starting from @a __pos, searches backward for @a __c within"},
{"lineNum":" 5276","line":"       *  this string.  If found, returns the index where it was"},
{"lineNum":" 5277","line":"       *  found.  If not found, returns npos."},
{"lineNum":" 5278","line":"      */"},
{"lineNum":" 5279","line":"      size_type"},
{"lineNum":" 5280","line":"      rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 5281","line":""},
{"lineNum":" 5282","line":"#if __cplusplus > 201402L"},
{"lineNum":" 5283","line":"      /**"},
{"lineNum":" 5284","line":"       *  @brief  Find last position of a string_view."},
{"lineNum":" 5285","line":"       *  @param __svt  The object convertible to string_view to locate."},
{"lineNum":" 5286","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 5287","line":"       *  @return  Index of start of last occurrence."},
{"lineNum":" 5288","line":"      */"},
{"lineNum":" 5289","line":"      template<typename _Tp>"},
{"lineNum":" 5290","line":"\t_If_sv<_Tp, size_type>"},
{"lineNum":" 5291","line":"\trfind(const _Tp& __svt, size_type __pos = npos) const"},
{"lineNum":" 5292","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 5293","line":"\t{"},
{"lineNum":" 5294","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 5295","line":"\t  return this->rfind(__sv.data(), __pos, __sv.size());"},
{"lineNum":" 5296","line":"\t}"},
{"lineNum":" 5297","line":"#endif // C++17"},
{"lineNum":" 5298","line":""},
{"lineNum":" 5299","line":"      /**"},
{"lineNum":" 5300","line":"       *  @brief  Find position of a character of string."},
{"lineNum":" 5301","line":"       *  @param __str  String containing characters to locate."},
{"lineNum":" 5302","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 5303","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 5304","line":"       *"},
{"lineNum":" 5305","line":"       *  Starting from @a __pos, searches forward for one of the"},
{"lineNum":" 5306","line":"       *  characters of @a __str within this string.  If found,"},
{"lineNum":" 5307","line":"       *  returns the index where it was found.  If not found, returns"},
{"lineNum":" 5308","line":"       *  npos."},
{"lineNum":" 5309","line":"      */"},
{"lineNum":" 5310","line":"      size_type"},
{"lineNum":" 5311","line":"      find_first_of(const basic_string& __str, size_type __pos = 0) const"},
{"lineNum":" 5312","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 5313","line":"      { return this->find_first_of(__str.data(), __pos, __str.size()); }"},
{"lineNum":" 5314","line":""},
{"lineNum":" 5315","line":"      /**"},
{"lineNum":" 5316","line":"       *  @brief  Find position of a character of C substring."},
{"lineNum":" 5317","line":"       *  @param __s  String containing characters to locate."},
{"lineNum":" 5318","line":"       *  @param __pos  Index of character to search from."},
{"lineNum":" 5319","line":"       *  @param __n  Number of characters from s to search for."},
{"lineNum":" 5320","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 5321","line":"       *"},
{"lineNum":" 5322","line":"       *  Starting from @a __pos, searches forward for one of the"},
{"lineNum":" 5323","line":"       *  first @a __n characters of @a __s within this string.  If"},
{"lineNum":" 5324","line":"       *  found, returns the index where it was found.  If not found,"},
{"lineNum":" 5325","line":"       *  returns npos."},
{"lineNum":" 5326","line":"      */"},
{"lineNum":" 5327","line":"      size_type"},
{"lineNum":" 5328","line":"      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const"},
{"lineNum":" 5329","line":"      _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 5330","line":""},
{"lineNum":" 5331","line":"      /**"},
{"lineNum":" 5332","line":"       *  @brief  Find position of a character of C string."},
{"lineNum":" 5333","line":"       *  @param __s  String containing characters to locate."},
{"lineNum":" 5334","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 5335","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 5336","line":"       *"},
{"lineNum":" 5337","line":"       *  Starting from @a __pos, searches forward for one of the"},
{"lineNum":" 5338","line":"       *  characters of @a __s within this string.  If found, returns"},
{"lineNum":" 5339","line":"       *  the index where it was found.  If not found, returns npos."},
{"lineNum":" 5340","line":"      */"},
{"lineNum":" 5341","line":"      size_type"},
{"lineNum":" 5342","line":"      find_first_of(const _CharT* __s, size_type __pos = 0) const"},
{"lineNum":" 5343","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 5344","line":"      {"},
{"lineNum":" 5345","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 5346","line":"\treturn this->find_first_of(__s, __pos, traits_type::length(__s));"},
{"lineNum":" 5347","line":"      }"},
{"lineNum":" 5348","line":""},
{"lineNum":" 5349","line":"      /**"},
{"lineNum":" 5350","line":"       *  @brief  Find position of a character."},
{"lineNum":" 5351","line":"       *  @param __c  Character to locate."},
{"lineNum":" 5352","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 5353","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 5354","line":"       *"},
{"lineNum":" 5355","line":"       *  Starting from @a __pos, searches forward for the character"},
{"lineNum":" 5356","line":"       *  @a __c within this string.  If found, returns the index"},
{"lineNum":" 5357","line":"       *  where it was found.  If not found, returns npos."},
{"lineNum":" 5358","line":"       *"},
{"lineNum":" 5359","line":"       *  Note: equivalent to find(__c, __pos)."},
{"lineNum":" 5360","line":"      */"},
{"lineNum":" 5361","line":"      size_type"},
{"lineNum":" 5362","line":"      find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 5363","line":"      { return this->find(__c, __pos); }"},
{"lineNum":" 5364","line":""},
{"lineNum":" 5365","line":"#if __cplusplus > 201402L"},
{"lineNum":" 5366","line":"      /**"},
{"lineNum":" 5367","line":"       *  @brief  Find position of a character of a string_view."},
{"lineNum":" 5368","line":"       *  @param __svt  An object convertible to string_view containing"},
{"lineNum":" 5369","line":"       *                characters to locate."},
{"lineNum":" 5370","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 5371","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 5372","line":"      */"},
{"lineNum":" 5373","line":"      template<typename _Tp>"},
{"lineNum":" 5374","line":"\t_If_sv<_Tp, size_type>"},
{"lineNum":" 5375","line":"\tfind_first_of(const _Tp& __svt, size_type __pos = 0) const"},
{"lineNum":" 5376","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 5377","line":"\t{"},
{"lineNum":" 5378","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 5379","line":"\t  return this->find_first_of(__sv.data(), __pos, __sv.size());"},
{"lineNum":" 5380","line":"\t}"},
{"lineNum":" 5381","line":"#endif // C++17"},
{"lineNum":" 5382","line":""},
{"lineNum":" 5383","line":"      /**"},
{"lineNum":" 5384","line":"       *  @brief  Find last position of a character of string."},
{"lineNum":" 5385","line":"       *  @param __str  String containing characters to locate."},
{"lineNum":" 5386","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 5387","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 5388","line":"       *"},
{"lineNum":" 5389","line":"       *  Starting from @a __pos, searches backward for one of the"},
{"lineNum":" 5390","line":"       *  characters of @a __str within this string.  If found,"},
{"lineNum":" 5391","line":"       *  returns the index where it was found.  If not found, returns"},
{"lineNum":" 5392","line":"       *  npos."},
{"lineNum":" 5393","line":"      */"},
{"lineNum":" 5394","line":"      size_type"},
{"lineNum":" 5395","line":"      find_last_of(const basic_string& __str, size_type __pos = npos) const"},
{"lineNum":" 5396","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 5397","line":"      { return this->find_last_of(__str.data(), __pos, __str.size()); }"},
{"lineNum":" 5398","line":""},
{"lineNum":" 5399","line":"      /**"},
{"lineNum":" 5400","line":"       *  @brief  Find last position of a character of C substring."},
{"lineNum":" 5401","line":"       *  @param __s  C string containing characters to locate."},
{"lineNum":" 5402","line":"       *  @param __pos  Index of character to search back from."},
{"lineNum":" 5403","line":"       *  @param __n  Number of characters from s to search for."},
{"lineNum":" 5404","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 5405","line":"       *"},
{"lineNum":" 5406","line":"       *  Starting from @a __pos, searches backward for one of the"},
{"lineNum":" 5407","line":"       *  first @a __n characters of @a __s within this string.  If"},
{"lineNum":" 5408","line":"       *  found, returns the index where it was found.  If not found,"},
{"lineNum":" 5409","line":"       *  returns npos."},
{"lineNum":" 5410","line":"      */"},
{"lineNum":" 5411","line":"      size_type"},
{"lineNum":" 5412","line":"      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const"},
{"lineNum":" 5413","line":"      _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 5414","line":""},
{"lineNum":" 5415","line":"      /**"},
{"lineNum":" 5416","line":"       *  @brief  Find last position of a character of C string."},
{"lineNum":" 5417","line":"       *  @param __s  C string containing characters to locate."},
{"lineNum":" 5418","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 5419","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 5420","line":"       *"},
{"lineNum":" 5421","line":"       *  Starting from @a __pos, searches backward for one of the"},
{"lineNum":" 5422","line":"       *  characters of @a __s within this string.  If found, returns"},
{"lineNum":" 5423","line":"       *  the index where it was found.  If not found, returns npos."},
{"lineNum":" 5424","line":"      */"},
{"lineNum":" 5425","line":"      size_type"},
{"lineNum":" 5426","line":"      find_last_of(const _CharT* __s, size_type __pos = npos) const"},
{"lineNum":" 5427","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 5428","line":"      {"},
{"lineNum":" 5429","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 5430","line":"\treturn this->find_last_of(__s, __pos, traits_type::length(__s));"},
{"lineNum":" 5431","line":"      }"},
{"lineNum":" 5432","line":""},
{"lineNum":" 5433","line":"      /**"},
{"lineNum":" 5434","line":"       *  @brief  Find last position of a character."},
{"lineNum":" 5435","line":"       *  @param __c  Character to locate."},
{"lineNum":" 5436","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 5437","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 5438","line":"       *"},
{"lineNum":" 5439","line":"       *  Starting from @a __pos, searches backward for @a __c within"},
{"lineNum":" 5440","line":"       *  this string.  If found, returns the index where it was"},
{"lineNum":" 5441","line":"       *  found.  If not found, returns npos."},
{"lineNum":" 5442","line":"       *"},
{"lineNum":" 5443","line":"       *  Note: equivalent to rfind(__c, __pos)."},
{"lineNum":" 5444","line":"      */"},
{"lineNum":" 5445","line":"      size_type"},
{"lineNum":" 5446","line":"      find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 5447","line":"      { return this->rfind(__c, __pos); }"},
{"lineNum":" 5448","line":""},
{"lineNum":" 5449","line":"#if __cplusplus > 201402L"},
{"lineNum":" 5450","line":"      /**"},
{"lineNum":" 5451","line":"       *  @brief  Find last position of a character of string."},
{"lineNum":" 5452","line":"       *  @param __svt  An object convertible to string_view containing"},
{"lineNum":" 5453","line":"       *                characters to locate."},
{"lineNum":" 5454","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 5455","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 5456","line":"      */"},
{"lineNum":" 5457","line":"      template<typename _Tp>"},
{"lineNum":" 5458","line":"\t_If_sv<_Tp, size_type>"},
{"lineNum":" 5459","line":"\tfind_last_of(const _Tp& __svt, size_type __pos = npos) const"},
{"lineNum":" 5460","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 5461","line":"\t{"},
{"lineNum":" 5462","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 5463","line":"\t  return this->find_last_of(__sv.data(), __pos, __sv.size());"},
{"lineNum":" 5464","line":"\t}"},
{"lineNum":" 5465","line":"#endif // C++17"},
{"lineNum":" 5466","line":""},
{"lineNum":" 5467","line":"      /**"},
{"lineNum":" 5468","line":"       *  @brief  Find position of a character not in string."},
{"lineNum":" 5469","line":"       *  @param __str  String containing characters to avoid."},
{"lineNum":" 5470","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 5471","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 5472","line":"       *"},
{"lineNum":" 5473","line":"       *  Starting from @a __pos, searches forward for a character not contained"},
{"lineNum":" 5474","line":"       *  in @a __str within this string.  If found, returns the index where it"},
{"lineNum":" 5475","line":"       *  was found.  If not found, returns npos."},
{"lineNum":" 5476","line":"      */"},
{"lineNum":" 5477","line":"      size_type"},
{"lineNum":" 5478","line":"      find_first_not_of(const basic_string& __str, size_type __pos = 0) const"},
{"lineNum":" 5479","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 5480","line":"      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }"},
{"lineNum":" 5481","line":""},
{"lineNum":" 5482","line":"      /**"},
{"lineNum":" 5483","line":"       *  @brief  Find position of a character not in C substring."},
{"lineNum":" 5484","line":"       *  @param __s  C string containing characters to avoid."},
{"lineNum":" 5485","line":"       *  @param __pos  Index of character to search from."},
{"lineNum":" 5486","line":"       *  @param __n  Number of characters from __s to consider."},
{"lineNum":" 5487","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 5488","line":"       *"},
{"lineNum":" 5489","line":"       *  Starting from @a __pos, searches forward for a character not"},
{"lineNum":" 5490","line":"       *  contained in the first @a __n characters of @a __s within"},
{"lineNum":" 5491","line":"       *  this string.  If found, returns the index where it was"},
{"lineNum":" 5492","line":"       *  found.  If not found, returns npos."},
{"lineNum":" 5493","line":"      */"},
{"lineNum":" 5494","line":"      size_type"},
{"lineNum":" 5495","line":"      find_first_not_of(const _CharT* __s, size_type __pos,"},
{"lineNum":" 5496","line":"\t\t\tsize_type __n) const _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 5497","line":""},
{"lineNum":" 5498","line":"      /**"},
{"lineNum":" 5499","line":"       *  @brief  Find position of a character not in C string."},
{"lineNum":" 5500","line":"       *  @param __s  C string containing characters to avoid."},
{"lineNum":" 5501","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 5502","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 5503","line":"       *"},
{"lineNum":" 5504","line":"       *  Starting from @a __pos, searches forward for a character not"},
{"lineNum":" 5505","line":"       *  contained in @a __s within this string.  If found, returns"},
{"lineNum":" 5506","line":"       *  the index where it was found.  If not found, returns npos."},
{"lineNum":" 5507","line":"      */"},
{"lineNum":" 5508","line":"      size_type"},
{"lineNum":" 5509","line":"      find_first_not_of(const _CharT* __s, size_type __pos = 0) const"},
{"lineNum":" 5510","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 5511","line":"      {"},
{"lineNum":" 5512","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 5513","line":"\treturn this->find_first_not_of(__s, __pos, traits_type::length(__s));"},
{"lineNum":" 5514","line":"      }"},
{"lineNum":" 5515","line":""},
{"lineNum":" 5516","line":"      /**"},
{"lineNum":" 5517","line":"       *  @brief  Find position of a different character."},
{"lineNum":" 5518","line":"       *  @param __c  Character to avoid."},
{"lineNum":" 5519","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 5520","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 5521","line":"       *"},
{"lineNum":" 5522","line":"       *  Starting from @a __pos, searches forward for a character"},
{"lineNum":" 5523","line":"       *  other than @a __c within this string.  If found, returns the"},
{"lineNum":" 5524","line":"       *  index where it was found.  If not found, returns npos."},
{"lineNum":" 5525","line":"      */"},
{"lineNum":" 5526","line":"      size_type"},
{"lineNum":" 5527","line":"      find_first_not_of(_CharT __c, size_type __pos = 0) const"},
{"lineNum":" 5528","line":"      _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 5529","line":""},
{"lineNum":" 5530","line":"#if __cplusplus > 201402L"},
{"lineNum":" 5531","line":"      /**"},
{"lineNum":" 5532","line":"       *  @brief  Find position of a character not in a string_view."},
{"lineNum":" 5533","line":"       *  @param __svt  An object convertible to string_view containing"},
{"lineNum":" 5534","line":"       *                characters to avoid."},
{"lineNum":" 5535","line":"       *  @param __pos  Index of character to search from (default 0)."},
{"lineNum":" 5536","line":"       *  @return  Index of first occurrence."},
{"lineNum":" 5537","line":"       */"},
{"lineNum":" 5538","line":"      template<typename _Tp>"},
{"lineNum":" 5539","line":"\t_If_sv<_Tp, size_type>"},
{"lineNum":" 5540","line":"\tfind_first_not_of(const _Tp& __svt, size_type __pos = 0) const"},
{"lineNum":" 5541","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 5542","line":"\t{"},
{"lineNum":" 5543","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 5544","line":"\t  return this->find_first_not_of(__sv.data(), __pos, __sv.size());"},
{"lineNum":" 5545","line":"\t}"},
{"lineNum":" 5546","line":"#endif // C++17"},
{"lineNum":" 5547","line":""},
{"lineNum":" 5548","line":"      /**"},
{"lineNum":" 5549","line":"       *  @brief  Find last position of a character not in string."},
{"lineNum":" 5550","line":"       *  @param __str  String containing characters to avoid."},
{"lineNum":" 5551","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 5552","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 5553","line":"       *"},
{"lineNum":" 5554","line":"       *  Starting from @a __pos, searches backward for a character"},
{"lineNum":" 5555","line":"       *  not contained in @a __str within this string.  If found,"},
{"lineNum":" 5556","line":"       *  returns the index where it was found.  If not found, returns"},
{"lineNum":" 5557","line":"       *  npos."},
{"lineNum":" 5558","line":"      */"},
{"lineNum":" 5559","line":"      size_type"},
{"lineNum":" 5560","line":"      find_last_not_of(const basic_string& __str, size_type __pos = npos) const"},
{"lineNum":" 5561","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 5562","line":"      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }"},
{"lineNum":" 5563","line":""},
{"lineNum":" 5564","line":"      /**"},
{"lineNum":" 5565","line":"       *  @brief  Find last position of a character not in C substring."},
{"lineNum":" 5566","line":"       *  @param __s  C string containing characters to avoid."},
{"lineNum":" 5567","line":"       *  @param __pos  Index of character to search back from."},
{"lineNum":" 5568","line":"       *  @param __n  Number of characters from s to consider."},
{"lineNum":" 5569","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 5570","line":"       *"},
{"lineNum":" 5571","line":"       *  Starting from @a __pos, searches backward for a character not"},
{"lineNum":" 5572","line":"       *  contained in the first @a __n characters of @a __s within this string."},
{"lineNum":" 5573","line":"       *  If found, returns the index where it was found.  If not found,"},
{"lineNum":" 5574","line":"       *  returns npos."},
{"lineNum":" 5575","line":"      */"},
{"lineNum":" 5576","line":"      size_type"},
{"lineNum":" 5577","line":"      find_last_not_of(const _CharT* __s, size_type __pos,"},
{"lineNum":" 5578","line":"\t\t       size_type __n) const _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 5579","line":"      /**"},
{"lineNum":" 5580","line":"       *  @brief  Find last position of a character not in C string."},
{"lineNum":" 5581","line":"       *  @param __s  C string containing characters to avoid."},
{"lineNum":" 5582","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 5583","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 5584","line":"       *"},
{"lineNum":" 5585","line":"       *  Starting from @a __pos, searches backward for a character"},
{"lineNum":" 5586","line":"       *  not contained in @a __s within this string.  If found,"},
{"lineNum":" 5587","line":"       *  returns the index where it was found.  If not found, returns"},
{"lineNum":" 5588","line":"       *  npos."},
{"lineNum":" 5589","line":"      */"},
{"lineNum":" 5590","line":"      size_type"},
{"lineNum":" 5591","line":"      find_last_not_of(const _CharT* __s, size_type __pos = npos) const"},
{"lineNum":" 5592","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":" 5593","line":"      {"},
{"lineNum":" 5594","line":"\t__glibcxx_requires_string(__s);"},
{"lineNum":" 5595","line":"\treturn this->find_last_not_of(__s, __pos, traits_type::length(__s));"},
{"lineNum":" 5596","line":"      }"},
{"lineNum":" 5597","line":""},
{"lineNum":" 5598","line":"      /**"},
{"lineNum":" 5599","line":"       *  @brief  Find last position of a different character."},
{"lineNum":" 5600","line":"       *  @param __c  Character to avoid."},
{"lineNum":" 5601","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 5602","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 5603","line":"       *"},
{"lineNum":" 5604","line":"       *  Starting from @a __pos, searches backward for a character other than"},
{"lineNum":" 5605","line":"       *  @a __c within this string.  If found, returns the index where it was"},
{"lineNum":" 5606","line":"       *  found.  If not found, returns npos."},
{"lineNum":" 5607","line":"      */"},
{"lineNum":" 5608","line":"      size_type"},
{"lineNum":" 5609","line":"      find_last_not_of(_CharT __c, size_type __pos = npos) const"},
{"lineNum":" 5610","line":"      _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 5611","line":""},
{"lineNum":" 5612","line":"#if __cplusplus > 201402L"},
{"lineNum":" 5613","line":"      /**"},
{"lineNum":" 5614","line":"       *  @brief  Find last position of a character not in a string_view."},
{"lineNum":" 5615","line":"       *  @param __svt  An object convertible to string_view containing"},
{"lineNum":" 5616","line":"       *                characters to avoid."},
{"lineNum":" 5617","line":"       *  @param __pos  Index of character to search back from (default end)."},
{"lineNum":" 5618","line":"       *  @return  Index of last occurrence."},
{"lineNum":" 5619","line":"       */"},
{"lineNum":" 5620","line":"      template<typename _Tp>"},
{"lineNum":" 5621","line":"\t_If_sv<_Tp, size_type>"},
{"lineNum":" 5622","line":"\tfind_last_not_of(const _Tp& __svt, size_type __pos = npos) const"},
{"lineNum":" 5623","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 5624","line":"\t{"},
{"lineNum":" 5625","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 5626","line":"\t  return this->find_last_not_of(__sv.data(), __pos, __sv.size());"},
{"lineNum":" 5627","line":"\t}"},
{"lineNum":" 5628","line":"#endif // C++17"},
{"lineNum":" 5629","line":""},
{"lineNum":" 5630","line":"      /**"},
{"lineNum":" 5631","line":"       *  @brief  Get a substring."},
{"lineNum":" 5632","line":"       *  @param __pos  Index of first character (default 0)."},
{"lineNum":" 5633","line":"       *  @param __n  Number of characters in substring (default remainder)."},
{"lineNum":" 5634","line":"       *  @return  The new string."},
{"lineNum":" 5635","line":"       *  @throw  std::out_of_range  If __pos > size()."},
{"lineNum":" 5636","line":"       *"},
{"lineNum":" 5637","line":"       *  Construct and return a new string using the @a __n"},
{"lineNum":" 5638","line":"       *  characters starting at @a __pos.  If the string is too"},
{"lineNum":" 5639","line":"       *  short, use the remainder of the characters.  If @a __pos is"},
{"lineNum":" 5640","line":"       *  beyond the end of the string, out_of_range is thrown."},
{"lineNum":" 5641","line":"      */"},
{"lineNum":" 5642","line":"      basic_string"},
{"lineNum":" 5643","line":"      substr(size_type __pos = 0, size_type __n = npos) const"},
{"lineNum":" 5644","line":"      { return basic_string(*this,"},
{"lineNum":" 5645","line":"\t\t\t    _M_check(__pos, \"basic_string::substr\"), __n); }"},
{"lineNum":" 5646","line":""},
{"lineNum":" 5647","line":"      /**"},
{"lineNum":" 5648","line":"       *  @brief  Compare to a string."},
{"lineNum":" 5649","line":"       *  @param __str  String to compare against."},
{"lineNum":" 5650","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 5651","line":"       *"},
{"lineNum":" 5652","line":"       *  Returns an integer < 0 if this string is ordered before @a"},
{"lineNum":" 5653","line":"       *  __str, 0 if their values are equivalent, or > 0 if this"},
{"lineNum":" 5654","line":"       *  string is ordered after @a __str.  Determines the effective"},
{"lineNum":" 5655","line":"       *  length rlen of the strings to compare as the smallest of"},
{"lineNum":" 5656","line":"       *  size() and str.size().  The function then compares the two"},
{"lineNum":" 5657","line":"       *  strings by calling traits::compare(data(), str.data(),rlen)."},
{"lineNum":" 5658","line":"       *  If the result of the comparison is nonzero returns it,"},
{"lineNum":" 5659","line":"       *  otherwise the shorter one is ordered first."},
{"lineNum":" 5660","line":"      */"},
{"lineNum":" 5661","line":"      int"},
{"lineNum":" 5662","line":"      compare(const basic_string& __str) const"},
{"lineNum":" 5663","line":"      {"},
{"lineNum":" 5664","line":"\tconst size_type __size = this->size();"},
{"lineNum":" 5665","line":"\tconst size_type __osize = __str.size();"},
{"lineNum":" 5666","line":"\tconst size_type __len = std::min(__size, __osize);"},
{"lineNum":" 5667","line":""},
{"lineNum":" 5668","line":"\tint __r = traits_type::compare(_M_data(), __str.data(), __len);"},
{"lineNum":" 5669","line":"\tif (!__r)"},
{"lineNum":" 5670","line":"\t  __r = _S_compare(__size, __osize);"},
{"lineNum":" 5671","line":"\treturn __r;"},
{"lineNum":" 5672","line":"      }"},
{"lineNum":" 5673","line":""},
{"lineNum":" 5674","line":"#if __cplusplus > 201402L"},
{"lineNum":" 5675","line":"      /**"},
{"lineNum":" 5676","line":"       *  @brief  Compare to a string_view."},
{"lineNum":" 5677","line":"       *  @param __svt An object convertible to string_view to compare against."},
{"lineNum":" 5678","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 5679","line":"       */"},
{"lineNum":" 5680","line":"      template<typename _Tp>"},
{"lineNum":" 5681","line":"\t_If_sv<_Tp, int>"},
{"lineNum":" 5682","line":"\tcompare(const _Tp& __svt) const"},
{"lineNum":" 5683","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 5684","line":"\t{"},
{"lineNum":" 5685","line":"\t   __sv_type __sv = __svt;"},
{"lineNum":" 5686","line":"\t  const size_type __size = this->size();"},
{"lineNum":" 5687","line":"\t  const size_type __osize = __sv.size();"},
{"lineNum":" 5688","line":"\t  const size_type __len = std::min(__size, __osize);"},
{"lineNum":" 5689","line":""},
{"lineNum":" 5690","line":"\t  int __r = traits_type::compare(_M_data(), __sv.data(), __len);"},
{"lineNum":" 5691","line":"\t  if (!__r)"},
{"lineNum":" 5692","line":"\t    __r = _S_compare(__size, __osize);"},
{"lineNum":" 5693","line":"\t  return __r;"},
{"lineNum":" 5694","line":"\t}"},
{"lineNum":" 5695","line":""},
{"lineNum":" 5696","line":"      /**"},
{"lineNum":" 5697","line":"       *  @brief  Compare to a string_view."},
{"lineNum":" 5698","line":"       *  @param __pos  A position in the string to start comparing from."},
{"lineNum":" 5699","line":"       *  @param __n  The number of characters to compare."},
{"lineNum":" 5700","line":"       *  @param __svt  An object convertible to string_view to compare"},
{"lineNum":" 5701","line":"       *                against."},
{"lineNum":" 5702","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 5703","line":"       */"},
{"lineNum":" 5704","line":"      template<typename _Tp>"},
{"lineNum":" 5705","line":"\t_If_sv<_Tp, int>"},
{"lineNum":" 5706","line":"\tcompare(size_type __pos, size_type __n, const _Tp& __svt) const"},
{"lineNum":" 5707","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 5708","line":"\t{"},
{"lineNum":" 5709","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 5710","line":"\t  return __sv_type(*this).substr(__pos, __n).compare(__sv);"},
{"lineNum":" 5711","line":"\t}"},
{"lineNum":" 5712","line":""},
{"lineNum":" 5713","line":"      /**"},
{"lineNum":" 5714","line":"       *  @brief  Compare to a string_view."},
{"lineNum":" 5715","line":"       *  @param __pos1  A position in the string to start comparing from."},
{"lineNum":" 5716","line":"       *  @param __n1  The number of characters to compare."},
{"lineNum":" 5717","line":"       *  @param __svt   An object convertible to string_view to compare"},
{"lineNum":" 5718","line":"       *                 against."},
{"lineNum":" 5719","line":"       *  @param __pos2  A position in the string_view to start comparing from."},
{"lineNum":" 5720","line":"       *  @param __n2  The number of characters to compare."},
{"lineNum":" 5721","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 5722","line":"       */"},
{"lineNum":" 5723","line":"      template<typename _Tp>"},
{"lineNum":" 5724","line":"\t_If_sv<_Tp, int>"},
{"lineNum":" 5725","line":"\tcompare(size_type __pos1, size_type __n1, const _Tp& __svt,"},
{"lineNum":" 5726","line":"\t\tsize_type __pos2, size_type __n2 = npos) const"},
{"lineNum":" 5727","line":"\tnoexcept(is_same<_Tp, __sv_type>::value)"},
{"lineNum":" 5728","line":"\t{"},
{"lineNum":" 5729","line":"\t  __sv_type __sv = __svt;"},
{"lineNum":" 5730","line":"\t  return __sv_type(*this)"},
{"lineNum":" 5731","line":"\t    .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));"},
{"lineNum":" 5732","line":"\t}"},
{"lineNum":" 5733","line":"#endif // C++17"},
{"lineNum":" 5734","line":""},
{"lineNum":" 5735","line":"      /**"},
{"lineNum":" 5736","line":"       *  @brief  Compare substring to a string."},
{"lineNum":" 5737","line":"       *  @param __pos  Index of first character of substring."},
{"lineNum":" 5738","line":"       *  @param __n  Number of characters in substring."},
{"lineNum":" 5739","line":"       *  @param __str  String to compare against."},
{"lineNum":" 5740","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 5741","line":"       *"},
{"lineNum":" 5742","line":"       *  Form the substring of this string from the @a __n characters"},
{"lineNum":" 5743","line":"       *  starting at @a __pos.  Returns an integer < 0 if the"},
{"lineNum":" 5744","line":"       *  substring is ordered before @a __str, 0 if their values are"},
{"lineNum":" 5745","line":"       *  equivalent, or > 0 if the substring is ordered after @a"},
{"lineNum":" 5746","line":"       *  __str.  Determines the effective length rlen of the strings"},
{"lineNum":" 5747","line":"       *  to compare as the smallest of the length of the substring"},
{"lineNum":" 5748","line":"       *  and @a __str.size().  The function then compares the two"},
{"lineNum":" 5749","line":"       *  strings by calling"},
{"lineNum":" 5750","line":"       *  traits::compare(substring.data(),str.data(),rlen).  If the"},
{"lineNum":" 5751","line":"       *  result of the comparison is nonzero returns it, otherwise"},
{"lineNum":" 5752","line":"       *  the shorter one is ordered first."},
{"lineNum":" 5753","line":"      */"},
{"lineNum":" 5754","line":"      int"},
{"lineNum":" 5755","line":"      compare(size_type __pos, size_type __n, const basic_string& __str) const;"},
{"lineNum":" 5756","line":""},
{"lineNum":" 5757","line":"      /**"},
{"lineNum":" 5758","line":"       *  @brief  Compare substring to a substring."},
{"lineNum":" 5759","line":"       *  @param __pos1  Index of first character of substring."},
{"lineNum":" 5760","line":"       *  @param __n1  Number of characters in substring."},
{"lineNum":" 5761","line":"       *  @param __str  String to compare against."},
{"lineNum":" 5762","line":"       *  @param __pos2  Index of first character of substring of str."},
{"lineNum":" 5763","line":"       *  @param __n2  Number of characters in substring of str."},
{"lineNum":" 5764","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 5765","line":"       *"},
{"lineNum":" 5766","line":"       *  Form the substring of this string from the @a __n1"},
{"lineNum":" 5767","line":"       *  characters starting at @a __pos1.  Form the substring of @a"},
{"lineNum":" 5768","line":"       *  __str from the @a __n2 characters starting at @a __pos2."},
{"lineNum":" 5769","line":"       *  Returns an integer < 0 if this substring is ordered before"},
{"lineNum":" 5770","line":"       *  the substring of @a __str, 0 if their values are equivalent,"},
{"lineNum":" 5771","line":"       *  or > 0 if this substring is ordered after the substring of"},
{"lineNum":" 5772","line":"       *  @a __str.  Determines the effective length rlen of the"},
{"lineNum":" 5773","line":"       *  strings to compare as the smallest of the lengths of the"},
{"lineNum":" 5774","line":"       *  substrings.  The function then compares the two strings by"},
{"lineNum":" 5775","line":"       *  calling"},
{"lineNum":" 5776","line":"       *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen)."},
{"lineNum":" 5777","line":"       *  If the result of the comparison is nonzero returns it,"},
{"lineNum":" 5778","line":"       *  otherwise the shorter one is ordered first."},
{"lineNum":" 5779","line":"      */"},
{"lineNum":" 5780","line":"      int"},
{"lineNum":" 5781","line":"      compare(size_type __pos1, size_type __n1, const basic_string& __str,"},
{"lineNum":" 5782","line":"\t      size_type __pos2, size_type __n2) const;"},
{"lineNum":" 5783","line":""},
{"lineNum":" 5784","line":"      /**"},
{"lineNum":" 5785","line":"       *  @brief  Compare to a C string."},
{"lineNum":" 5786","line":"       *  @param __s  C string to compare against."},
{"lineNum":" 5787","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 5788","line":"       *"},
{"lineNum":" 5789","line":"       *  Returns an integer < 0 if this string is ordered before @a __s, 0 if"},
{"lineNum":" 5790","line":"       *  their values are equivalent, or > 0 if this string is ordered after"},
{"lineNum":" 5791","line":"       *  @a __s.  Determines the effective length rlen of the strings to"},
{"lineNum":" 5792","line":"       *  compare as the smallest of size() and the length of a string"},
{"lineNum":" 5793","line":"       *  constructed from @a __s.  The function then compares the two strings"},
{"lineNum":" 5794","line":"       *  by calling traits::compare(data(),s,rlen).  If the result of the"},
{"lineNum":" 5795","line":"       *  comparison is nonzero returns it, otherwise the shorter one is"},
{"lineNum":" 5796","line":"       *  ordered first."},
{"lineNum":" 5797","line":"      */"},
{"lineNum":" 5798","line":"      int"},
{"lineNum":" 5799","line":"      compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;"},
{"lineNum":" 5800","line":""},
{"lineNum":" 5801","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":" 5802","line":"      // 5 String::compare specification questionable"},
{"lineNum":" 5803","line":"      /**"},
{"lineNum":" 5804","line":"       *  @brief  Compare substring to a C string."},
{"lineNum":" 5805","line":"       *  @param __pos  Index of first character of substring."},
{"lineNum":" 5806","line":"       *  @param __n1  Number of characters in substring."},
{"lineNum":" 5807","line":"       *  @param __s  C string to compare against."},
{"lineNum":" 5808","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 5809","line":"       *"},
{"lineNum":" 5810","line":"       *  Form the substring of this string from the @a __n1"},
{"lineNum":" 5811","line":"       *  characters starting at @a pos.  Returns an integer < 0 if"},
{"lineNum":" 5812","line":"       *  the substring is ordered before @a __s, 0 if their values"},
{"lineNum":" 5813","line":"       *  are equivalent, or > 0 if the substring is ordered after @a"},
{"lineNum":" 5814","line":"       *  __s.  Determines the effective length rlen of the strings to"},
{"lineNum":" 5815","line":"       *  compare as the smallest of the length of the substring and"},
{"lineNum":" 5816","line":"       *  the length of a string constructed from @a __s.  The"},
{"lineNum":" 5817","line":"       *  function then compares the two string by calling"},
{"lineNum":" 5818","line":"       *  traits::compare(substring.data(),__s,rlen).  If the result of"},
{"lineNum":" 5819","line":"       *  the comparison is nonzero returns it, otherwise the shorter"},
{"lineNum":" 5820","line":"       *  one is ordered first."},
{"lineNum":" 5821","line":"      */"},
{"lineNum":" 5822","line":"      int"},
{"lineNum":" 5823","line":"      compare(size_type __pos, size_type __n1, const _CharT* __s) const;"},
{"lineNum":" 5824","line":""},
{"lineNum":" 5825","line":"      /**"},
{"lineNum":" 5826","line":"       *  @brief  Compare substring against a character %array."},
{"lineNum":" 5827","line":"       *  @param __pos  Index of first character of substring."},
{"lineNum":" 5828","line":"       *  @param __n1  Number of characters in substring."},
{"lineNum":" 5829","line":"       *  @param __s  character %array to compare against."},
{"lineNum":" 5830","line":"       *  @param __n2  Number of characters of s."},
{"lineNum":" 5831","line":"       *  @return  Integer < 0, 0, or > 0."},
{"lineNum":" 5832","line":"       *"},
{"lineNum":" 5833","line":"       *  Form the substring of this string from the @a __n1"},
{"lineNum":" 5834","line":"       *  characters starting at @a __pos.  Form a string from the"},
{"lineNum":" 5835","line":"       *  first @a __n2 characters of @a __s.  Returns an integer < 0"},
{"lineNum":" 5836","line":"       *  if this substring is ordered before the string from @a __s,"},
{"lineNum":" 5837","line":"       *  0 if their values are equivalent, or > 0 if this substring"},
{"lineNum":" 5838","line":"       *  is ordered after the string from @a __s.  Determines the"},
{"lineNum":" 5839","line":"       *  effective length rlen of the strings to compare as the"},
{"lineNum":" 5840","line":"       *  smallest of the length of the substring and @a __n2.  The"},
{"lineNum":" 5841","line":"       *  function then compares the two strings by calling"},
{"lineNum":" 5842","line":"       *  traits::compare(substring.data(),s,rlen).  If the result of"},
{"lineNum":" 5843","line":"       *  the comparison is nonzero returns it, otherwise the shorter"},
{"lineNum":" 5844","line":"       *  one is ordered first."},
{"lineNum":" 5845","line":"       *"},
{"lineNum":" 5846","line":"       *  NB: s must have at least n2 characters, &apos;\\\\0&apos; has"},
{"lineNum":" 5847","line":"       *  no special meaning."},
{"lineNum":" 5848","line":"      */"},
{"lineNum":" 5849","line":"      int"},
{"lineNum":" 5850","line":"      compare(size_type __pos, size_type __n1, const _CharT* __s,"},
{"lineNum":" 5851","line":"\t      size_type __n2) const;"},
{"lineNum":" 5852","line":""},
{"lineNum":" 5853","line":"# ifdef _GLIBCXX_TM_TS_INTERNAL"},
{"lineNum":" 5854","line":"      friend void"},
{"lineNum":" 5855","line":"      ::_txnal_cow_string_C1_for_exceptions(void* that, const char* s,"},
{"lineNum":" 5856","line":"\t\t\t\t\t    void* exc);"},
{"lineNum":" 5857","line":"      friend const char*"},
{"lineNum":" 5858","line":"      ::_txnal_cow_string_c_str(const void *that);"},
{"lineNum":" 5859","line":"      friend void"},
{"lineNum":" 5860","line":"      ::_txnal_cow_string_D1(void *that);"},
{"lineNum":" 5861","line":"      friend void"},
{"lineNum":" 5862","line":"      ::_txnal_cow_string_D1_commit(void *that);"},
{"lineNum":" 5863","line":"# endif"},
{"lineNum":" 5864","line":"  };"},
{"lineNum":" 5865","line":"#endif  // !_GLIBCXX_USE_CXX11_ABI"},
{"lineNum":" 5866","line":""},
{"lineNum":" 5867","line":"  // operator+"},
{"lineNum":" 5868","line":"  /**"},
{"lineNum":" 5869","line":"   *  @brief  Concatenate two strings."},
{"lineNum":" 5870","line":"   *  @param __lhs  First string."},
{"lineNum":" 5871","line":"   *  @param __rhs  Last string."},
{"lineNum":" 5872","line":"   *  @return  New string with value of @a __lhs followed by @a __rhs."},
{"lineNum":" 5873","line":"   */"},
{"lineNum":" 5874","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 5875","line":"    basic_string<_CharT, _Traits, _Alloc>"},
{"lineNum":" 5876","line":"    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,"},
{"lineNum":" 5877","line":"\t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)"},
{"lineNum":" 5878","line":"    {"},
{"lineNum":" 5879","line":"      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);"},
{"lineNum":" 5880","line":"      __str.append(__rhs);"},
{"lineNum":" 5881","line":"      return __str;"},
{"lineNum":" 5882","line":"    }"},
{"lineNum":" 5883","line":""},
{"lineNum":" 5884","line":"  /**"},
{"lineNum":" 5885","line":"   *  @brief  Concatenate C string and string."},
{"lineNum":" 5886","line":"   *  @param __lhs  First string."},
{"lineNum":" 5887","line":"   *  @param __rhs  Last string."},
{"lineNum":" 5888","line":"   *  @return  New string with value of @a __lhs followed by @a __rhs."},
{"lineNum":" 5889","line":"   */"},
{"lineNum":" 5890","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 5891","line":"    basic_string<_CharT,_Traits,_Alloc>"},
{"lineNum":" 5892","line":"    operator+(const _CharT* __lhs,"},
{"lineNum":" 5893","line":"\t      const basic_string<_CharT,_Traits,_Alloc>& __rhs);"},
{"lineNum":" 5894","line":""},
{"lineNum":" 5895","line":"  /**"},
{"lineNum":" 5896","line":"   *  @brief  Concatenate character and string."},
{"lineNum":" 5897","line":"   *  @param __lhs  First string."},
{"lineNum":" 5898","line":"   *  @param __rhs  Last string."},
{"lineNum":" 5899","line":"   *  @return  New string with @a __lhs followed by @a __rhs."},
{"lineNum":" 5900","line":"   */"},
{"lineNum":" 5901","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 5902","line":"    basic_string<_CharT,_Traits,_Alloc>"},
{"lineNum":" 5903","line":"    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);"},
{"lineNum":" 5904","line":""},
{"lineNum":" 5905","line":"  /**"},
{"lineNum":" 5906","line":"   *  @brief  Concatenate string and C string."},
{"lineNum":" 5907","line":"   *  @param __lhs  First string."},
{"lineNum":" 5908","line":"   *  @param __rhs  Last string."},
{"lineNum":" 5909","line":"   *  @return  New string with @a __lhs followed by @a __rhs."},
{"lineNum":" 5910","line":"   */"},
{"lineNum":" 5911","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 5912","line":"    inline basic_string<_CharT, _Traits, _Alloc>"},
{"lineNum":" 5913","line":"    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,"},
{"lineNum":" 5914","line":"\t      const _CharT* __rhs)"},
{"lineNum":" 5915","line":"    {"},
{"lineNum":" 5916","line":"      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);"},
{"lineNum":" 5917","line":"      __str.append(__rhs);"},
{"lineNum":" 5918","line":"      return __str;"},
{"lineNum":" 5919","line":"    }"},
{"lineNum":" 5920","line":""},
{"lineNum":" 5921","line":"  /**"},
{"lineNum":" 5922","line":"   *  @brief  Concatenate string and character."},
{"lineNum":" 5923","line":"   *  @param __lhs  First string."},
{"lineNum":" 5924","line":"   *  @param __rhs  Last string."},
{"lineNum":" 5925","line":"   *  @return  New string with @a __lhs followed by @a __rhs."},
{"lineNum":" 5926","line":"   */"},
{"lineNum":" 5927","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 5928","line":"    inline basic_string<_CharT, _Traits, _Alloc>"},
{"lineNum":" 5929","line":"    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)"},
{"lineNum":" 5930","line":"    {"},
{"lineNum":" 5931","line":"      typedef basic_string<_CharT, _Traits, _Alloc>\t__string_type;"},
{"lineNum":" 5932","line":"      typedef typename __string_type::size_type\t\t__size_type;"},
{"lineNum":" 5933","line":"      __string_type __str(__lhs);"},
{"lineNum":" 5934","line":"      __str.append(__size_type(1), __rhs);"},
{"lineNum":" 5935","line":"      return __str;"},
{"lineNum":" 5936","line":"    }"},
{"lineNum":" 5937","line":""},
{"lineNum":" 5938","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 5939","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 5940","line":"    inline basic_string<_CharT, _Traits, _Alloc>"},
{"lineNum":" 5941","line":"    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,"},
{"lineNum":" 5942","line":"\t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)"},
{"lineNum":" 5943","line":"    { return std::move(__lhs.append(__rhs)); }"},
{"lineNum":" 5944","line":""},
{"lineNum":" 5945","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 5946","line":"    inline basic_string<_CharT, _Traits, _Alloc>"},
{"lineNum":" 5947","line":"    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,"},
{"lineNum":" 5948","line":"\t      basic_string<_CharT, _Traits, _Alloc>&& __rhs)"},
{"lineNum":" 5949","line":"    { return std::move(__rhs.insert(0, __lhs)); }"},
{"lineNum":" 5950","line":""},
{"lineNum":" 5951","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 5952","line":"    inline basic_string<_CharT, _Traits, _Alloc>"},
{"lineNum":" 5953","line":"    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,"},
{"lineNum":" 5954","line":"\t      basic_string<_CharT, _Traits, _Alloc>&& __rhs)"},
{"lineNum":" 5955","line":"    {"},
{"lineNum":" 5956","line":"      const auto __size = __lhs.size() + __rhs.size();"},
{"lineNum":" 5957","line":"      const bool __cond = (__size > __lhs.capacity()"},
{"lineNum":" 5958","line":"\t\t\t   && __size <= __rhs.capacity());"},
{"lineNum":" 5959","line":"      return __cond ? std::move(__rhs.insert(0, __lhs))"},
{"lineNum":" 5960","line":"\t            : std::move(__lhs.append(__rhs));"},
{"lineNum":" 5961","line":"    }"},
{"lineNum":" 5962","line":""},
{"lineNum":" 5963","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 5964","line":"    inline basic_string<_CharT, _Traits, _Alloc>"},
{"lineNum":" 5965","line":"    operator+(const _CharT* __lhs,"},
{"lineNum":" 5966","line":"\t      basic_string<_CharT, _Traits, _Alloc>&& __rhs)"},
{"lineNum":" 5967","line":"    { return std::move(__rhs.insert(0, __lhs)); }"},
{"lineNum":" 5968","line":""},
{"lineNum":" 5969","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 5970","line":"    inline basic_string<_CharT, _Traits, _Alloc>"},
{"lineNum":" 5971","line":"    operator+(_CharT __lhs,"},
{"lineNum":" 5972","line":"\t      basic_string<_CharT, _Traits, _Alloc>&& __rhs)"},
{"lineNum":" 5973","line":"    { return std::move(__rhs.insert(0, 1, __lhs)); }"},
{"lineNum":" 5974","line":""},
{"lineNum":" 5975","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 5976","line":"    inline basic_string<_CharT, _Traits, _Alloc>"},
{"lineNum":" 5977","line":"    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,"},
{"lineNum":" 5978","line":"\t      const _CharT* __rhs)"},
{"lineNum":" 5979","line":"    { return std::move(__lhs.append(__rhs)); }"},
{"lineNum":" 5980","line":""},
{"lineNum":" 5981","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 5982","line":"    inline basic_string<_CharT, _Traits, _Alloc>"},
{"lineNum":" 5983","line":"    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,"},
{"lineNum":" 5984","line":"\t      _CharT __rhs)"},
{"lineNum":" 5985","line":"    { return std::move(__lhs.append(1, __rhs)); }"},
{"lineNum":" 5986","line":"#endif"},
{"lineNum":" 5987","line":""},
{"lineNum":" 5988","line":"  // operator =="},
{"lineNum":" 5989","line":"  /**"},
{"lineNum":" 5990","line":"   *  @brief  Test equivalence of two strings."},
{"lineNum":" 5991","line":"   *  @param __lhs  First string."},
{"lineNum":" 5992","line":"   *  @param __rhs  Second string."},
{"lineNum":" 5993","line":"   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise."},
{"lineNum":" 5994","line":"   */"},
{"lineNum":" 5995","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 5996","line":"    inline bool"},
{"lineNum":" 5997","line":"    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,"},
{"lineNum":" 5998","line":"\t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)"},
{"lineNum":" 5999","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":" 6000","line":"    { return __lhs.compare(__rhs) == 0; }"},
{"lineNum":" 6001","line":""},
{"lineNum":" 6002","line":"  template<typename _CharT>"},
{"lineNum":" 6003","line":"    inline"},
{"lineNum":" 6004","line":"    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type"},
{"lineNum":" 6005","line":"    operator==(const basic_string<_CharT>& __lhs,"},
{"lineNum":" 6006","line":"\t       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT"},
{"lineNum":" 6007","line":"    { return (__lhs.size() == __rhs.size()"},
{"lineNum":" 6008","line":"\t      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),"},
{"lineNum":" 6009","line":"\t\t\t\t\t\t    __lhs.size())); }"},
{"lineNum":" 6010","line":""},
{"lineNum":" 6011","line":"  /**"},
{"lineNum":" 6012","line":"   *  @brief  Test equivalence of C string and string."},
{"lineNum":" 6013","line":"   *  @param __lhs  C string."},
{"lineNum":" 6014","line":"   *  @param __rhs  String."},
{"lineNum":" 6015","line":"   *  @return  True if @a __rhs.compare(@a __lhs) == 0.  False otherwise."},
{"lineNum":" 6016","line":"   */"},
{"lineNum":" 6017","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6018","line":"    inline bool"},
{"lineNum":" 6019","line":"    operator==(const _CharT* __lhs,"},
{"lineNum":" 6020","line":"\t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)"},
{"lineNum":" 6021","line":"    { return __rhs.compare(__lhs) == 0; }"},
{"lineNum":" 6022","line":""},
{"lineNum":" 6023","line":"  /**"},
{"lineNum":" 6024","line":"   *  @brief  Test equivalence of string and C string."},
{"lineNum":" 6025","line":"   *  @param __lhs  String."},
{"lineNum":" 6026","line":"   *  @param __rhs  C string."},
{"lineNum":" 6027","line":"   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise."},
{"lineNum":" 6028","line":"   */"},
{"lineNum":" 6029","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6030","line":"    inline bool"},
{"lineNum":" 6031","line":"    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,"},
{"lineNum":" 6032","line":"\t       const _CharT* __rhs)"},
{"lineNum":" 6033","line":"    { return __lhs.compare(__rhs) == 0; }"},
{"lineNum":" 6034","line":""},
{"lineNum":" 6035","line":"  // operator !="},
{"lineNum":" 6036","line":"  /**"},
{"lineNum":" 6037","line":"   *  @brief  Test difference of two strings."},
{"lineNum":" 6038","line":"   *  @param __lhs  First string."},
{"lineNum":" 6039","line":"   *  @param __rhs  Second string."},
{"lineNum":" 6040","line":"   *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise."},
{"lineNum":" 6041","line":"   */"},
{"lineNum":" 6042","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6043","line":"    inline bool"},
{"lineNum":" 6044","line":"    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,"},
{"lineNum":" 6045","line":"\t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)"},
{"lineNum":" 6046","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":" 6047","line":"    { return !(__lhs == __rhs); }"},
{"lineNum":" 6048","line":""},
{"lineNum":" 6049","line":"  /**"},
{"lineNum":" 6050","line":"   *  @brief  Test difference of C string and string."},
{"lineNum":" 6051","line":"   *  @param __lhs  C string."},
{"lineNum":" 6052","line":"   *  @param __rhs  String."},
{"lineNum":" 6053","line":"   *  @return  True if @a __rhs.compare(@a __lhs) != 0.  False otherwise."},
{"lineNum":" 6054","line":"   */"},
{"lineNum":" 6055","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6056","line":"    inline bool"},
{"lineNum":" 6057","line":"    operator!=(const _CharT* __lhs,"},
{"lineNum":" 6058","line":"\t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)"},
{"lineNum":" 6059","line":"    { return !(__lhs == __rhs); }"},
{"lineNum":" 6060","line":""},
{"lineNum":" 6061","line":"  /**"},
{"lineNum":" 6062","line":"   *  @brief  Test difference of string and C string."},
{"lineNum":" 6063","line":"   *  @param __lhs  String."},
{"lineNum":" 6064","line":"   *  @param __rhs  C string."},
{"lineNum":" 6065","line":"   *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise."},
{"lineNum":" 6066","line":"   */"},
{"lineNum":" 6067","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6068","line":"    inline bool"},
{"lineNum":" 6069","line":"    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,"},
{"lineNum":" 6070","line":"\t       const _CharT* __rhs)"},
{"lineNum":" 6071","line":"    { return !(__lhs == __rhs); }"},
{"lineNum":" 6072","line":""},
{"lineNum":" 6073","line":"  // operator <"},
{"lineNum":" 6074","line":"  /**"},
{"lineNum":" 6075","line":"   *  @brief  Test if string precedes string."},
{"lineNum":" 6076","line":"   *  @param __lhs  First string."},
{"lineNum":" 6077","line":"   *  @param __rhs  Second string."},
{"lineNum":" 6078","line":"   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise."},
{"lineNum":" 6079","line":"   */"},
{"lineNum":" 6080","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6081","line":"    inline bool"},
{"lineNum":" 6082","line":"    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,","class":"lineCov","hits":"1","order":"1013","possible_hits":"1",},
{"lineNum":" 6083","line":"\t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)"},
{"lineNum":" 6084","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":" 6085","line":"    { return __lhs.compare(__rhs) < 0; }","class":"linePartCov","hits":"1","order":"1014","possible_hits":"2",},
{"lineNum":" 6086","line":""},
{"lineNum":" 6087","line":"  /**"},
{"lineNum":" 6088","line":"   *  @brief  Test if string precedes C string."},
{"lineNum":" 6089","line":"   *  @param __lhs  String."},
{"lineNum":" 6090","line":"   *  @param __rhs  C string."},
{"lineNum":" 6091","line":"   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise."},
{"lineNum":" 6092","line":"   */"},
{"lineNum":" 6093","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6094","line":"    inline bool"},
{"lineNum":" 6095","line":"    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,"},
{"lineNum":" 6096","line":"\t      const _CharT* __rhs)"},
{"lineNum":" 6097","line":"    { return __lhs.compare(__rhs) < 0; }"},
{"lineNum":" 6098","line":""},
{"lineNum":" 6099","line":"  /**"},
{"lineNum":" 6100","line":"   *  @brief  Test if C string precedes string."},
{"lineNum":" 6101","line":"   *  @param __lhs  C string."},
{"lineNum":" 6102","line":"   *  @param __rhs  String."},
{"lineNum":" 6103","line":"   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise."},
{"lineNum":" 6104","line":"   */"},
{"lineNum":" 6105","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6106","line":"    inline bool"},
{"lineNum":" 6107","line":"    operator<(const _CharT* __lhs,"},
{"lineNum":" 6108","line":"\t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)"},
{"lineNum":" 6109","line":"    { return __rhs.compare(__lhs) > 0; }"},
{"lineNum":" 6110","line":""},
{"lineNum":" 6111","line":"  // operator >"},
{"lineNum":" 6112","line":"  /**"},
{"lineNum":" 6113","line":"   *  @brief  Test if string follows string."},
{"lineNum":" 6114","line":"   *  @param __lhs  First string."},
{"lineNum":" 6115","line":"   *  @param __rhs  Second string."},
{"lineNum":" 6116","line":"   *  @return  True if @a __lhs follows @a __rhs.  False otherwise."},
{"lineNum":" 6117","line":"   */"},
{"lineNum":" 6118","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6119","line":"    inline bool"},
{"lineNum":" 6120","line":"    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,"},
{"lineNum":" 6121","line":"\t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)"},
{"lineNum":" 6122","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":" 6123","line":"    { return __lhs.compare(__rhs) > 0; }"},
{"lineNum":" 6124","line":""},
{"lineNum":" 6125","line":"  /**"},
{"lineNum":" 6126","line":"   *  @brief  Test if string follows C string."},
{"lineNum":" 6127","line":"   *  @param __lhs  String."},
{"lineNum":" 6128","line":"   *  @param __rhs  C string."},
{"lineNum":" 6129","line":"   *  @return  True if @a __lhs follows @a __rhs.  False otherwise."},
{"lineNum":" 6130","line":"   */"},
{"lineNum":" 6131","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6132","line":"    inline bool"},
{"lineNum":" 6133","line":"    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,"},
{"lineNum":" 6134","line":"\t      const _CharT* __rhs)"},
{"lineNum":" 6135","line":"    { return __lhs.compare(__rhs) > 0; }"},
{"lineNum":" 6136","line":""},
{"lineNum":" 6137","line":"  /**"},
{"lineNum":" 6138","line":"   *  @brief  Test if C string follows string."},
{"lineNum":" 6139","line":"   *  @param __lhs  C string."},
{"lineNum":" 6140","line":"   *  @param __rhs  String."},
{"lineNum":" 6141","line":"   *  @return  True if @a __lhs follows @a __rhs.  False otherwise."},
{"lineNum":" 6142","line":"   */"},
{"lineNum":" 6143","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6144","line":"    inline bool"},
{"lineNum":" 6145","line":"    operator>(const _CharT* __lhs,"},
{"lineNum":" 6146","line":"\t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)"},
{"lineNum":" 6147","line":"    { return __rhs.compare(__lhs) < 0; }"},
{"lineNum":" 6148","line":""},
{"lineNum":" 6149","line":"  // operator <="},
{"lineNum":" 6150","line":"  /**"},
{"lineNum":" 6151","line":"   *  @brief  Test if string doesn\'t follow string."},
{"lineNum":" 6152","line":"   *  @param __lhs  First string."},
{"lineNum":" 6153","line":"   *  @param __rhs  Second string."},
{"lineNum":" 6154","line":"   *  @return  True if @a __lhs doesn\'t follow @a __rhs.  False otherwise."},
{"lineNum":" 6155","line":"   */"},
{"lineNum":" 6156","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6157","line":"    inline bool"},
{"lineNum":" 6158","line":"    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,"},
{"lineNum":" 6159","line":"\t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)"},
{"lineNum":" 6160","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":" 6161","line":"    { return __lhs.compare(__rhs) <= 0; }"},
{"lineNum":" 6162","line":""},
{"lineNum":" 6163","line":"  /**"},
{"lineNum":" 6164","line":"   *  @brief  Test if string doesn\'t follow C string."},
{"lineNum":" 6165","line":"   *  @param __lhs  String."},
{"lineNum":" 6166","line":"   *  @param __rhs  C string."},
{"lineNum":" 6167","line":"   *  @return  True if @a __lhs doesn\'t follow @a __rhs.  False otherwise."},
{"lineNum":" 6168","line":"   */"},
{"lineNum":" 6169","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6170","line":"    inline bool"},
{"lineNum":" 6171","line":"    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,"},
{"lineNum":" 6172","line":"\t       const _CharT* __rhs)"},
{"lineNum":" 6173","line":"    { return __lhs.compare(__rhs) <= 0; }"},
{"lineNum":" 6174","line":""},
{"lineNum":" 6175","line":"  /**"},
{"lineNum":" 6176","line":"   *  @brief  Test if C string doesn\'t follow string."},
{"lineNum":" 6177","line":"   *  @param __lhs  C string."},
{"lineNum":" 6178","line":"   *  @param __rhs  String."},
{"lineNum":" 6179","line":"   *  @return  True if @a __lhs doesn\'t follow @a __rhs.  False otherwise."},
{"lineNum":" 6180","line":"   */"},
{"lineNum":" 6181","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6182","line":"    inline bool"},
{"lineNum":" 6183","line":"    operator<=(const _CharT* __lhs,"},
{"lineNum":" 6184","line":"\t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)"},
{"lineNum":" 6185","line":"    { return __rhs.compare(__lhs) >= 0; }"},
{"lineNum":" 6186","line":""},
{"lineNum":" 6187","line":"  // operator >="},
{"lineNum":" 6188","line":"  /**"},
{"lineNum":" 6189","line":"   *  @brief  Test if string doesn\'t precede string."},
{"lineNum":" 6190","line":"   *  @param __lhs  First string."},
{"lineNum":" 6191","line":"   *  @param __rhs  Second string."},
{"lineNum":" 6192","line":"   *  @return  True if @a __lhs doesn\'t precede @a __rhs.  False otherwise."},
{"lineNum":" 6193","line":"   */"},
{"lineNum":" 6194","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6195","line":"    inline bool"},
{"lineNum":" 6196","line":"    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,"},
{"lineNum":" 6197","line":"\t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)"},
{"lineNum":" 6198","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":" 6199","line":"    { return __lhs.compare(__rhs) >= 0; }"},
{"lineNum":" 6200","line":""},
{"lineNum":" 6201","line":"  /**"},
{"lineNum":" 6202","line":"   *  @brief  Test if string doesn\'t precede C string."},
{"lineNum":" 6203","line":"   *  @param __lhs  String."},
{"lineNum":" 6204","line":"   *  @param __rhs  C string."},
{"lineNum":" 6205","line":"   *  @return  True if @a __lhs doesn\'t precede @a __rhs.  False otherwise."},
{"lineNum":" 6206","line":"   */"},
{"lineNum":" 6207","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6208","line":"    inline bool"},
{"lineNum":" 6209","line":"    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,"},
{"lineNum":" 6210","line":"\t       const _CharT* __rhs)"},
{"lineNum":" 6211","line":"    { return __lhs.compare(__rhs) >= 0; }"},
{"lineNum":" 6212","line":""},
{"lineNum":" 6213","line":"  /**"},
{"lineNum":" 6214","line":"   *  @brief  Test if C string doesn\'t precede string."},
{"lineNum":" 6215","line":"   *  @param __lhs  C string."},
{"lineNum":" 6216","line":"   *  @param __rhs  String."},
{"lineNum":" 6217","line":"   *  @return  True if @a __lhs doesn\'t precede @a __rhs.  False otherwise."},
{"lineNum":" 6218","line":"   */"},
{"lineNum":" 6219","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6220","line":"    inline bool"},
{"lineNum":" 6221","line":"    operator>=(const _CharT* __lhs,"},
{"lineNum":" 6222","line":"\t     const basic_string<_CharT, _Traits, _Alloc>& __rhs)"},
{"lineNum":" 6223","line":"    { return __rhs.compare(__lhs) <= 0; }"},
{"lineNum":" 6224","line":""},
{"lineNum":" 6225","line":"  /**"},
{"lineNum":" 6226","line":"   *  @brief  Swap contents of two strings."},
{"lineNum":" 6227","line":"   *  @param __lhs  First string."},
{"lineNum":" 6228","line":"   *  @param __rhs  Second string."},
{"lineNum":" 6229","line":"   *"},
{"lineNum":" 6230","line":"   *  Exchanges the contents of @a __lhs and @a __rhs in constant time."},
{"lineNum":" 6231","line":"   */"},
{"lineNum":" 6232","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6233","line":"    inline void"},
{"lineNum":" 6234","line":"    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,"},
{"lineNum":" 6235","line":"\t basic_string<_CharT, _Traits, _Alloc>& __rhs)"},
{"lineNum":" 6236","line":"    _GLIBCXX_NOEXCEPT_IF(noexcept(__lhs.swap(__rhs)))"},
{"lineNum":" 6237","line":"    { __lhs.swap(__rhs); }"},
{"lineNum":" 6238","line":""},
{"lineNum":" 6239","line":""},
{"lineNum":" 6240","line":"  /**"},
{"lineNum":" 6241","line":"   *  @brief  Read stream into a string."},
{"lineNum":" 6242","line":"   *  @param __is  Input stream."},
{"lineNum":" 6243","line":"   *  @param __str  Buffer to store into."},
{"lineNum":" 6244","line":"   *  @return  Reference to the input stream."},
{"lineNum":" 6245","line":"   *"},
{"lineNum":" 6246","line":"   *  Stores characters from @a __is into @a __str until whitespace is"},
{"lineNum":" 6247","line":"   *  found, the end of the stream is encountered, or str.max_size()"},
{"lineNum":" 6248","line":"   *  is reached.  If is.width() is non-zero, that is the limit on the"},
{"lineNum":" 6249","line":"   *  number of characters stored into @a __str.  Any previous"},
{"lineNum":" 6250","line":"   *  contents of @a __str are erased."},
{"lineNum":" 6251","line":"   */"},
{"lineNum":" 6252","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6253","line":"    basic_istream<_CharT, _Traits>&"},
{"lineNum":" 6254","line":"    operator>>(basic_istream<_CharT, _Traits>& __is,"},
{"lineNum":" 6255","line":"\t       basic_string<_CharT, _Traits, _Alloc>& __str);"},
{"lineNum":" 6256","line":""},
{"lineNum":" 6257","line":"  template<>"},
{"lineNum":" 6258","line":"    basic_istream<char>&"},
{"lineNum":" 6259","line":"    operator>>(basic_istream<char>& __is, basic_string<char>& __str);"},
{"lineNum":" 6260","line":""},
{"lineNum":" 6261","line":"  /**"},
{"lineNum":" 6262","line":"   *  @brief  Write string to a stream."},
{"lineNum":" 6263","line":"   *  @param __os  Output stream."},
{"lineNum":" 6264","line":"   *  @param __str  String to write out."},
{"lineNum":" 6265","line":"   *  @return  Reference to the output stream."},
{"lineNum":" 6266","line":"   *"},
{"lineNum":" 6267","line":"   *  Output characters of @a __str into os following the same rules as for"},
{"lineNum":" 6268","line":"   *  writing a C string."},
{"lineNum":" 6269","line":"   */"},
{"lineNum":" 6270","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6271","line":"    inline basic_ostream<_CharT, _Traits>&"},
{"lineNum":" 6272","line":"    operator<<(basic_ostream<_CharT, _Traits>& __os,"},
{"lineNum":" 6273","line":"\t       const basic_string<_CharT, _Traits, _Alloc>& __str)"},
{"lineNum":" 6274","line":"    {"},
{"lineNum":" 6275","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":" 6276","line":"      // 586. string inserter not a formatted function"},
{"lineNum":" 6277","line":"      return __ostream_insert(__os, __str.data(), __str.size());"},
{"lineNum":" 6278","line":"    }"},
{"lineNum":" 6279","line":""},
{"lineNum":" 6280","line":"  /**"},
{"lineNum":" 6281","line":"   *  @brief  Read a line from stream into a string."},
{"lineNum":" 6282","line":"   *  @param __is  Input stream."},
{"lineNum":" 6283","line":"   *  @param __str  Buffer to store into."},
{"lineNum":" 6284","line":"   *  @param __delim  Character marking end of line."},
{"lineNum":" 6285","line":"   *  @return  Reference to the input stream."},
{"lineNum":" 6286","line":"   *"},
{"lineNum":" 6287","line":"   *  Stores characters from @a __is into @a __str until @a __delim is"},
{"lineNum":" 6288","line":"   *  found, the end of the stream is encountered, or str.max_size()"},
{"lineNum":" 6289","line":"   *  is reached.  Any previous contents of @a __str are erased.  If"},
{"lineNum":" 6290","line":"   *  @a __delim is encountered, it is extracted but not stored into"},
{"lineNum":" 6291","line":"   *  @a __str."},
{"lineNum":" 6292","line":"   */"},
{"lineNum":" 6293","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6294","line":"    basic_istream<_CharT, _Traits>&"},
{"lineNum":" 6295","line":"    getline(basic_istream<_CharT, _Traits>& __is,"},
{"lineNum":" 6296","line":"\t    basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);"},
{"lineNum":" 6297","line":""},
{"lineNum":" 6298","line":"  /**"},
{"lineNum":" 6299","line":"   *  @brief  Read a line from stream into a string."},
{"lineNum":" 6300","line":"   *  @param __is  Input stream."},
{"lineNum":" 6301","line":"   *  @param __str  Buffer to store into."},
{"lineNum":" 6302","line":"   *  @return  Reference to the input stream."},
{"lineNum":" 6303","line":"   *"},
{"lineNum":" 6304","line":"   *  Stores characters from is into @a __str until &apos;\\n&apos; is"},
{"lineNum":" 6305","line":"   *  found, the end of the stream is encountered, or str.max_size()"},
{"lineNum":" 6306","line":"   *  is reached.  Any previous contents of @a __str are erased.  If"},
{"lineNum":" 6307","line":"   *  end of line is encountered, it is extracted but not stored into"},
{"lineNum":" 6308","line":"   *  @a __str."},
{"lineNum":" 6309","line":"   */"},
{"lineNum":" 6310","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6311","line":"    inline basic_istream<_CharT, _Traits>&"},
{"lineNum":" 6312","line":"    getline(basic_istream<_CharT, _Traits>& __is,"},
{"lineNum":" 6313","line":"\t    basic_string<_CharT, _Traits, _Alloc>& __str)"},
{"lineNum":" 6314","line":"    { return std::getline(__is, __str, __is.widen(\'\\n\')); }"},
{"lineNum":" 6315","line":""},
{"lineNum":" 6316","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 6317","line":"  /// Read a line from an rvalue stream into a string."},
{"lineNum":" 6318","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6319","line":"    inline basic_istream<_CharT, _Traits>&"},
{"lineNum":" 6320","line":"    getline(basic_istream<_CharT, _Traits>&& __is,"},
{"lineNum":" 6321","line":"\t    basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)"},
{"lineNum":" 6322","line":"    { return std::getline(__is, __str, __delim); }"},
{"lineNum":" 6323","line":""},
{"lineNum":" 6324","line":"  /// Read a line from an rvalue stream into a string."},
{"lineNum":" 6325","line":"  template<typename _CharT, typename _Traits, typename _Alloc>"},
{"lineNum":" 6326","line":"    inline basic_istream<_CharT, _Traits>&"},
{"lineNum":" 6327","line":"    getline(basic_istream<_CharT, _Traits>&& __is,"},
{"lineNum":" 6328","line":"\t    basic_string<_CharT, _Traits, _Alloc>& __str)"},
{"lineNum":" 6329","line":"    { return std::getline(__is, __str); }"},
{"lineNum":" 6330","line":"#endif"},
{"lineNum":" 6331","line":""},
{"lineNum":" 6332","line":"  template<>"},
{"lineNum":" 6333","line":"    basic_istream<char>&"},
{"lineNum":" 6334","line":"    getline(basic_istream<char>& __in, basic_string<char>& __str,"},
{"lineNum":" 6335","line":"\t    char __delim);"},
{"lineNum":" 6336","line":""},
{"lineNum":" 6337","line":"#ifdef _GLIBCXX_USE_WCHAR_T"},
{"lineNum":" 6338","line":"  template<>"},
{"lineNum":" 6339","line":"    basic_istream<wchar_t>&"},
{"lineNum":" 6340","line":"    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,"},
{"lineNum":" 6341","line":"\t    wchar_t __delim);"},
{"lineNum":" 6342","line":"#endif"},
{"lineNum":" 6343","line":""},
{"lineNum":" 6344","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":" 6345","line":"} // namespace"},
{"lineNum":" 6346","line":""},
{"lineNum":" 6347","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 6348","line":""},
{"lineNum":" 6349","line":"#include <ext/string_conversions.h>"},
{"lineNum":" 6350","line":""},
{"lineNum":" 6351","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":" 6352","line":"{"},
{"lineNum":" 6353","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":" 6354","line":"_GLIBCXX_BEGIN_NAMESPACE_CXX11"},
{"lineNum":" 6355","line":""},
{"lineNum":" 6356","line":"#if _GLIBCXX_USE_C99_STDLIB"},
{"lineNum":" 6357","line":"  // 21.4 Numeric Conversions [string.conversions]."},
{"lineNum":" 6358","line":"  inline int"},
{"lineNum":" 6359","line":"  stoi(const string& __str, size_t* __idx = 0, int __base = 10)"},
{"lineNum":" 6360","line":"  { return __gnu_cxx::__stoa<long, int>(&std::strtol, \"stoi\", __str.c_str(),"},
{"lineNum":" 6361","line":"\t\t\t\t\t__idx, __base); }"},
{"lineNum":" 6362","line":""},
{"lineNum":" 6363","line":"  inline long"},
{"lineNum":" 6364","line":"  stol(const string& __str, size_t* __idx = 0, int __base = 10)"},
{"lineNum":" 6365","line":"  { return __gnu_cxx::__stoa(&std::strtol, \"stol\", __str.c_str(),"},
{"lineNum":" 6366","line":"\t\t\t     __idx, __base); }"},
{"lineNum":" 6367","line":""},
{"lineNum":" 6368","line":"  inline unsigned long"},
{"lineNum":" 6369","line":"  stoul(const string& __str, size_t* __idx = 0, int __base = 10)"},
{"lineNum":" 6370","line":"  { return __gnu_cxx::__stoa(&std::strtoul, \"stoul\", __str.c_str(),"},
{"lineNum":" 6371","line":"\t\t\t     __idx, __base); }"},
{"lineNum":" 6372","line":""},
{"lineNum":" 6373","line":"  inline long long"},
{"lineNum":" 6374","line":"  stoll(const string& __str, size_t* __idx = 0, int __base = 10)"},
{"lineNum":" 6375","line":"  { return __gnu_cxx::__stoa(&std::strtoll, \"stoll\", __str.c_str(),"},
{"lineNum":" 6376","line":"\t\t\t     __idx, __base); }"},
{"lineNum":" 6377","line":""},
{"lineNum":" 6378","line":"  inline unsigned long long"},
{"lineNum":" 6379","line":"  stoull(const string& __str, size_t* __idx = 0, int __base = 10)"},
{"lineNum":" 6380","line":"  { return __gnu_cxx::__stoa(&std::strtoull, \"stoull\", __str.c_str(),"},
{"lineNum":" 6381","line":"\t\t\t     __idx, __base); }"},
{"lineNum":" 6382","line":""},
{"lineNum":" 6383","line":"  // NB: strtof vs strtod."},
{"lineNum":" 6384","line":"  inline float"},
{"lineNum":" 6385","line":"  stof(const string& __str, size_t* __idx = 0)"},
{"lineNum":" 6386","line":"  { return __gnu_cxx::__stoa(&std::strtof, \"stof\", __str.c_str(), __idx); }"},
{"lineNum":" 6387","line":""},
{"lineNum":" 6388","line":"  inline double"},
{"lineNum":" 6389","line":"  stod(const string& __str, size_t* __idx = 0)"},
{"lineNum":" 6390","line":"  { return __gnu_cxx::__stoa(&std::strtod, \"stod\", __str.c_str(), __idx); }"},
{"lineNum":" 6391","line":""},
{"lineNum":" 6392","line":"  inline long double"},
{"lineNum":" 6393","line":"  stold(const string& __str, size_t* __idx = 0)"},
{"lineNum":" 6394","line":"  { return __gnu_cxx::__stoa(&std::strtold, \"stold\", __str.c_str(), __idx); }"},
{"lineNum":" 6395","line":"#endif // _GLIBCXX_USE_C99_STDLIB"},
{"lineNum":" 6396","line":""},
{"lineNum":" 6397","line":"#if _GLIBCXX_USE_C99_STDIO"},
{"lineNum":" 6398","line":"  // NB: (v)snprintf vs sprintf."},
{"lineNum":" 6399","line":""},
{"lineNum":" 6400","line":"  // DR 1261."},
{"lineNum":" 6401","line":"  inline string"},
{"lineNum":" 6402","line":"  to_string(int __val)"},
{"lineNum":" 6403","line":"  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),"},
{"lineNum":" 6404","line":"\t\t\t\t\t   \"%d\", __val); }"},
{"lineNum":" 6405","line":""},
{"lineNum":" 6406","line":"  inline string"},
{"lineNum":" 6407","line":"  to_string(unsigned __val)"},
{"lineNum":" 6408","line":"  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,"},
{"lineNum":" 6409","line":"\t\t\t\t\t   4 * sizeof(unsigned),"},
{"lineNum":" 6410","line":"\t\t\t\t\t   \"%u\", __val); }"},
{"lineNum":" 6411","line":""},
{"lineNum":" 6412","line":"  inline string"},
{"lineNum":" 6413","line":"  to_string(long __val)"},
{"lineNum":" 6414","line":"  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),"},
{"lineNum":" 6415","line":"\t\t\t\t\t   \"%ld\", __val); }"},
{"lineNum":" 6416","line":""},
{"lineNum":" 6417","line":"  inline string"},
{"lineNum":" 6418","line":"  to_string(unsigned long __val)"},
{"lineNum":" 6419","line":"  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,"},
{"lineNum":" 6420","line":"\t\t\t\t\t   4 * sizeof(unsigned long),"},
{"lineNum":" 6421","line":"\t\t\t\t\t   \"%lu\", __val); }"},
{"lineNum":" 6422","line":""},
{"lineNum":" 6423","line":"  inline string"},
{"lineNum":" 6424","line":"  to_string(long long __val)"},
{"lineNum":" 6425","line":"  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,"},
{"lineNum":" 6426","line":"\t\t\t\t\t   4 * sizeof(long long),"},
{"lineNum":" 6427","line":"\t\t\t\t\t   \"%lld\", __val); }"},
{"lineNum":" 6428","line":""},
{"lineNum":" 6429","line":"  inline string"},
{"lineNum":" 6430","line":"  to_string(unsigned long long __val)"},
{"lineNum":" 6431","line":"  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,"},
{"lineNum":" 6432","line":"\t\t\t\t\t   4 * sizeof(unsigned long long),"},
{"lineNum":" 6433","line":"\t\t\t\t\t   \"%llu\", __val); }"},
{"lineNum":" 6434","line":""},
{"lineNum":" 6435","line":"  inline string"},
{"lineNum":" 6436","line":"  to_string(float __val)"},
{"lineNum":" 6437","line":"  {"},
{"lineNum":" 6438","line":"    const int __n ="},
{"lineNum":" 6439","line":"      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;"},
{"lineNum":" 6440","line":"    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,"},
{"lineNum":" 6441","line":"\t\t\t\t\t   \"%f\", __val);"},
{"lineNum":" 6442","line":"  }"},
{"lineNum":" 6443","line":""},
{"lineNum":" 6444","line":"  inline string"},
{"lineNum":" 6445","line":"  to_string(double __val)"},
{"lineNum":" 6446","line":"  {"},
{"lineNum":" 6447","line":"    const int __n ="},
{"lineNum":" 6448","line":"      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;"},
{"lineNum":" 6449","line":"    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,"},
{"lineNum":" 6450","line":"\t\t\t\t\t   \"%f\", __val);"},
{"lineNum":" 6451","line":"  }"},
{"lineNum":" 6452","line":""},
{"lineNum":" 6453","line":"  inline string"},
{"lineNum":" 6454","line":"  to_string(long double __val)"},
{"lineNum":" 6455","line":"  {"},
{"lineNum":" 6456","line":"    const int __n ="},
{"lineNum":" 6457","line":"      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;"},
{"lineNum":" 6458","line":"    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,"},
{"lineNum":" 6459","line":"\t\t\t\t\t   \"%Lf\", __val);"},
{"lineNum":" 6460","line":"  }"},
{"lineNum":" 6461","line":"#endif // _GLIBCXX_USE_C99_STDIO"},
{"lineNum":" 6462","line":""},
{"lineNum":" 6463","line":"#if defined(_GLIBCXX_USE_WCHAR_T) && _GLIBCXX_USE_C99_WCHAR"},
{"lineNum":" 6464","line":"  inline int"},
{"lineNum":" 6465","line":"  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)"},
{"lineNum":" 6466","line":"  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, \"stoi\", __str.c_str(),"},
{"lineNum":" 6467","line":"\t\t\t\t\t__idx, __base); }"},
{"lineNum":" 6468","line":""},
{"lineNum":" 6469","line":"  inline long"},
{"lineNum":" 6470","line":"  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)"},
{"lineNum":" 6471","line":"  { return __gnu_cxx::__stoa(&std::wcstol, \"stol\", __str.c_str(),"},
{"lineNum":" 6472","line":"\t\t\t     __idx, __base); }"},
{"lineNum":" 6473","line":""},
{"lineNum":" 6474","line":"  inline unsigned long"},
{"lineNum":" 6475","line":"  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)"},
{"lineNum":" 6476","line":"  { return __gnu_cxx::__stoa(&std::wcstoul, \"stoul\", __str.c_str(),"},
{"lineNum":" 6477","line":"\t\t\t     __idx, __base); }"},
{"lineNum":" 6478","line":""},
{"lineNum":" 6479","line":"  inline long long"},
{"lineNum":" 6480","line":"  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)"},
{"lineNum":" 6481","line":"  { return __gnu_cxx::__stoa(&std::wcstoll, \"stoll\", __str.c_str(),"},
{"lineNum":" 6482","line":"\t\t\t     __idx, __base); }"},
{"lineNum":" 6483","line":""},
{"lineNum":" 6484","line":"  inline unsigned long long"},
{"lineNum":" 6485","line":"  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)"},
{"lineNum":" 6486","line":"  { return __gnu_cxx::__stoa(&std::wcstoull, \"stoull\", __str.c_str(),"},
{"lineNum":" 6487","line":"\t\t\t     __idx, __base); }"},
{"lineNum":" 6488","line":""},
{"lineNum":" 6489","line":"  // NB: wcstof vs wcstod."},
{"lineNum":" 6490","line":"  inline float"},
{"lineNum":" 6491","line":"  stof(const wstring& __str, size_t* __idx = 0)"},
{"lineNum":" 6492","line":"  { return __gnu_cxx::__stoa(&std::wcstof, \"stof\", __str.c_str(), __idx); }"},
{"lineNum":" 6493","line":""},
{"lineNum":" 6494","line":"  inline double"},
{"lineNum":" 6495","line":"  stod(const wstring& __str, size_t* __idx = 0)"},
{"lineNum":" 6496","line":"  { return __gnu_cxx::__stoa(&std::wcstod, \"stod\", __str.c_str(), __idx); }"},
{"lineNum":" 6497","line":""},
{"lineNum":" 6498","line":"  inline long double"},
{"lineNum":" 6499","line":"  stold(const wstring& __str, size_t* __idx = 0)"},
{"lineNum":" 6500","line":"  { return __gnu_cxx::__stoa(&std::wcstold, \"stold\", __str.c_str(), __idx); }"},
{"lineNum":" 6501","line":""},
{"lineNum":" 6502","line":"#ifndef _GLIBCXX_HAVE_BROKEN_VSWPRINTF"},
{"lineNum":" 6503","line":"  // DR 1261."},
{"lineNum":" 6504","line":"  inline wstring"},
{"lineNum":" 6505","line":"  to_wstring(int __val)"},
{"lineNum":" 6506","line":"  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),"},
{"lineNum":" 6507","line":"\t\t\t\t\t    L\"%d\", __val); }"},
{"lineNum":" 6508","line":""},
{"lineNum":" 6509","line":"  inline wstring"},
{"lineNum":" 6510","line":"  to_wstring(unsigned __val)"},
{"lineNum":" 6511","line":"  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,"},
{"lineNum":" 6512","line":"\t\t\t\t\t    4 * sizeof(unsigned),"},
{"lineNum":" 6513","line":"\t\t\t\t\t    L\"%u\", __val); }"},
{"lineNum":" 6514","line":""},
{"lineNum":" 6515","line":"  inline wstring"},
{"lineNum":" 6516","line":"  to_wstring(long __val)"},
{"lineNum":" 6517","line":"  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),"},
{"lineNum":" 6518","line":"\t\t\t\t\t    L\"%ld\", __val); }"},
{"lineNum":" 6519","line":""},
{"lineNum":" 6520","line":"  inline wstring"},
{"lineNum":" 6521","line":"  to_wstring(unsigned long __val)"},
{"lineNum":" 6522","line":"  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,"},
{"lineNum":" 6523","line":"\t\t\t\t\t    4 * sizeof(unsigned long),"},
{"lineNum":" 6524","line":"\t\t\t\t\t    L\"%lu\", __val); }"},
{"lineNum":" 6525","line":""},
{"lineNum":" 6526","line":"  inline wstring"},
{"lineNum":" 6527","line":"  to_wstring(long long __val)"},
{"lineNum":" 6528","line":"  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,"},
{"lineNum":" 6529","line":"\t\t\t\t\t    4 * sizeof(long long),"},
{"lineNum":" 6530","line":"\t\t\t\t\t    L\"%lld\", __val); }"},
{"lineNum":" 6531","line":""},
{"lineNum":" 6532","line":"  inline wstring"},
{"lineNum":" 6533","line":"  to_wstring(unsigned long long __val)"},
{"lineNum":" 6534","line":"  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,"},
{"lineNum":" 6535","line":"\t\t\t\t\t    4 * sizeof(unsigned long long),"},
{"lineNum":" 6536","line":"\t\t\t\t\t    L\"%llu\", __val); }"},
{"lineNum":" 6537","line":""},
{"lineNum":" 6538","line":"  inline wstring"},
{"lineNum":" 6539","line":"  to_wstring(float __val)"},
{"lineNum":" 6540","line":"  {"},
{"lineNum":" 6541","line":"    const int __n ="},
{"lineNum":" 6542","line":"      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;"},
{"lineNum":" 6543","line":"    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,"},
{"lineNum":" 6544","line":"\t\t\t\t\t    L\"%f\", __val);"},
{"lineNum":" 6545","line":"  }"},
{"lineNum":" 6546","line":""},
{"lineNum":" 6547","line":"  inline wstring"},
{"lineNum":" 6548","line":"  to_wstring(double __val)"},
{"lineNum":" 6549","line":"  {"},
{"lineNum":" 6550","line":"    const int __n ="},
{"lineNum":" 6551","line":"      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;"},
{"lineNum":" 6552","line":"    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,"},
{"lineNum":" 6553","line":"\t\t\t\t\t    L\"%f\", __val);"},
{"lineNum":" 6554","line":"  }"},
{"lineNum":" 6555","line":""},
{"lineNum":" 6556","line":"  inline wstring"},
{"lineNum":" 6557","line":"  to_wstring(long double __val)"},
{"lineNum":" 6558","line":"  {"},
{"lineNum":" 6559","line":"    const int __n ="},
{"lineNum":" 6560","line":"      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;"},
{"lineNum":" 6561","line":"    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,"},
{"lineNum":" 6562","line":"\t\t\t\t\t    L\"%Lf\", __val);"},
{"lineNum":" 6563","line":"  }"},
{"lineNum":" 6564","line":"#endif // _GLIBCXX_HAVE_BROKEN_VSWPRINTF"},
{"lineNum":" 6565","line":"#endif // _GLIBCXX_USE_WCHAR_T && _GLIBCXX_USE_C99_WCHAR"},
{"lineNum":" 6566","line":""},
{"lineNum":" 6567","line":"_GLIBCXX_END_NAMESPACE_CXX11"},
{"lineNum":" 6568","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":" 6569","line":"} // namespace"},
{"lineNum":" 6570","line":""},
{"lineNum":" 6571","line":"#endif /* C++11 */"},
{"lineNum":" 6572","line":""},
{"lineNum":" 6573","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 6574","line":""},
{"lineNum":" 6575","line":"#include <bits/functional_hash.h>"},
{"lineNum":" 6576","line":""},
{"lineNum":" 6577","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":" 6578","line":"{"},
{"lineNum":" 6579","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":" 6580","line":""},
{"lineNum":" 6581","line":"  // DR 1182."},
{"lineNum":" 6582","line":""},
{"lineNum":" 6583","line":"#ifndef _GLIBCXX_COMPATIBILITY_CXX0X"},
{"lineNum":" 6584","line":"  /// std::hash specialization for string."},
{"lineNum":" 6585","line":"  template<>"},
{"lineNum":" 6586","line":"    struct hash<string>"},
{"lineNum":" 6587","line":"    : public __hash_base<size_t, string>"},
{"lineNum":" 6588","line":"    {"},
{"lineNum":" 6589","line":"      size_t"},
{"lineNum":" 6590","line":"      operator()(const string& __s) const noexcept"},
{"lineNum":" 6591","line":"      { return std::_Hash_impl::hash(__s.data(), __s.length()); }"},
{"lineNum":" 6592","line":"    };"},
{"lineNum":" 6593","line":""},
{"lineNum":" 6594","line":"  template<>"},
{"lineNum":" 6595","line":"    struct __is_fast_hash<hash<string>> : std::false_type"},
{"lineNum":" 6596","line":"    { };"},
{"lineNum":" 6597","line":""},
{"lineNum":" 6598","line":"#ifdef _GLIBCXX_USE_WCHAR_T"},
{"lineNum":" 6599","line":"  /// std::hash specialization for wstring."},
{"lineNum":" 6600","line":"  template<>"},
{"lineNum":" 6601","line":"    struct hash<wstring>"},
{"lineNum":" 6602","line":"    : public __hash_base<size_t, wstring>"},
{"lineNum":" 6603","line":"    {"},
{"lineNum":" 6604","line":"      size_t"},
{"lineNum":" 6605","line":"      operator()(const wstring& __s) const noexcept"},
{"lineNum":" 6606","line":"      { return std::_Hash_impl::hash(__s.data(),"},
{"lineNum":" 6607","line":"                                     __s.length() * sizeof(wchar_t)); }"},
{"lineNum":" 6608","line":"    };"},
{"lineNum":" 6609","line":""},
{"lineNum":" 6610","line":"  template<>"},
{"lineNum":" 6611","line":"    struct __is_fast_hash<hash<wstring>> : std::false_type"},
{"lineNum":" 6612","line":"    { };"},
{"lineNum":" 6613","line":"#endif"},
{"lineNum":" 6614","line":"#endif /* _GLIBCXX_COMPATIBILITY_CXX0X */"},
{"lineNum":" 6615","line":""},
{"lineNum":" 6616","line":"#ifdef _GLIBCXX_USE_C99_STDINT_TR1"},
{"lineNum":" 6617","line":"  /// std::hash specialization for u16string."},
{"lineNum":" 6618","line":"  template<>"},
{"lineNum":" 6619","line":"    struct hash<u16string>"},
{"lineNum":" 6620","line":"    : public __hash_base<size_t, u16string>"},
{"lineNum":" 6621","line":"    {"},
{"lineNum":" 6622","line":"      size_t"},
{"lineNum":" 6623","line":"      operator()(const u16string& __s) const noexcept"},
{"lineNum":" 6624","line":"      { return std::_Hash_impl::hash(__s.data(),"},
{"lineNum":" 6625","line":"                                     __s.length() * sizeof(char16_t)); }"},
{"lineNum":" 6626","line":"    };"},
{"lineNum":" 6627","line":""},
{"lineNum":" 6628","line":"  template<>"},
{"lineNum":" 6629","line":"    struct __is_fast_hash<hash<u16string>> : std::false_type"},
{"lineNum":" 6630","line":"    { };"},
{"lineNum":" 6631","line":""},
{"lineNum":" 6632","line":"  /// std::hash specialization for u32string."},
{"lineNum":" 6633","line":"  template<>"},
{"lineNum":" 6634","line":"    struct hash<u32string>"},
{"lineNum":" 6635","line":"    : public __hash_base<size_t, u32string>"},
{"lineNum":" 6636","line":"    {"},
{"lineNum":" 6637","line":"      size_t"},
{"lineNum":" 6638","line":"      operator()(const u32string& __s) const noexcept"},
{"lineNum":" 6639","line":"      { return std::_Hash_impl::hash(__s.data(),"},
{"lineNum":" 6640","line":"                                     __s.length() * sizeof(char32_t)); }"},
{"lineNum":" 6641","line":"    };"},
{"lineNum":" 6642","line":""},
{"lineNum":" 6643","line":"  template<>"},
{"lineNum":" 6644","line":"    struct __is_fast_hash<hash<u32string>> : std::false_type"},
{"lineNum":" 6645","line":"    { };"},
{"lineNum":" 6646","line":"#endif"},
{"lineNum":" 6647","line":""},
{"lineNum":" 6648","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":" 6649","line":""},
{"lineNum":" 6650","line":"#if __cplusplus > 201103L"},
{"lineNum":" 6651","line":""},
{"lineNum":" 6652","line":"#define __cpp_lib_string_udls 201304"},
{"lineNum":" 6653","line":""},
{"lineNum":" 6654","line":"  inline namespace literals"},
{"lineNum":" 6655","line":"  {"},
{"lineNum":" 6656","line":"  inline namespace string_literals"},
{"lineNum":" 6657","line":"  {"},
{"lineNum":" 6658","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":" 6659","line":""},
{"lineNum":" 6660","line":"    _GLIBCXX_DEFAULT_ABI_TAG"},
{"lineNum":" 6661","line":"    inline basic_string<char>"},
{"lineNum":" 6662","line":"    operator\"\"s(const char* __str, size_t __len)"},
{"lineNum":" 6663","line":"    { return basic_string<char>{__str, __len}; }"},
{"lineNum":" 6664","line":""},
{"lineNum":" 6665","line":"#ifdef _GLIBCXX_USE_WCHAR_T"},
{"lineNum":" 6666","line":"    _GLIBCXX_DEFAULT_ABI_TAG"},
{"lineNum":" 6667","line":"    inline basic_string<wchar_t>"},
{"lineNum":" 6668","line":"    operator\"\"s(const wchar_t* __str, size_t __len)"},
{"lineNum":" 6669","line":"    { return basic_string<wchar_t>{__str, __len}; }"},
{"lineNum":" 6670","line":"#endif"},
{"lineNum":" 6671","line":""},
{"lineNum":" 6672","line":"#ifdef _GLIBCXX_USE_C99_STDINT_TR1"},
{"lineNum":" 6673","line":"    _GLIBCXX_DEFAULT_ABI_TAG"},
{"lineNum":" 6674","line":"    inline basic_string<char16_t>"},
{"lineNum":" 6675","line":"    operator\"\"s(const char16_t* __str, size_t __len)"},
{"lineNum":" 6676","line":"    { return basic_string<char16_t>{__str, __len}; }"},
{"lineNum":" 6677","line":""},
{"lineNum":" 6678","line":"    _GLIBCXX_DEFAULT_ABI_TAG"},
{"lineNum":" 6679","line":"    inline basic_string<char32_t>"},
{"lineNum":" 6680","line":"    operator\"\"s(const char32_t* __str, size_t __len)"},
{"lineNum":" 6681","line":"    { return basic_string<char32_t>{__str, __len}; }"},
{"lineNum":" 6682","line":"#endif"},
{"lineNum":" 6683","line":""},
{"lineNum":" 6684","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":" 6685","line":"  } // inline namespace string_literals"},
{"lineNum":" 6686","line":"  } // inline namespace literals"},
{"lineNum":" 6687","line":""},
{"lineNum":" 6688","line":"#endif // __cplusplus > 201103L"},
{"lineNum":" 6689","line":""},
{"lineNum":" 6690","line":"} // namespace std"},
{"lineNum":" 6691","line":""},
{"lineNum":" 6692","line":"#endif // C++11"},
{"lineNum":" 6693","line":""},
{"lineNum":" 6694","line":"#endif /* _BASIC_STRING_H */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "mipl_parser", "date" : "2018-11-28 14:11:03", "instrumented" : 2, "covered" : 2,};
var merged_data = [];
