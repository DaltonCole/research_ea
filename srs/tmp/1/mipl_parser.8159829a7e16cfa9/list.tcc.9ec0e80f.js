var data = {lines:[
{"lineNum":"    1","line":"// List implementation (out of line) -*- C++ -*-"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 2001-2017 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This file is part of the GNU ISO C++ Library.  This library is free"},
{"lineNum":"    6","line":"// software; you can redistribute it and/or modify it under the"},
{"lineNum":"    7","line":"// terms of the GNU General Public License as published by the"},
{"lineNum":"    8","line":"// Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    9","line":"// any later version."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// This library is distributed in the hope that it will be useful,"},
{"lineNum":"   12","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   13","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   14","line":"// GNU General Public License for more details."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   17","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   18","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   21","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   22","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   23","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/*"},
{"lineNum":"   26","line":" *"},
{"lineNum":"   27","line":" * Copyright (c) 1994"},
{"lineNum":"   28","line":" * Hewlett-Packard Company"},
{"lineNum":"   29","line":" *"},
{"lineNum":"   30","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   31","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   32","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   33","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   34","line":" * in supporting documentation.  Hewlett-Packard Company makes no"},
{"lineNum":"   35","line":" * representations about the suitability of this software for any"},
{"lineNum":"   36","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   37","line":" *"},
{"lineNum":"   38","line":" *"},
{"lineNum":"   39","line":" * Copyright (c) 1996,1997"},
{"lineNum":"   40","line":" * Silicon Graphics Computer Systems, Inc."},
{"lineNum":"   41","line":" *"},
{"lineNum":"   42","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   43","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   44","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   45","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   46","line":" * in supporting documentation.  Silicon Graphics makes no"},
{"lineNum":"   47","line":" * representations about the suitability of this software for any"},
{"lineNum":"   48","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   49","line":" */"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"/** @file bits/list.tcc"},
{"lineNum":"   52","line":" *  This is an internal header file, included by other library headers."},
{"lineNum":"   53","line":" *  Do not attempt to use it directly. @headername{list}"},
{"lineNum":"   54","line":" */"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"#ifndef _LIST_TCC"},
{"lineNum":"   57","line":"#define _LIST_TCC 1"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   60","line":"{"},
{"lineNum":"   61","line":"_GLIBCXX_BEGIN_NAMESPACE_CONTAINER"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"   64","line":"    void"},
{"lineNum":"   65","line":"    _List_base<_Tp, _Alloc>::","class":"lineCov","hits":"1","order":"1592","possible_hits":"1",},
{"lineNum":"   66","line":"    _M_clear() _GLIBCXX_NOEXCEPT"},
{"lineNum":"   67","line":"    {"},
{"lineNum":"   68","line":"      typedef _List_node<_Tp>  _Node;"},
{"lineNum":"   69","line":"      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;","class":"lineCov","hits":"1","order":"1593","possible_hits":"1",},
{"lineNum":"   70","line":"      while (__cur != &_M_impl._M_node)","class":"linePartCov","hits":"1","order":"1594","possible_hits":"2",},
{"lineNum":"   71","line":"\t{"},
{"lineNum":"   72","line":"\t  _Node* __tmp = static_cast<_Node*>(__cur);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   73","line":"\t  __cur = __tmp->_M_next;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"\t  _Tp* __val = __tmp->_M_valptr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   76","line":"\t  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"#else"},
{"lineNum":"   78","line":"\t  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);"},
{"lineNum":"   79","line":"#endif"},
{"lineNum":"   80","line":"\t  _M_put_node(__tmp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"\t}"},
{"lineNum":"   82","line":"    }","class":"linePartCov","hits":"1","order":"1595","possible_hits":"2",},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   85","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"   86","line":"    template<typename... _Args>"},
{"lineNum":"   87","line":"      typename list<_Tp, _Alloc>::iterator"},
{"lineNum":"   88","line":"      list<_Tp, _Alloc>::"},
{"lineNum":"   89","line":"      emplace(const_iterator __position, _Args&&... __args)"},
{"lineNum":"   90","line":"      {"},
{"lineNum":"   91","line":"\t_Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);"},
{"lineNum":"   92","line":"\t__tmp->_M_hook(__position._M_const_cast()._M_node);"},
{"lineNum":"   93","line":"\tthis->_M_inc_size(1);"},
{"lineNum":"   94","line":"\treturn iterator(__tmp);"},
{"lineNum":"   95","line":"      }"},
{"lineNum":"   96","line":"#endif"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"   99","line":"    typename list<_Tp, _Alloc>::iterator"},
{"lineNum":"  100","line":"    list<_Tp, _Alloc>::"},
{"lineNum":"  101","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  102","line":"    insert(const_iterator __position, const value_type& __x)"},
{"lineNum":"  103","line":"#else"},
{"lineNum":"  104","line":"    insert(iterator __position, const value_type& __x)"},
{"lineNum":"  105","line":"#endif"},
{"lineNum":"  106","line":"    {"},
{"lineNum":"  107","line":"      _Node* __tmp = _M_create_node(__x);"},
{"lineNum":"  108","line":"      __tmp->_M_hook(__position._M_const_cast()._M_node);"},
{"lineNum":"  109","line":"      this->_M_inc_size(1);"},
{"lineNum":"  110","line":"      return iterator(__tmp);"},
{"lineNum":"  111","line":"    }"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  114","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  115","line":"    typename list<_Tp, _Alloc>::iterator"},
{"lineNum":"  116","line":"    list<_Tp, _Alloc>::"},
{"lineNum":"  117","line":"    insert(const_iterator __position, size_type __n, const value_type& __x)"},
{"lineNum":"  118","line":"    {"},
{"lineNum":"  119","line":"      if (__n)"},
{"lineNum":"  120","line":"\t{"},
{"lineNum":"  121","line":"\t  list __tmp(__n, __x, get_allocator());"},
{"lineNum":"  122","line":"\t  iterator __it = __tmp.begin();"},
{"lineNum":"  123","line":"\t  splice(__position, __tmp);"},
{"lineNum":"  124","line":"\t  return __it;"},
{"lineNum":"  125","line":"\t}"},
{"lineNum":"  126","line":"      return __position._M_const_cast();"},
{"lineNum":"  127","line":"    }"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  130","line":"    template<typename _InputIterator, typename>"},
{"lineNum":"  131","line":"      typename list<_Tp, _Alloc>::iterator"},
{"lineNum":"  132","line":"      list<_Tp, _Alloc>::"},
{"lineNum":"  133","line":"      insert(const_iterator __position, _InputIterator __first,"},
{"lineNum":"  134","line":"\t     _InputIterator __last)"},
{"lineNum":"  135","line":"      {"},
{"lineNum":"  136","line":"\tlist __tmp(__first, __last, get_allocator());"},
{"lineNum":"  137","line":"\tif (!__tmp.empty())"},
{"lineNum":"  138","line":"\t  {"},
{"lineNum":"  139","line":"\t    iterator __it = __tmp.begin();"},
{"lineNum":"  140","line":"\t    splice(__position, __tmp);"},
{"lineNum":"  141","line":"\t    return __it;"},
{"lineNum":"  142","line":"\t  }"},
{"lineNum":"  143","line":"\treturn __position._M_const_cast();"},
{"lineNum":"  144","line":"      }"},
{"lineNum":"  145","line":"#endif"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  148","line":"    typename list<_Tp, _Alloc>::iterator"},
{"lineNum":"  149","line":"    list<_Tp, _Alloc>::"},
{"lineNum":"  150","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  151","line":"    erase(const_iterator __position) noexcept"},
{"lineNum":"  152","line":"#else"},
{"lineNum":"  153","line":"    erase(iterator __position)"},
{"lineNum":"  154","line":"#endif"},
{"lineNum":"  155","line":"    {"},
{"lineNum":"  156","line":"      iterator __ret = iterator(__position._M_node->_M_next);"},
{"lineNum":"  157","line":"      _M_erase(__position._M_const_cast());"},
{"lineNum":"  158","line":"      return __ret;"},
{"lineNum":"  159","line":"    }"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"  // Return a const_iterator indicating the position to start inserting or"},
{"lineNum":"  162","line":"  // erasing elements (depending whether the list is growing or shrinking),"},
{"lineNum":"  163","line":"  // and set __new_size to the number of new elements that must be appended."},
{"lineNum":"  164","line":"  // Equivalent to the following, but performed optimally:"},
{"lineNum":"  165","line":"  // if (__new_size < size()) {"},
{"lineNum":"  166","line":"  //   __new_size = 0;"},
{"lineNum":"  167","line":"  //   return std::next(begin(), __new_size);"},
{"lineNum":"  168","line":"  // } else {"},
{"lineNum":"  169","line":"  //   __newsize -= size();"},
{"lineNum":"  170","line":"  //   return end();"},
{"lineNum":"  171","line":"  // }"},
{"lineNum":"  172","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  173","line":"    typename list<_Tp, _Alloc>::const_iterator"},
{"lineNum":"  174","line":"    list<_Tp, _Alloc>::"},
{"lineNum":"  175","line":"    _M_resize_pos(size_type& __new_size) const"},
{"lineNum":"  176","line":"    {"},
{"lineNum":"  177","line":"      const_iterator __i;"},
{"lineNum":"  178","line":"#if _GLIBCXX_USE_CXX11_ABI"},
{"lineNum":"  179","line":"      const size_type __len = size();"},
{"lineNum":"  180","line":"      if (__new_size < __len)"},
{"lineNum":"  181","line":"\t{"},
{"lineNum":"  182","line":"\t  if (__new_size <= __len / 2)"},
{"lineNum":"  183","line":"\t    {"},
{"lineNum":"  184","line":"\t      __i = begin();"},
{"lineNum":"  185","line":"\t      std::advance(__i, __new_size);"},
{"lineNum":"  186","line":"\t    }"},
{"lineNum":"  187","line":"\t  else"},
{"lineNum":"  188","line":"\t    {"},
{"lineNum":"  189","line":"\t      __i = end();"},
{"lineNum":"  190","line":"\t      ptrdiff_t __num_erase = __len - __new_size;"},
{"lineNum":"  191","line":"\t      std::advance(__i, -__num_erase);"},
{"lineNum":"  192","line":"\t    }"},
{"lineNum":"  193","line":"\t  __new_size = 0;"},
{"lineNum":"  194","line":"\t  return __i;"},
{"lineNum":"  195","line":"\t}"},
{"lineNum":"  196","line":"      else"},
{"lineNum":"  197","line":"\t__i = end();"},
{"lineNum":"  198","line":"#else"},
{"lineNum":"  199","line":"      size_type __len = 0;"},
{"lineNum":"  200","line":"      for (__i = begin(); __i != end() && __len < __new_size; ++__i, ++__len)"},
{"lineNum":"  201","line":"        ;"},
{"lineNum":"  202","line":"#endif"},
{"lineNum":"  203","line":"      __new_size -= __len;"},
{"lineNum":"  204","line":"      return __i;"},
{"lineNum":"  205","line":"    }"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  208","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  209","line":"    void"},
{"lineNum":"  210","line":"    list<_Tp, _Alloc>::"},
{"lineNum":"  211","line":"    _M_default_append(size_type __n)"},
{"lineNum":"  212","line":"    {"},
{"lineNum":"  213","line":"      size_type __i = 0;"},
{"lineNum":"  214","line":"      __try"},
{"lineNum":"  215","line":"\t{"},
{"lineNum":"  216","line":"\t  for (; __i < __n; ++__i)"},
{"lineNum":"  217","line":"\t    emplace_back();"},
{"lineNum":"  218","line":"\t}"},
{"lineNum":"  219","line":"      __catch(...)"},
{"lineNum":"  220","line":"\t{"},
{"lineNum":"  221","line":"\t  for (; __i; --__i)"},
{"lineNum":"  222","line":"\t    pop_back();"},
{"lineNum":"  223","line":"\t  __throw_exception_again;"},
{"lineNum":"  224","line":"\t}"},
{"lineNum":"  225","line":"    }"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  228","line":"    void"},
{"lineNum":"  229","line":"    list<_Tp, _Alloc>::"},
{"lineNum":"  230","line":"    resize(size_type __new_size)"},
{"lineNum":"  231","line":"    {"},
{"lineNum":"  232","line":"      const_iterator __i = _M_resize_pos(__new_size);"},
{"lineNum":"  233","line":"      if (__new_size)"},
{"lineNum":"  234","line":"\t_M_default_append(__new_size);"},
{"lineNum":"  235","line":"      else"},
{"lineNum":"  236","line":"        erase(__i, end());"},
{"lineNum":"  237","line":"    }"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  240","line":"    void"},
{"lineNum":"  241","line":"    list<_Tp, _Alloc>::"},
{"lineNum":"  242","line":"    resize(size_type __new_size, const value_type& __x)"},
{"lineNum":"  243","line":"    {"},
{"lineNum":"  244","line":"      const_iterator __i = _M_resize_pos(__new_size);"},
{"lineNum":"  245","line":"      if (__new_size)"},
{"lineNum":"  246","line":"        insert(end(), __new_size, __x);"},
{"lineNum":"  247","line":"      else"},
{"lineNum":"  248","line":"        erase(__i, end());"},
{"lineNum":"  249","line":"    }"},
{"lineNum":"  250","line":"#else"},
{"lineNum":"  251","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  252","line":"    void"},
{"lineNum":"  253","line":"    list<_Tp, _Alloc>::"},
{"lineNum":"  254","line":"    resize(size_type __new_size, value_type __x)"},
{"lineNum":"  255","line":"    {"},
{"lineNum":"  256","line":"      const_iterator __i = _M_resize_pos(__new_size);"},
{"lineNum":"  257","line":"      if (__new_size)"},
{"lineNum":"  258","line":"        insert(end(), __new_size, __x);"},
{"lineNum":"  259","line":"      else"},
{"lineNum":"  260","line":"        erase(__i._M_const_cast(), end());"},
{"lineNum":"  261","line":"    }"},
{"lineNum":"  262","line":"#endif"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  265","line":"    list<_Tp, _Alloc>&"},
{"lineNum":"  266","line":"    list<_Tp, _Alloc>::"},
{"lineNum":"  267","line":"    operator=(const list& __x)"},
{"lineNum":"  268","line":"    {"},
{"lineNum":"  269","line":"      if (this != std::__addressof(__x))"},
{"lineNum":"  270","line":"\t{"},
{"lineNum":"  271","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  272","line":"\t  if (_Node_alloc_traits::_S_propagate_on_copy_assign())"},
{"lineNum":"  273","line":"\t    {"},
{"lineNum":"  274","line":"              auto& __this_alloc = this->_M_get_Node_allocator();"},
{"lineNum":"  275","line":"              auto& __that_alloc = __x._M_get_Node_allocator();"},
{"lineNum":"  276","line":"              if (!_Node_alloc_traits::_S_always_equal()"},
{"lineNum":"  277","line":"\t          && __this_alloc != __that_alloc)"},
{"lineNum":"  278","line":"\t        {"},
{"lineNum":"  279","line":"\t\t  // replacement allocator cannot free existing storage"},
{"lineNum":"  280","line":"\t\t  clear();"},
{"lineNum":"  281","line":"\t\t}"},
{"lineNum":"  282","line":"\t      std::__alloc_on_copy(__this_alloc, __that_alloc);"},
{"lineNum":"  283","line":"            }"},
{"lineNum":"  284","line":"#endif"},
{"lineNum":"  285","line":"\t  _M_assign_dispatch(__x.begin(), __x.end(), __false_type());"},
{"lineNum":"  286","line":"\t}"},
{"lineNum":"  287","line":"      return *this;"},
{"lineNum":"  288","line":"    }"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  291","line":"    void"},
{"lineNum":"  292","line":"    list<_Tp, _Alloc>::"},
{"lineNum":"  293","line":"    _M_fill_assign(size_type __n, const value_type& __val)"},
{"lineNum":"  294","line":"    {"},
{"lineNum":"  295","line":"      iterator __i = begin();"},
{"lineNum":"  296","line":"      for (; __i != end() && __n > 0; ++__i, --__n)"},
{"lineNum":"  297","line":"        *__i = __val;"},
{"lineNum":"  298","line":"      if (__n > 0)"},
{"lineNum":"  299","line":"        insert(end(), __n, __val);"},
{"lineNum":"  300","line":"      else"},
{"lineNum":"  301","line":"        erase(__i, end());"},
{"lineNum":"  302","line":"    }"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  305","line":"    template <typename _InputIterator>"},
{"lineNum":"  306","line":"      void"},
{"lineNum":"  307","line":"      list<_Tp, _Alloc>::"},
{"lineNum":"  308","line":"      _M_assign_dispatch(_InputIterator __first2, _InputIterator __last2,"},
{"lineNum":"  309","line":"\t\t\t __false_type)"},
{"lineNum":"  310","line":"      {"},
{"lineNum":"  311","line":"        iterator __first1 = begin();"},
{"lineNum":"  312","line":"        iterator __last1 = end();"},
{"lineNum":"  313","line":"        for (; __first1 != __last1 && __first2 != __last2;"},
{"lineNum":"  314","line":"\t     ++__first1, ++__first2)"},
{"lineNum":"  315","line":"          *__first1 = *__first2;"},
{"lineNum":"  316","line":"        if (__first2 == __last2)"},
{"lineNum":"  317","line":"          erase(__first1, __last1);"},
{"lineNum":"  318","line":"        else"},
{"lineNum":"  319","line":"          insert(__last1, __first2, __last2);"},
{"lineNum":"  320","line":"      }"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  323","line":"    void"},
{"lineNum":"  324","line":"    list<_Tp, _Alloc>::"},
{"lineNum":"  325","line":"    remove(const value_type& __value)"},
{"lineNum":"  326","line":"    {"},
{"lineNum":"  327","line":"      iterator __first = begin();"},
{"lineNum":"  328","line":"      iterator __last = end();"},
{"lineNum":"  329","line":"      iterator __extra = __last;"},
{"lineNum":"  330","line":"      while (__first != __last)"},
{"lineNum":"  331","line":"\t{"},
{"lineNum":"  332","line":"\t  iterator __next = __first;"},
{"lineNum":"  333","line":"\t  ++__next;"},
{"lineNum":"  334","line":"\t  if (*__first == __value)"},
{"lineNum":"  335","line":"\t    {"},
{"lineNum":"  336","line":"\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  337","line":"\t      // 526. Is it undefined if a function in the standard changes"},
{"lineNum":"  338","line":"\t      // in parameters?"},
{"lineNum":"  339","line":"\t      if (std::__addressof(*__first) != std::__addressof(__value))"},
{"lineNum":"  340","line":"\t\t_M_erase(__first);"},
{"lineNum":"  341","line":"\t      else"},
{"lineNum":"  342","line":"\t\t__extra = __first;"},
{"lineNum":"  343","line":"\t    }"},
{"lineNum":"  344","line":"\t  __first = __next;"},
{"lineNum":"  345","line":"\t}"},
{"lineNum":"  346","line":"      if (__extra != __last)"},
{"lineNum":"  347","line":"\t_M_erase(__extra);"},
{"lineNum":"  348","line":"    }"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  351","line":"    void"},
{"lineNum":"  352","line":"    list<_Tp, _Alloc>::"},
{"lineNum":"  353","line":"    unique()"},
{"lineNum":"  354","line":"    {"},
{"lineNum":"  355","line":"      iterator __first = begin();"},
{"lineNum":"  356","line":"      iterator __last = end();"},
{"lineNum":"  357","line":"      if (__first == __last)"},
{"lineNum":"  358","line":"\treturn;"},
{"lineNum":"  359","line":"      iterator __next = __first;"},
{"lineNum":"  360","line":"      while (++__next != __last)"},
{"lineNum":"  361","line":"\t{"},
{"lineNum":"  362","line":"\t  if (*__first == *__next)"},
{"lineNum":"  363","line":"\t    _M_erase(__next);"},
{"lineNum":"  364","line":"\t  else"},
{"lineNum":"  365","line":"\t    __first = __next;"},
{"lineNum":"  366","line":"\t  __next = __first;"},
{"lineNum":"  367","line":"\t}"},
{"lineNum":"  368","line":"    }"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  371","line":"    void"},
{"lineNum":"  372","line":"    list<_Tp, _Alloc>::"},
{"lineNum":"  373","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  374","line":"    merge(list&& __x)"},
{"lineNum":"  375","line":"#else"},
{"lineNum":"  376","line":"    merge(list& __x)"},
{"lineNum":"  377","line":"#endif"},
{"lineNum":"  378","line":"    {"},
{"lineNum":"  379","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  380","line":"      // 300. list::merge() specification incomplete"},
{"lineNum":"  381","line":"      if (this != std::__addressof(__x))"},
{"lineNum":"  382","line":"\t{"},
{"lineNum":"  383","line":"\t  _M_check_equal_allocators(__x);"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"\t  iterator __first1 = begin();"},
{"lineNum":"  386","line":"\t  iterator __last1 = end();"},
{"lineNum":"  387","line":"\t  iterator __first2 = __x.begin();"},
{"lineNum":"  388","line":"\t  iterator __last2 = __x.end();"},
{"lineNum":"  389","line":"\t  const size_t __orig_size = __x.size();"},
{"lineNum":"  390","line":"\t  __try {"},
{"lineNum":"  391","line":"\t    while (__first1 != __last1 && __first2 != __last2)"},
{"lineNum":"  392","line":"\t      if (*__first2 < *__first1)"},
{"lineNum":"  393","line":"\t\t{"},
{"lineNum":"  394","line":"\t\t  iterator __next = __first2;"},
{"lineNum":"  395","line":"\t\t  _M_transfer(__first1, __first2, ++__next);"},
{"lineNum":"  396","line":"\t\t  __first2 = __next;"},
{"lineNum":"  397","line":"\t\t}"},
{"lineNum":"  398","line":"\t      else"},
{"lineNum":"  399","line":"\t\t++__first1;"},
{"lineNum":"  400","line":"\t    if (__first2 != __last2)"},
{"lineNum":"  401","line":"\t      _M_transfer(__last1, __first2, __last2);"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"\t    this->_M_inc_size(__x._M_get_size());"},
{"lineNum":"  404","line":"\t    __x._M_set_size(0);"},
{"lineNum":"  405","line":"\t  }"},
{"lineNum":"  406","line":"\t  __catch(...)"},
{"lineNum":"  407","line":"\t    {"},
{"lineNum":"  408","line":"\t      const size_t __dist = std::distance(__first2, __last2);"},
{"lineNum":"  409","line":"\t      this->_M_inc_size(__orig_size - __dist);"},
{"lineNum":"  410","line":"\t      __x._M_set_size(__dist);"},
{"lineNum":"  411","line":"\t      __throw_exception_again;"},
{"lineNum":"  412","line":"\t    }"},
{"lineNum":"  413","line":"\t}"},
{"lineNum":"  414","line":"    }"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  417","line":"    template <typename _StrictWeakOrdering>"},
{"lineNum":"  418","line":"      void"},
{"lineNum":"  419","line":"      list<_Tp, _Alloc>::"},
{"lineNum":"  420","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  421","line":"      merge(list&& __x, _StrictWeakOrdering __comp)"},
{"lineNum":"  422","line":"#else"},
{"lineNum":"  423","line":"      merge(list& __x, _StrictWeakOrdering __comp)"},
{"lineNum":"  424","line":"#endif"},
{"lineNum":"  425","line":"      {"},
{"lineNum":"  426","line":"\t// _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  427","line":"\t// 300. list::merge() specification incomplete"},
{"lineNum":"  428","line":"\tif (this != std::__addressof(__x))"},
{"lineNum":"  429","line":"\t  {"},
{"lineNum":"  430","line":"\t    _M_check_equal_allocators(__x);"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"\t    iterator __first1 = begin();"},
{"lineNum":"  433","line":"\t    iterator __last1 = end();"},
{"lineNum":"  434","line":"\t    iterator __first2 = __x.begin();"},
{"lineNum":"  435","line":"\t    iterator __last2 = __x.end();"},
{"lineNum":"  436","line":"\t    const size_t __orig_size = __x.size();"},
{"lineNum":"  437","line":"\t    __try"},
{"lineNum":"  438","line":"\t      {"},
{"lineNum":"  439","line":"\t\twhile (__first1 != __last1 && __first2 != __last2)"},
{"lineNum":"  440","line":"\t\t  if (__comp(*__first2, *__first1))"},
{"lineNum":"  441","line":"\t\t    {"},
{"lineNum":"  442","line":"\t\t      iterator __next = __first2;"},
{"lineNum":"  443","line":"\t\t      _M_transfer(__first1, __first2, ++__next);"},
{"lineNum":"  444","line":"\t\t      __first2 = __next;"},
{"lineNum":"  445","line":"\t\t    }"},
{"lineNum":"  446","line":"\t\t  else"},
{"lineNum":"  447","line":"\t\t    ++__first1;"},
{"lineNum":"  448","line":"\t\tif (__first2 != __last2)"},
{"lineNum":"  449","line":"\t\t  _M_transfer(__last1, __first2, __last2);"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"\t\tthis->_M_inc_size(__x._M_get_size());"},
{"lineNum":"  452","line":"\t\t__x._M_set_size(0);"},
{"lineNum":"  453","line":"\t      }"},
{"lineNum":"  454","line":"\t    __catch(...)"},
{"lineNum":"  455","line":"\t      {"},
{"lineNum":"  456","line":"\t\tconst size_t __dist = std::distance(__first2, __last2);"},
{"lineNum":"  457","line":"\t\tthis->_M_inc_size(__orig_size - __dist);"},
{"lineNum":"  458","line":"\t\t__x._M_set_size(__dist);"},
{"lineNum":"  459","line":"\t\t__throw_exception_again;"},
{"lineNum":"  460","line":"\t      }"},
{"lineNum":"  461","line":"\t  }"},
{"lineNum":"  462","line":"      }"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  465","line":"    void"},
{"lineNum":"  466","line":"    list<_Tp, _Alloc>::"},
{"lineNum":"  467","line":"    sort()"},
{"lineNum":"  468","line":"    {"},
{"lineNum":"  469","line":"      // Do nothing if the list has length 0 or 1."},
{"lineNum":"  470","line":"      if (this->_M_impl._M_node._M_next != &this->_M_impl._M_node"},
{"lineNum":"  471","line":"\t  && this->_M_impl._M_node._M_next->_M_next != &this->_M_impl._M_node)"},
{"lineNum":"  472","line":"      {"},
{"lineNum":"  473","line":"        list __carry;"},
{"lineNum":"  474","line":"        list __tmp[64];"},
{"lineNum":"  475","line":"        list * __fill = __tmp;"},
{"lineNum":"  476","line":"        list * __counter;"},
{"lineNum":"  477","line":"\t__try"},
{"lineNum":"  478","line":"\t  {"},
{"lineNum":"  479","line":"\t    do"},
{"lineNum":"  480","line":"\t      {"},
{"lineNum":"  481","line":"\t\t__carry.splice(__carry.begin(), *this, begin());"},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"\t\tfor(__counter = __tmp;"},
{"lineNum":"  484","line":"\t\t    __counter != __fill && !__counter->empty();"},
{"lineNum":"  485","line":"\t\t    ++__counter)"},
{"lineNum":"  486","line":"\t\t  {"},
{"lineNum":"  487","line":"\t\t    __counter->merge(__carry);"},
{"lineNum":"  488","line":"\t\t    __carry.swap(*__counter);"},
{"lineNum":"  489","line":"\t\t  }"},
{"lineNum":"  490","line":"\t\t__carry.swap(*__counter);"},
{"lineNum":"  491","line":"\t\tif (__counter == __fill)"},
{"lineNum":"  492","line":"\t\t  ++__fill;"},
{"lineNum":"  493","line":"\t      }"},
{"lineNum":"  494","line":"\t    while ( !empty() );"},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"\t    for (__counter = __tmp + 1; __counter != __fill; ++__counter)"},
{"lineNum":"  497","line":"\t      __counter->merge(*(__counter - 1));"},
{"lineNum":"  498","line":"\t    swap( *(__fill - 1) );"},
{"lineNum":"  499","line":"\t  }"},
{"lineNum":"  500","line":"\t__catch(...)"},
{"lineNum":"  501","line":"\t  {"},
{"lineNum":"  502","line":"\t    this->splice(this->end(), __carry);"},
{"lineNum":"  503","line":"\t    for (int __i = 0; __i < sizeof(__tmp)/sizeof(__tmp[0]); ++__i)"},
{"lineNum":"  504","line":"\t      this->splice(this->end(), __tmp[__i]);"},
{"lineNum":"  505","line":"\t    __throw_exception_again;"},
{"lineNum":"  506","line":"\t  }"},
{"lineNum":"  507","line":"      }"},
{"lineNum":"  508","line":"    }"},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  511","line":"    template <typename _Predicate>"},
{"lineNum":"  512","line":"      void"},
{"lineNum":"  513","line":"      list<_Tp, _Alloc>::"},
{"lineNum":"  514","line":"      remove_if(_Predicate __pred)"},
{"lineNum":"  515","line":"      {"},
{"lineNum":"  516","line":"        iterator __first = begin();"},
{"lineNum":"  517","line":"        iterator __last = end();"},
{"lineNum":"  518","line":"        while (__first != __last)"},
{"lineNum":"  519","line":"\t  {"},
{"lineNum":"  520","line":"\t    iterator __next = __first;"},
{"lineNum":"  521","line":"\t    ++__next;"},
{"lineNum":"  522","line":"\t    if (__pred(*__first))"},
{"lineNum":"  523","line":"\t      _M_erase(__first);"},
{"lineNum":"  524","line":"\t    __first = __next;"},
{"lineNum":"  525","line":"\t  }"},
{"lineNum":"  526","line":"      }"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  529","line":"    template <typename _BinaryPredicate>"},
{"lineNum":"  530","line":"      void"},
{"lineNum":"  531","line":"      list<_Tp, _Alloc>::"},
{"lineNum":"  532","line":"      unique(_BinaryPredicate __binary_pred)"},
{"lineNum":"  533","line":"      {"},
{"lineNum":"  534","line":"        iterator __first = begin();"},
{"lineNum":"  535","line":"        iterator __last = end();"},
{"lineNum":"  536","line":"        if (__first == __last)"},
{"lineNum":"  537","line":"\t  return;"},
{"lineNum":"  538","line":"        iterator __next = __first;"},
{"lineNum":"  539","line":"        while (++__next != __last)"},
{"lineNum":"  540","line":"\t  {"},
{"lineNum":"  541","line":"\t    if (__binary_pred(*__first, *__next))"},
{"lineNum":"  542","line":"\t      _M_erase(__next);"},
{"lineNum":"  543","line":"\t    else"},
{"lineNum":"  544","line":"\t      __first = __next;"},
{"lineNum":"  545","line":"\t    __next = __first;"},
{"lineNum":"  546","line":"\t  }"},
{"lineNum":"  547","line":"      }"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  550","line":"    template <typename _StrictWeakOrdering>"},
{"lineNum":"  551","line":"      void"},
{"lineNum":"  552","line":"      list<_Tp, _Alloc>::"},
{"lineNum":"  553","line":"      sort(_StrictWeakOrdering __comp)"},
{"lineNum":"  554","line":"      {"},
{"lineNum":"  555","line":"\t// Do nothing if the list has length 0 or 1."},
{"lineNum":"  556","line":"\tif (this->_M_impl._M_node._M_next != &this->_M_impl._M_node"},
{"lineNum":"  557","line":"\t    && this->_M_impl._M_node._M_next->_M_next != &this->_M_impl._M_node)"},
{"lineNum":"  558","line":"\t  {"},
{"lineNum":"  559","line":"\t    list __carry;"},
{"lineNum":"  560","line":"\t    list __tmp[64];"},
{"lineNum":"  561","line":"\t    list * __fill = __tmp;"},
{"lineNum":"  562","line":"\t    list * __counter;"},
{"lineNum":"  563","line":"\t    __try"},
{"lineNum":"  564","line":"\t      {"},
{"lineNum":"  565","line":"\t\tdo"},
{"lineNum":"  566","line":"\t\t  {"},
{"lineNum":"  567","line":"\t\t    __carry.splice(__carry.begin(), *this, begin());"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"\t\t    for(__counter = __tmp;"},
{"lineNum":"  570","line":"\t\t\t__counter != __fill && !__counter->empty();"},
{"lineNum":"  571","line":"\t\t\t++__counter)"},
{"lineNum":"  572","line":"\t\t      {"},
{"lineNum":"  573","line":"\t\t\t__counter->merge(__carry, __comp);"},
{"lineNum":"  574","line":"\t\t\t__carry.swap(*__counter);"},
{"lineNum":"  575","line":"\t\t      }"},
{"lineNum":"  576","line":"\t\t    __carry.swap(*__counter);"},
{"lineNum":"  577","line":"\t\t    if (__counter == __fill)"},
{"lineNum":"  578","line":"\t\t      ++__fill;"},
{"lineNum":"  579","line":"\t\t  }"},
{"lineNum":"  580","line":"\t\twhile ( !empty() );"},
{"lineNum":"  581","line":""},
{"lineNum":"  582","line":"\t\tfor (__counter = __tmp + 1; __counter != __fill; ++__counter)"},
{"lineNum":"  583","line":"\t\t  __counter->merge(*(__counter - 1), __comp);"},
{"lineNum":"  584","line":"\t\tswap(*(__fill - 1));"},
{"lineNum":"  585","line":"\t      }"},
{"lineNum":"  586","line":"\t    __catch(...)"},
{"lineNum":"  587","line":"\t      {"},
{"lineNum":"  588","line":"\t\tthis->splice(this->end(), __carry);"},
{"lineNum":"  589","line":"\t\tfor (int __i = 0; __i < sizeof(__tmp)/sizeof(__tmp[0]); ++__i)"},
{"lineNum":"  590","line":"\t\t  this->splice(this->end(), __tmp[__i]);"},
{"lineNum":"  591","line":"\t\t__throw_exception_again;"},
{"lineNum":"  592","line":"\t      }"},
{"lineNum":"  593","line":"\t  }"},
{"lineNum":"  594","line":"      }"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"_GLIBCXX_END_NAMESPACE_CONTAINER"},
{"lineNum":"  597","line":"} // namespace std"},
{"lineNum":"  598","line":""},
{"lineNum":"  599","line":"#endif /* _LIST_TCC */"},
{"lineNum":"  600","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "mipl_parser", "date" : "2018-11-28 14:11:03", "instrumented" : 9, "covered" : 4,};
var merged_data = [];
