var data = {lines:[
{"lineNum":"    1","line":"// The -*- C++ -*- dynamic memory management header."},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 1994-2017 Free Software Foundation, Inc."},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"// This file is part of GCC."},
{"lineNum":"    6","line":"//"},
{"lineNum":"    7","line":"// GCC is free software; you can redistribute it and/or modify"},
{"lineNum":"    8","line":"// it under the terms of the GNU General Public License as published by"},
{"lineNum":"    9","line":"// the Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"   10","line":"// any later version."},
{"lineNum":"   11","line":"//"},
{"lineNum":"   12","line":"// GCC is distributed in the hope that it will be useful,"},
{"lineNum":"   13","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   14","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   15","line":"// GNU General Public License for more details."},
{"lineNum":"   16","line":"//"},
{"lineNum":"   17","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   18","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   19","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   22","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   23","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   24","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"/** @file new"},
{"lineNum":"   27","line":" *  This is a Standard C++ Library header."},
{"lineNum":"   28","line":" *"},
{"lineNum":"   29","line":" *  The header @c new defines several functions to manage dynamic memory and"},
{"lineNum":"   30","line":" *  handling memory allocation errors; see"},
{"lineNum":"   31","line":" *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more."},
{"lineNum":"   32","line":" */"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"#ifndef _NEW"},
{"lineNum":"   35","line":"#define _NEW"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"#pragma GCC system_header"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"#include <bits/c++config.h>"},
{"lineNum":"   40","line":"#include <exception>"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"#pragma GCC visibility push(default)"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"extern \"C++\" {"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"namespace std"},
{"lineNum":"   47","line":"{"},
{"lineNum":"   48","line":"  /**"},
{"lineNum":"   49","line":"   *  @brief  Exception possibly thrown by @c new."},
{"lineNum":"   50","line":"   *  @ingroup exceptions"},
{"lineNum":"   51","line":"   *"},
{"lineNum":"   52","line":"   *  @c bad_alloc (or classes derived from it) is used to report allocation"},
{"lineNum":"   53","line":"   *  errors from the throwing forms of @c new.  */"},
{"lineNum":"   54","line":"  class bad_alloc : public exception"},
{"lineNum":"   55","line":"  {"},
{"lineNum":"   56","line":"  public:"},
{"lineNum":"   57","line":"    bad_alloc() throw() { }"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    // This declaration is not useless:"},
{"lineNum":"   60","line":"    // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118"},
{"lineNum":"   61","line":"    virtual ~bad_alloc() throw();"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    // See comment in eh_exception.cc."},
{"lineNum":"   64","line":"    virtual const char* what() const throw();"},
{"lineNum":"   65","line":"  };"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   68","line":"  class bad_array_new_length : public bad_alloc"},
{"lineNum":"   69","line":"  {"},
{"lineNum":"   70","line":"  public:"},
{"lineNum":"   71","line":"    bad_array_new_length() throw() { };"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    // This declaration is not useless:"},
{"lineNum":"   74","line":"    // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118"},
{"lineNum":"   75","line":"    virtual ~bad_array_new_length() throw();"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    // See comment in eh_exception.cc."},
{"lineNum":"   78","line":"    virtual const char* what() const throw();"},
{"lineNum":"   79","line":"  };"},
{"lineNum":"   80","line":"#endif"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"#if __cpp_aligned_new"},
{"lineNum":"   83","line":"  enum class align_val_t: size_t {};"},
{"lineNum":"   84","line":"#endif"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"  struct nothrow_t"},
{"lineNum":"   87","line":"  {"},
{"lineNum":"   88","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   89","line":"    explicit nothrow_t() = default;"},
{"lineNum":"   90","line":"#endif"},
{"lineNum":"   91","line":"  };"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"  extern const nothrow_t nothrow;"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"  /** If you write your own error handler to be called by @c new, it must"},
{"lineNum":"   96","line":"   *  be of this type.  */"},
{"lineNum":"   97","line":"  typedef void (*new_handler)();"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"  /// Takes a replacement handler as the argument, returns the"},
{"lineNum":"  100","line":"  /// previous handler."},
{"lineNum":"  101","line":"  new_handler set_new_handler(new_handler) throw();"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  104","line":"  /// Return the current new handler."},
{"lineNum":"  105","line":"  new_handler get_new_handler() noexcept;"},
{"lineNum":"  106","line":"#endif"},
{"lineNum":"  107","line":"} // namespace std"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"//@{"},
{"lineNum":"  110","line":"/** These are replaceable signatures:"},
{"lineNum":"  111","line":" *  - normal single new and delete (no arguments, throw @c bad_alloc on error)"},
{"lineNum":"  112","line":" *  - normal array new and delete (same)"},
{"lineNum":"  113","line":" *  - @c nothrow single new and delete (take a @c nothrow argument, return"},
{"lineNum":"  114","line":" *    @c NULL on error)"},
{"lineNum":"  115","line":" *  - @c nothrow array new and delete (same)"},
{"lineNum":"  116","line":" *"},
{"lineNum":"  117","line":" *  Placement new and delete signatures (take a memory address argument,"},
{"lineNum":"  118","line":" *  does nothing) may not be replaced by a user\'s program."},
{"lineNum":"  119","line":"*/"},
{"lineNum":"  120","line":"void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)"},
{"lineNum":"  121","line":"  __attribute__((__externally_visible__));"},
{"lineNum":"  122","line":"void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)"},
{"lineNum":"  123","line":"  __attribute__((__externally_visible__));"},
{"lineNum":"  124","line":"void operator delete(void*) _GLIBCXX_USE_NOEXCEPT"},
{"lineNum":"  125","line":"  __attribute__((__externally_visible__));"},
{"lineNum":"  126","line":"void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT"},
{"lineNum":"  127","line":"  __attribute__((__externally_visible__));"},
{"lineNum":"  128","line":"#if __cpp_sized_deallocation"},
{"lineNum":"  129","line":"void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT"},
{"lineNum":"  130","line":"  __attribute__((__externally_visible__));"},
{"lineNum":"  131","line":"void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT"},
{"lineNum":"  132","line":"  __attribute__((__externally_visible__));"},
{"lineNum":"  133","line":"#endif"},
{"lineNum":"  134","line":"void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT"},
{"lineNum":"  135","line":"  __attribute__((__externally_visible__));"},
{"lineNum":"  136","line":"void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT"},
{"lineNum":"  137","line":"  __attribute__((__externally_visible__));"},
{"lineNum":"  138","line":"void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT"},
{"lineNum":"  139","line":"  __attribute__((__externally_visible__));"},
{"lineNum":"  140","line":"void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT"},
{"lineNum":"  141","line":"  __attribute__((__externally_visible__));"},
{"lineNum":"  142","line":"#if __cpp_aligned_new"},
{"lineNum":"  143","line":"void* operator new(std::size_t, std::align_val_t)"},
{"lineNum":"  144","line":"  __attribute__((__externally_visible__));"},
{"lineNum":"  145","line":"void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)"},
{"lineNum":"  146","line":"  _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));"},
{"lineNum":"  147","line":"void operator delete(void*, std::align_val_t)"},
{"lineNum":"  148","line":"  _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));"},
{"lineNum":"  149","line":"void operator delete(void*, std::align_val_t, const std::nothrow_t&)"},
{"lineNum":"  150","line":"  _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));"},
{"lineNum":"  151","line":"void* operator new[](std::size_t, std::align_val_t)"},
{"lineNum":"  152","line":"  __attribute__((__externally_visible__));"},
{"lineNum":"  153","line":"void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)"},
{"lineNum":"  154","line":"  _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));"},
{"lineNum":"  155","line":"void operator delete[](void*, std::align_val_t)"},
{"lineNum":"  156","line":"  _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));"},
{"lineNum":"  157","line":"void operator delete[](void*, std::align_val_t, const std::nothrow_t&)"},
{"lineNum":"  158","line":"  _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));"},
{"lineNum":"  159","line":"#if __cpp_sized_deallocation"},
{"lineNum":"  160","line":"void operator delete(void*, std::size_t, std::align_val_t)"},
{"lineNum":"  161","line":"  _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));"},
{"lineNum":"  162","line":"void operator delete[](void*, std::size_t, std::align_val_t)"},
{"lineNum":"  163","line":"  _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));"},
{"lineNum":"  164","line":"#endif // __cpp_sized_deallocation"},
{"lineNum":"  165","line":"#endif // __cpp_aligned_new"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"// Default placement versions of operator new."},
{"lineNum":"  168","line":"inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT"},
{"lineNum":"  169","line":"{ return __p; }","class":"linePartCov","hits":"2","order":"766","possible_hits":"3",},
{"lineNum":"  170","line":"inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT"},
{"lineNum":"  171","line":"{ return __p; }"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"// Default placement versions of operator delete."},
{"lineNum":"  174","line":"inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  175","line":"inline void operator delete[](void*, void*) _GLIBCXX_USE_NOEXCEPT { }"},
{"lineNum":"  176","line":"//@}"},
{"lineNum":"  177","line":"} // extern \"C++\""},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"#if __cplusplus > 201402L"},
{"lineNum":"  180","line":"#if __GNUC__ >= 7"},
{"lineNum":"  181","line":"#  define _GLIBCXX_HAVE_BUILTIN_LAUNDER 1"},
{"lineNum":"  182","line":"#elif defined __has_builtin"},
{"lineNum":"  183","line":"// For non-GNU compilers:"},
{"lineNum":"  184","line":"# if __has_builtin(__builtin_launder)"},
{"lineNum":"  185","line":"#  define _GLIBCXX_HAVE_BUILTIN_LAUNDER 1"},
{"lineNum":"  186","line":"# endif"},
{"lineNum":"  187","line":"#endif"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"#ifdef _GLIBCXX_HAVE_BUILTIN_LAUNDER"},
{"lineNum":"  190","line":"namespace std"},
{"lineNum":"  191","line":"{"},
{"lineNum":"  192","line":"#define __cpp_lib_launder 201606"},
{"lineNum":"  193","line":"  /// Pointer optimization barrier [ptr.launder]"},
{"lineNum":"  194","line":"  template<typename _Tp>"},
{"lineNum":"  195","line":"    constexpr _Tp*"},
{"lineNum":"  196","line":"    launder(_Tp* __p) noexcept"},
{"lineNum":"  197","line":"    { return __builtin_launder(__p); }"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"  // The program is ill-formed if T is a function type or"},
{"lineNum":"  200","line":"  // (possibly cv-qualified) void."},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"  template<typename _Ret, typename... _Args _GLIBCXX_NOEXCEPT_PARM>"},
{"lineNum":"  203","line":"    void launder(_Ret (*)(_Args...) _GLIBCXX_NOEXCEPT_QUAL) = delete;"},
{"lineNum":"  204","line":"  template<typename _Ret, typename... _Args _GLIBCXX_NOEXCEPT_PARM>"},
{"lineNum":"  205","line":"    void launder(_Ret (*)(_Args......) _GLIBCXX_NOEXCEPT_QUAL) = delete;"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"  void launder(void*) = delete;"},
{"lineNum":"  208","line":"  void launder(const void*) = delete;"},
{"lineNum":"  209","line":"  void launder(volatile void*) = delete;"},
{"lineNum":"  210","line":"  void launder(const volatile void*) = delete;"},
{"lineNum":"  211","line":"}"},
{"lineNum":"  212","line":"#endif // _GLIBCXX_HAVE_BUILTIN_LAUNDER"},
{"lineNum":"  213","line":"#undef _GLIBCXX_HAVE_BUILTIN_LAUNDER"},
{"lineNum":"  214","line":"#endif // C++17"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"#pragma GCC visibility pop"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "mipl_parser", "date" : "2018-11-28 14:11:04", "instrumented" : 2, "covered" : 1,};
var merged_data = [];
