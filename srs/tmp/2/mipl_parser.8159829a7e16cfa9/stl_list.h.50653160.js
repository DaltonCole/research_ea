var data = {lines:[
{"lineNum":"    1","line":"// List implementation -*- C++ -*-"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 2001-2017 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This file is part of the GNU ISO C++ Library.  This library is free"},
{"lineNum":"    6","line":"// software; you can redistribute it and/or modify it under the"},
{"lineNum":"    7","line":"// terms of the GNU General Public License as published by the"},
{"lineNum":"    8","line":"// Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    9","line":"// any later version."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// This library is distributed in the hope that it will be useful,"},
{"lineNum":"   12","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   13","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   14","line":"// GNU General Public License for more details."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   17","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   18","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   21","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   22","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   23","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/*"},
{"lineNum":"   26","line":" *"},
{"lineNum":"   27","line":" * Copyright (c) 1994"},
{"lineNum":"   28","line":" * Hewlett-Packard Company"},
{"lineNum":"   29","line":" *"},
{"lineNum":"   30","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   31","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   32","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   33","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   34","line":" * in supporting documentation.  Hewlett-Packard Company makes no"},
{"lineNum":"   35","line":" * representations about the suitability of this software for any"},
{"lineNum":"   36","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   37","line":" *"},
{"lineNum":"   38","line":" *"},
{"lineNum":"   39","line":" * Copyright (c) 1996,1997"},
{"lineNum":"   40","line":" * Silicon Graphics Computer Systems, Inc."},
{"lineNum":"   41","line":" *"},
{"lineNum":"   42","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   43","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   44","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   45","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   46","line":" * in supporting documentation.  Silicon Graphics makes no"},
{"lineNum":"   47","line":" * representations about the suitability of this software for any"},
{"lineNum":"   48","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   49","line":" */"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"/** @file bits/stl_list.h"},
{"lineNum":"   52","line":" *  This is an internal header file, included by other library headers."},
{"lineNum":"   53","line":" *  Do not attempt to use it directly. @headername{list}"},
{"lineNum":"   54","line":" */"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"#ifndef _STL_LIST_H"},
{"lineNum":"   57","line":"#define _STL_LIST_H 1"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"#include <bits/concept_check.h>"},
{"lineNum":"   60","line":"#include <ext/alloc_traits.h>"},
{"lineNum":"   61","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   62","line":"#include <initializer_list>"},
{"lineNum":"   63","line":"#include <bits/allocated_ptr.h>"},
{"lineNum":"   64","line":"#include <ext/aligned_buffer.h>"},
{"lineNum":"   65","line":"#endif"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   68","line":"{"},
{"lineNum":"   69","line":"  namespace __detail"},
{"lineNum":"   70","line":"  {"},
{"lineNum":"   71","line":"  _GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    // Supporting structures are split into common and templated"},
{"lineNum":"   74","line":"    // types; the latter publicly inherits from the former in an"},
{"lineNum":"   75","line":"    // effort to reduce code duplication.  This results in some"},
{"lineNum":"   76","line":"    // \"needless\" static_cast\'ing later on, but it\'s all safe"},
{"lineNum":"   77","line":"    // downcasting."},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    /// Common part of a node in the %list."},
{"lineNum":"   80","line":"    struct _List_node_base"},
{"lineNum":"   81","line":"    {"},
{"lineNum":"   82","line":"      _List_node_base* _M_next;"},
{"lineNum":"   83","line":"      _List_node_base* _M_prev;"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"      static void"},
{"lineNum":"   86","line":"      swap(_List_node_base& __x, _List_node_base& __y) _GLIBCXX_USE_NOEXCEPT;"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"      void"},
{"lineNum":"   89","line":"      _M_transfer(_List_node_base* const __first,"},
{"lineNum":"   90","line":"\t\t  _List_node_base* const __last) _GLIBCXX_USE_NOEXCEPT;"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"      void"},
{"lineNum":"   93","line":"      _M_reverse() _GLIBCXX_USE_NOEXCEPT;"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"      void"},
{"lineNum":"   96","line":"      _M_hook(_List_node_base* const __position) _GLIBCXX_USE_NOEXCEPT;"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"      void"},
{"lineNum":"   99","line":"      _M_unhook() _GLIBCXX_USE_NOEXCEPT;"},
{"lineNum":"  100","line":"    };"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"  _GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":"  103","line":"  } // namespace detail"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"_GLIBCXX_BEGIN_NAMESPACE_CONTAINER"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"  /// An actual node in the %list."},
{"lineNum":"  108","line":"  template<typename _Tp>"},
{"lineNum":"  109","line":"    struct _List_node : public __detail::_List_node_base"},
{"lineNum":"  110","line":"    {"},
{"lineNum":"  111","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  112","line":"      __gnu_cxx::__aligned_membuf<_Tp> _M_storage;"},
{"lineNum":"  113","line":"      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }","class":"linePartCov","hits":"4","order":"297","possible_hits":"6",},
{"lineNum":"  114","line":"      _Tp const* _M_valptr() const { return _M_storage._M_ptr(); }"},
{"lineNum":"  115","line":"#else"},
{"lineNum":"  116","line":"      _Tp _M_data;"},
{"lineNum":"  117","line":"      _Tp*       _M_valptr()       { return std::__addressof(_M_data); }"},
{"lineNum":"  118","line":"      _Tp const* _M_valptr() const { return std::__addressof(_M_data); }"},
{"lineNum":"  119","line":"#endif"},
{"lineNum":"  120","line":"    };"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"  /**"},
{"lineNum":"  123","line":"   *  @brief A list::iterator."},
{"lineNum":"  124","line":"   *"},
{"lineNum":"  125","line":"   *  All the functions are op overloads."},
{"lineNum":"  126","line":"  */"},
{"lineNum":"  127","line":"  template<typename _Tp>"},
{"lineNum":"  128","line":"    struct _List_iterator"},
{"lineNum":"  129","line":"    {"},
{"lineNum":"  130","line":"      typedef _List_iterator<_Tp>\t\t_Self;"},
{"lineNum":"  131","line":"      typedef _List_node<_Tp>\t\t\t_Node;"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"      typedef ptrdiff_t\t\t\t\tdifference_type;"},
{"lineNum":"  134","line":"      typedef std::bidirectional_iterator_tag\titerator_category;"},
{"lineNum":"  135","line":"      typedef _Tp\t\t\t\tvalue_type;"},
{"lineNum":"  136","line":"      typedef _Tp*\t\t\t\tpointer;"},
{"lineNum":"  137","line":"      typedef _Tp&\t\t\t\treference;"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"      _List_iterator() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  140","line":"      : _M_node() { }"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"      explicit"},
{"lineNum":"  143","line":"      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1064","possible_hits":"1",},
{"lineNum":"  144","line":"      : _M_node(__x) { }","class":"linePartCov","hits":"1","order":"1065","possible_hits":"2",},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"      _Self"},
{"lineNum":"  147","line":"      _M_const_cast() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  148","line":"      { return *this; }"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"      // Must downcast from _List_node_base to _List_node to get to value."},
{"lineNum":"  151","line":"      reference"},
{"lineNum":"  152","line":"      operator*() const _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1103","possible_hits":"1",},
{"lineNum":"  153","line":"      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }","class":"linePartCov","hits":"1","order":"1104","possible_hits":"2",},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"      pointer"},
{"lineNum":"  156","line":"      operator->() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  157","line":"      { return static_cast<_Node*>(_M_node)->_M_valptr(); }"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"      _Self&"},
{"lineNum":"  160","line":"      operator++() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  161","line":"      {"},
{"lineNum":"  162","line":"\t_M_node = _M_node->_M_next;"},
{"lineNum":"  163","line":"\treturn *this;"},
{"lineNum":"  164","line":"      }"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"      _Self"},
{"lineNum":"  167","line":"      operator++(int) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"2","order":"1154","possible_hits":"2",},
{"lineNum":"  168","line":"      {"},
{"lineNum":"  169","line":"\t_Self __tmp = *this;","class":"lineCov","hits":"1","order":"1155","possible_hits":"1",},
{"lineNum":"  170","line":"\t_M_node = _M_node->_M_next;","class":"lineCov","hits":"1","order":"1156","possible_hits":"1",},
{"lineNum":"  171","line":"\treturn __tmp;","class":"lineCov","hits":"1","order":"1157","possible_hits":"1",},
{"lineNum":"  172","line":"      }","class":"linePartCov","hits":"1","order":"1158","possible_hits":"2",},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"      _Self&"},
{"lineNum":"  175","line":"      operator--() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  176","line":"      {"},
{"lineNum":"  177","line":"\t_M_node = _M_node->_M_prev;"},
{"lineNum":"  178","line":"\treturn *this;"},
{"lineNum":"  179","line":"      }"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"      _Self"},
{"lineNum":"  182","line":"      operator--(int) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  183","line":"      {"},
{"lineNum":"  184","line":"\t_Self __tmp = *this;"},
{"lineNum":"  185","line":"\t_M_node = _M_node->_M_prev;"},
{"lineNum":"  186","line":"\treturn __tmp;"},
{"lineNum":"  187","line":"      }"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"      bool"},
{"lineNum":"  190","line":"      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  191","line":"      { return _M_node == __x._M_node; }"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"      bool"},
{"lineNum":"  194","line":"      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1100","possible_hits":"1",},
{"lineNum":"  195","line":"      { return _M_node != __x._M_node; }","class":"linePartCov","hits":"1","order":"1101","possible_hits":"2",},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"      // The only member points to the %list element."},
{"lineNum":"  198","line":"      __detail::_List_node_base* _M_node;"},
{"lineNum":"  199","line":"    };"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"  /**"},
{"lineNum":"  202","line":"   *  @brief A list::const_iterator."},
{"lineNum":"  203","line":"   *"},
{"lineNum":"  204","line":"   *  All the functions are op overloads."},
{"lineNum":"  205","line":"  */"},
{"lineNum":"  206","line":"  template<typename _Tp>"},
{"lineNum":"  207","line":"    struct _List_const_iterator"},
{"lineNum":"  208","line":"    {"},
{"lineNum":"  209","line":"      typedef _List_const_iterator<_Tp>\t\t_Self;"},
{"lineNum":"  210","line":"      typedef const _List_node<_Tp>\t\t_Node;"},
{"lineNum":"  211","line":"      typedef _List_iterator<_Tp>\t\titerator;"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"      typedef ptrdiff_t\t\t\t\tdifference_type;"},
{"lineNum":"  214","line":"      typedef std::bidirectional_iterator_tag\titerator_category;"},
{"lineNum":"  215","line":"      typedef _Tp\t\t\t\tvalue_type;"},
{"lineNum":"  216","line":"      typedef const _Tp*\t\t\tpointer;"},
{"lineNum":"  217","line":"      typedef const _Tp&\t\t\treference;"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"      _List_const_iterator() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  220","line":"      : _M_node() { }"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"      explicit"},
{"lineNum":"  223","line":"      _List_const_iterator(const __detail::_List_node_base* __x)"},
{"lineNum":"  224","line":"      _GLIBCXX_NOEXCEPT"},
{"lineNum":"  225","line":"      : _M_node(__x) { }"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  228","line":"      : _M_node(__x._M_node) { }"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"      iterator"},
{"lineNum":"  231","line":"      _M_const_cast() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  232","line":"      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"      // Must downcast from List_node_base to _List_node to get to value."},
{"lineNum":"  235","line":"      reference"},
{"lineNum":"  236","line":"      operator*() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  237","line":"      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"      pointer"},
{"lineNum":"  240","line":"      operator->() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  241","line":"      { return static_cast<_Node*>(_M_node)->_M_valptr(); }"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"      _Self&"},
{"lineNum":"  244","line":"      operator++() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  245","line":"      {"},
{"lineNum":"  246","line":"\t_M_node = _M_node->_M_next;"},
{"lineNum":"  247","line":"\treturn *this;"},
{"lineNum":"  248","line":"      }"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"      _Self"},
{"lineNum":"  251","line":"      operator++(int) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  252","line":"      {"},
{"lineNum":"  253","line":"\t_Self __tmp = *this;"},
{"lineNum":"  254","line":"\t_M_node = _M_node->_M_next;"},
{"lineNum":"  255","line":"\treturn __tmp;"},
{"lineNum":"  256","line":"      }"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"      _Self&"},
{"lineNum":"  259","line":"      operator--() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  260","line":"      {"},
{"lineNum":"  261","line":"\t_M_node = _M_node->_M_prev;"},
{"lineNum":"  262","line":"\treturn *this;"},
{"lineNum":"  263","line":"      }"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"      _Self"},
{"lineNum":"  266","line":"      operator--(int) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  267","line":"      {"},
{"lineNum":"  268","line":"\t_Self __tmp = *this;"},
{"lineNum":"  269","line":"\t_M_node = _M_node->_M_prev;"},
{"lineNum":"  270","line":"\treturn __tmp;"},
{"lineNum":"  271","line":"      }"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"      bool"},
{"lineNum":"  274","line":"      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  275","line":"      { return _M_node == __x._M_node; }"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"      bool"},
{"lineNum":"  278","line":"      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  279","line":"      { return _M_node != __x._M_node; }"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"      // The only member points to the %list element."},
{"lineNum":"  282","line":"      const __detail::_List_node_base* _M_node;"},
{"lineNum":"  283","line":"    };"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"  template<typename _Val>"},
{"lineNum":"  286","line":"    inline bool"},
{"lineNum":"  287","line":"    operator==(const _List_iterator<_Val>& __x,"},
{"lineNum":"  288","line":"\t       const _List_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  289","line":"    { return __x._M_node == __y._M_node; }"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"  template<typename _Val>"},
{"lineNum":"  292","line":"    inline bool"},
{"lineNum":"  293","line":"    operator!=(const _List_iterator<_Val>& __x,"},
{"lineNum":"  294","line":"\t       const _List_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  295","line":"    { return __x._M_node != __y._M_node; }"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"_GLIBCXX_BEGIN_NAMESPACE_CXX11"},
{"lineNum":"  298","line":"  /// See bits/stl_deque.h\'s _Deque_base for an explanation."},
{"lineNum":"  299","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  300","line":"    class _List_base"},
{"lineNum":"  301","line":"    {"},
{"lineNum":"  302","line":"    protected:"},
{"lineNum":"  303","line":"      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template"},
{"lineNum":"  304","line":"\trebind<_Tp>::other\t\t\t\t_Tp_alloc_type;"},
{"lineNum":"  305","line":"      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>\t_Tp_alloc_traits;"},
{"lineNum":"  306","line":"      typedef typename _Tp_alloc_traits::template"},
{"lineNum":"  307","line":"\trebind<_List_node<_Tp> >::other _Node_alloc_type;"},
{"lineNum":"  308","line":"      typedef __gnu_cxx::__alloc_traits<_Node_alloc_type> _Node_alloc_traits;"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"      static size_t"},
{"lineNum":"  311","line":"      _S_distance(const __detail::_List_node_base* __first,"},
{"lineNum":"  312","line":"\t\t  const __detail::_List_node_base* __last)"},
{"lineNum":"  313","line":"      {"},
{"lineNum":"  314","line":"\tsize_t __n = 0;"},
{"lineNum":"  315","line":"\twhile (__first != __last)"},
{"lineNum":"  316","line":"\t  {"},
{"lineNum":"  317","line":"\t    __first = __first->_M_next;"},
{"lineNum":"  318","line":"\t    ++__n;"},
{"lineNum":"  319","line":"\t  }"},
{"lineNum":"  320","line":"\treturn __n;"},
{"lineNum":"  321","line":"      }"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"      struct _List_impl","class":"linePartCov","hits":"2","order":"1569","possible_hits":"3",},
{"lineNum":"  324","line":"      : public _Node_alloc_type"},
{"lineNum":"  325","line":"      {"},
{"lineNum":"  326","line":"#if _GLIBCXX_USE_CXX11_ABI"},
{"lineNum":"  327","line":"\t_List_node<size_t> _M_node;"},
{"lineNum":"  328","line":"#else"},
{"lineNum":"  329","line":"\t__detail::_List_node_base _M_node;"},
{"lineNum":"  330","line":"#endif"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"\t_List_impl() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"288","possible_hits":"1",},
{"lineNum":"  333","line":"\t: _Node_alloc_type(), _M_node()","class":"lineCov","hits":"1","order":"289","possible_hits":"1",},
{"lineNum":"  334","line":"\t{ }","class":"linePartCov","hits":"1","order":"290","possible_hits":"2",},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"\t_List_impl(const _Node_alloc_type& __a) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  337","line":"\t: _Node_alloc_type(__a), _M_node()"},
{"lineNum":"  338","line":"\t{ }"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  341","line":"\t_List_impl(_Node_alloc_type&& __a) noexcept"},
{"lineNum":"  342","line":"\t: _Node_alloc_type(std::move(__a)), _M_node()"},
{"lineNum":"  343","line":"\t{ }"},
{"lineNum":"  344","line":"#endif"},
{"lineNum":"  345","line":"      };"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"      _List_impl _M_impl;"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"#if _GLIBCXX_USE_CXX11_ABI"},
{"lineNum":"  350","line":"      size_t _M_get_size() const { return *_M_impl._M_node._M_valptr(); }"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"      void _M_set_size(size_t __n) { *_M_impl._M_node._M_valptr() = __n; }","class":"linePartCov","hits":"2","order":"296","possible_hits":"3",},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"      void _M_inc_size(size_t __n) { *_M_impl._M_node._M_valptr() += __n; }","class":"linePartCov","hits":"2","order":"1094","possible_hits":"3",},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"      void _M_dec_size(size_t __n) { *_M_impl._M_node._M_valptr() -= __n; }"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"      size_t"},
{"lineNum":"  359","line":"      _M_distance(const __detail::_List_node_base* __first,"},
{"lineNum":"  360","line":"\t\t  const __detail::_List_node_base* __last) const"},
{"lineNum":"  361","line":"      { return _S_distance(__first, __last); }"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"      // return the stored size"},
{"lineNum":"  364","line":"      size_t _M_node_count() const { return *_M_impl._M_node._M_valptr(); }"},
{"lineNum":"  365","line":"#else"},
{"lineNum":"  366","line":"      // dummy implementations used when the size is not stored"},
{"lineNum":"  367","line":"      size_t _M_get_size() const { return 0; }"},
{"lineNum":"  368","line":"      void _M_set_size(size_t) { }"},
{"lineNum":"  369","line":"      void _M_inc_size(size_t) { }"},
{"lineNum":"  370","line":"      void _M_dec_size(size_t) { }"},
{"lineNum":"  371","line":"      size_t _M_distance(const void*, const void*) const { return 0; }"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"      // count the number of nodes"},
{"lineNum":"  374","line":"      size_t _M_node_count() const"},
{"lineNum":"  375","line":"      {"},
{"lineNum":"  376","line":"\treturn _S_distance(_M_impl._M_node._M_next,"},
{"lineNum":"  377","line":"\t\t\t   std::__addressof(_M_impl._M_node));"},
{"lineNum":"  378","line":"      }"},
{"lineNum":"  379","line":"#endif"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"      typename _Node_alloc_traits::pointer"},
{"lineNum":"  382","line":"      _M_get_node()","class":"lineCov","hits":"1","order":"1070","possible_hits":"1",},
{"lineNum":"  383","line":"      { return _Node_alloc_traits::allocate(_M_impl, 1); }","class":"linePartCov","hits":"1","order":"1071","possible_hits":"2",},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"      void"},
{"lineNum":"  386","line":"      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1173","possible_hits":"1",},
{"lineNum":"  387","line":"      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }","class":"linePartCov","hits":"1","order":"1174","possible_hits":"2",},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"  public:"},
{"lineNum":"  390","line":"      typedef _Alloc allocator_type;"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"      _Node_alloc_type&"},
{"lineNum":"  393","line":"      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1073","possible_hits":"1",},
{"lineNum":"  394","line":"      { return _M_impl; }","class":"linePartCov","hits":"1","order":"1074","possible_hits":"2",},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"      const _Node_alloc_type&"},
{"lineNum":"  397","line":"      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  398","line":"      { return _M_impl; }"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"      _List_base()","class":"lineCov","hits":"1","order":"286","possible_hits":"1",},
{"lineNum":"  401","line":"      : _M_impl()","class":"lineCov","hits":"1","order":"287","possible_hits":"1",},
{"lineNum":"  402","line":"      { _M_init(); }","class":"linePartCov","hits":"1","order":"291","possible_hits":"2",},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"      _List_base(const _Node_alloc_type& __a) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  405","line":"      : _M_impl(__a)"},
{"lineNum":"  406","line":"      { _M_init(); }"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  409","line":"      _List_base(_List_base&& __x) noexcept"},
{"lineNum":"  410","line":"      : _M_impl(std::move(__x._M_get_Node_allocator()))"},
{"lineNum":"  411","line":"      { _M_move_nodes(std::move(__x)); }"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"      _List_base(_List_base&& __x, _Node_alloc_type&& __a)"},
{"lineNum":"  414","line":"      : _M_impl(std::move(__a))"},
{"lineNum":"  415","line":"      {"},
{"lineNum":"  416","line":"\tif (__x._M_get_Node_allocator() == _M_get_Node_allocator())"},
{"lineNum":"  417","line":"\t  _M_move_nodes(std::move(__x));"},
{"lineNum":"  418","line":"\telse"},
{"lineNum":"  419","line":"\t  _M_init(); // Caller must move individual elements."},
{"lineNum":"  420","line":"      }"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"      void"},
{"lineNum":"  423","line":"      _M_move_nodes(_List_base&& __x)"},
{"lineNum":"  424","line":"      {"},
{"lineNum":"  425","line":"\tauto* const __xnode = std::__addressof(__x._M_impl._M_node);"},
{"lineNum":"  426","line":"\tif (__xnode->_M_next == __xnode)"},
{"lineNum":"  427","line":"\t  _M_init();"},
{"lineNum":"  428","line":"\telse"},
{"lineNum":"  429","line":"\t  {"},
{"lineNum":"  430","line":"\t    auto* const __node = std::__addressof(_M_impl._M_node);"},
{"lineNum":"  431","line":"\t    __node->_M_next = __xnode->_M_next;"},
{"lineNum":"  432","line":"\t    __node->_M_prev = __xnode->_M_prev;"},
{"lineNum":"  433","line":"\t    __node->_M_next->_M_prev = __node->_M_prev->_M_next = __node;"},
{"lineNum":"  434","line":"\t    _M_set_size(__x._M_get_size());"},
{"lineNum":"  435","line":"\t    __x._M_init();"},
{"lineNum":"  436","line":"\t  }"},
{"lineNum":"  437","line":"      }"},
{"lineNum":"  438","line":"#endif"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"      // This is what actually destroys the list."},
{"lineNum":"  441","line":"      ~_List_base() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1567","possible_hits":"1",},
{"lineNum":"  442","line":"      { _M_clear(); }","class":"linePartCov","hits":"1","order":"1568","possible_hits":"2",},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"      void"},
{"lineNum":"  445","line":"      _M_clear() _GLIBCXX_NOEXCEPT;"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"      void"},
{"lineNum":"  448","line":"      _M_init() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"292","possible_hits":"1",},
{"lineNum":"  449","line":"      {"},
{"lineNum":"  450","line":"\tthis->_M_impl._M_node._M_next = &this->_M_impl._M_node;","class":"lineCov","hits":"1","order":"293","possible_hits":"1",},
{"lineNum":"  451","line":"\tthis->_M_impl._M_node._M_prev = &this->_M_impl._M_node;","class":"lineCov","hits":"1","order":"294","possible_hits":"1",},
{"lineNum":"  452","line":"\t_M_set_size(0);","class":"lineCov","hits":"1","order":"295","possible_hits":"1",},
{"lineNum":"  453","line":"      }","class":"linePartCov","hits":"1","order":"302","possible_hits":"2",},
{"lineNum":"  454","line":"    };"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"  /**"},
{"lineNum":"  457","line":"   *  @brief A standard container with linear time access to elements,"},
{"lineNum":"  458","line":"   *  and fixed time insertion/deletion at any point in the sequence."},
{"lineNum":"  459","line":"   *"},
{"lineNum":"  460","line":"   *  @ingroup sequences"},
{"lineNum":"  461","line":"   *"},
{"lineNum":"  462","line":"   *  @tparam _Tp  Type of element."},
{"lineNum":"  463","line":"   *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>."},
{"lineNum":"  464","line":"   *"},
{"lineNum":"  465","line":"   *  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a"},
{"lineNum":"  466","line":"   *  <a href=\"tables.html#66\">reversible container</a>, and a"},
{"lineNum":"  467","line":"   *  <a href=\"tables.html#67\">sequence</a>, including the"},
{"lineNum":"  468","line":"   *  <a href=\"tables.html#68\">optional sequence requirements</a> with the"},
{"lineNum":"  469","line":"   *  %exception of @c at and @c operator[]."},
{"lineNum":"  470","line":"   *"},
{"lineNum":"  471","line":"   *  This is a @e doubly @e linked %list.  Traversal up and down the"},
{"lineNum":"  472","line":"   *  %list requires linear time, but adding and removing elements (or"},
{"lineNum":"  473","line":"   *  @e nodes) is done in constant time, regardless of where the"},
{"lineNum":"  474","line":"   *  change takes place.  Unlike std::vector and std::deque,"},
{"lineNum":"  475","line":"   *  random-access iterators are not provided, so subscripting ( @c"},
{"lineNum":"  476","line":"   *  [] ) access is not allowed.  For algorithms which only need"},
{"lineNum":"  477","line":"   *  sequential access, this lack makes no difference."},
{"lineNum":"  478","line":"   *"},
{"lineNum":"  479","line":"   *  Also unlike the other standard containers, std::list provides"},
{"lineNum":"  480","line":"   *  specialized algorithms %unique to linked lists, such as"},
{"lineNum":"  481","line":"   *  splicing, sorting, and in-place reversal."},
{"lineNum":"  482","line":"   *"},
{"lineNum":"  483","line":"   *  A couple points on memory allocation for list<Tp>:"},
{"lineNum":"  484","line":"   *"},
{"lineNum":"  485","line":"   *  First, we never actually allocate a Tp, we allocate"},
{"lineNum":"  486","line":"   *  List_node<Tp>\'s and trust [20.1.5]/4 to DTRT.  This is to ensure"},
{"lineNum":"  487","line":"   *  that after elements from %list<X,Alloc1> are spliced into"},
{"lineNum":"  488","line":"   *  %list<X,Alloc2>, destroying the memory of the second %list is a"},
{"lineNum":"  489","line":"   *  valid operation, i.e., Alloc1 giveth and Alloc2 taketh away."},
{"lineNum":"  490","line":"   *"},
{"lineNum":"  491","line":"   *  Second, a %list conceptually represented as"},
{"lineNum":"  492","line":"   *  @code"},
{"lineNum":"  493","line":"   *    A <---> B <---> C <---> D"},
{"lineNum":"  494","line":"   *  @endcode"},
{"lineNum":"  495","line":"   *  is actually circular; a link exists between A and D.  The %list"},
{"lineNum":"  496","line":"   *  class holds (as its only data member) a private list::iterator"},
{"lineNum":"  497","line":"   *  pointing to @e D, not to @e A!  To get to the head of the %list,"},
{"lineNum":"  498","line":"   *  we start at the tail and move forward by one.  When this member"},
{"lineNum":"  499","line":"   *  iterator\'s next/previous pointers refer to itself, the %list is"},
{"lineNum":"  500","line":"   *  %empty."},
{"lineNum":"  501","line":"  */"},
{"lineNum":"  502","line":"  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >"},
{"lineNum":"  503","line":"    class list : protected _List_base<_Tp, _Alloc>"},
{"lineNum":"  504","line":"    {"},
{"lineNum":"  505","line":"#ifdef _GLIBCXX_CONCEPT_CHECKS"},
{"lineNum":"  506","line":"      // concept requirements"},
{"lineNum":"  507","line":"      typedef typename _Alloc::value_type\t\t_Alloc_value_type;"},
{"lineNum":"  508","line":"# if __cplusplus < 201103L"},
{"lineNum":"  509","line":"      __glibcxx_class_requires(_Tp, _SGIAssignableConcept)"},
{"lineNum":"  510","line":"# endif"},
{"lineNum":"  511","line":"      __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)"},
{"lineNum":"  512","line":"#endif"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"      typedef _List_base<_Tp, _Alloc>\t\t\t_Base;"},
{"lineNum":"  515","line":"      typedef typename _Base::_Tp_alloc_type\t\t_Tp_alloc_type;"},
{"lineNum":"  516","line":"      typedef typename _Base::_Tp_alloc_traits\t\t_Tp_alloc_traits;"},
{"lineNum":"  517","line":"      typedef typename _Base::_Node_alloc_type\t\t_Node_alloc_type;"},
{"lineNum":"  518","line":"      typedef typename _Base::_Node_alloc_traits\t_Node_alloc_traits;"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"    public:"},
{"lineNum":"  521","line":"      typedef _Tp\t\t\t\t\t value_type;"},
{"lineNum":"  522","line":"      typedef typename _Tp_alloc_traits::pointer\t pointer;"},
{"lineNum":"  523","line":"      typedef typename _Tp_alloc_traits::const_pointer\t const_pointer;"},
{"lineNum":"  524","line":"      typedef typename _Tp_alloc_traits::reference\t reference;"},
{"lineNum":"  525","line":"      typedef typename _Tp_alloc_traits::const_reference const_reference;"},
{"lineNum":"  526","line":"      typedef _List_iterator<_Tp>\t\t\t iterator;"},
{"lineNum":"  527","line":"      typedef _List_const_iterator<_Tp>\t\t\t const_iterator;"},
{"lineNum":"  528","line":"      typedef std::reverse_iterator<const_iterator>\t const_reverse_iterator;"},
{"lineNum":"  529","line":"      typedef std::reverse_iterator<iterator>\t\t reverse_iterator;"},
{"lineNum":"  530","line":"      typedef size_t\t\t\t\t\t size_type;"},
{"lineNum":"  531","line":"      typedef ptrdiff_t\t\t\t\t\t difference_type;"},
{"lineNum":"  532","line":"      typedef _Alloc\t\t\t\t\t allocator_type;"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"    protected:"},
{"lineNum":"  535","line":"      // Note that pointers-to-_Node\'s can be ctor-converted to"},
{"lineNum":"  536","line":"      // iterator types."},
{"lineNum":"  537","line":"      typedef _List_node<_Tp>\t\t\t\t _Node;"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"      using _Base::_M_impl;"},
{"lineNum":"  540","line":"      using _Base::_M_put_node;"},
{"lineNum":"  541","line":"      using _Base::_M_get_node;"},
{"lineNum":"  542","line":"      using _Base::_M_get_Node_allocator;"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"      /**"},
{"lineNum":"  545","line":"       *  @param  __args  An instance of user data."},
{"lineNum":"  546","line":"       *"},
{"lineNum":"  547","line":"       *  Allocates space for a new node and constructs a copy of"},
{"lineNum":"  548","line":"       *  @a __args in it."},
{"lineNum":"  549","line":"       */"},
{"lineNum":"  550","line":"#if __cplusplus < 201103L"},
{"lineNum":"  551","line":"      _Node*"},
{"lineNum":"  552","line":"      _M_create_node(const value_type& __x)"},
{"lineNum":"  553","line":"      {"},
{"lineNum":"  554","line":"\t_Node* __p = this->_M_get_node();"},
{"lineNum":"  555","line":"\t__try"},
{"lineNum":"  556","line":"\t  {"},
{"lineNum":"  557","line":"\t    _Tp_alloc_type __alloc(_M_get_Node_allocator());"},
{"lineNum":"  558","line":"\t    __alloc.construct(__p->_M_valptr(), __x);"},
{"lineNum":"  559","line":"\t  }"},
{"lineNum":"  560","line":"\t__catch(...)"},
{"lineNum":"  561","line":"\t  {"},
{"lineNum":"  562","line":"\t    _M_put_node(__p);"},
{"lineNum":"  563","line":"\t    __throw_exception_again;"},
{"lineNum":"  564","line":"\t  }"},
{"lineNum":"  565","line":"\treturn __p;"},
{"lineNum":"  566","line":"      }"},
{"lineNum":"  567","line":"#else"},
{"lineNum":"  568","line":"      template<typename... _Args>"},
{"lineNum":"  569","line":"\t_Node*"},
{"lineNum":"  570","line":"\t_M_create_node(_Args&&... __args)","class":"lineCov","hits":"2","order":"1068","possible_hits":"2",},
{"lineNum":"  571","line":"\t{"},
{"lineNum":"  572","line":"\t  auto __p = this->_M_get_node();","class":"lineCov","hits":"1","order":"1069","possible_hits":"1",},
{"lineNum":"  573","line":"\t  auto& __alloc = _M_get_Node_allocator();","class":"lineCov","hits":"1","order":"1072","possible_hits":"1",},
{"lineNum":"  574","line":"\t  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};","class":"linePartCov","hits":"2","order":"1075","possible_hits":"3",},
{"lineNum":"  575","line":"\t  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),","class":"lineCov","hits":"1","order":"1081","possible_hits":"1",},
{"lineNum":"  576","line":"\t\t\t\t\tstd::forward<_Args>(__args)...);"},
{"lineNum":"  577","line":"\t  __guard = nullptr;","class":"lineCov","hits":"1","order":"1082","possible_hits":"1",},
{"lineNum":"  578","line":"\t  return __p;","class":"lineCov","hits":"2","order":"1087","possible_hits":"2",},
{"lineNum":"  579","line":"\t}","class":"linePartCov","hits":"1","order":"1091","possible_hits":"3",},
{"lineNum":"  580","line":"#endif"},
{"lineNum":"  581","line":""},
{"lineNum":"  582","line":"    public:"},
{"lineNum":"  583","line":"      // [23.2.2.1] construct/copy/destroy"},
{"lineNum":"  584","line":"      // (assign() and get_allocator() are also listed in this section)"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"      /**"},
{"lineNum":"  587","line":"       *  @brief  Creates a %list with no elements."},
{"lineNum":"  588","line":"       */"},
{"lineNum":"  589","line":"      list()","class":"lineCov","hits":"1","order":"284","possible_hits":"1",},
{"lineNum":"  590","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  591","line":"      noexcept(is_nothrow_default_constructible<_Node_alloc_type>::value)"},
{"lineNum":"  592","line":"#endif"},
{"lineNum":"  593","line":"      : _Base() { }","class":"linePartCov","hits":"1","order":"285","possible_hits":"2",},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"      /**"},
{"lineNum":"  596","line":"       *  @brief  Creates a %list with no elements."},
{"lineNum":"  597","line":"       *  @param  __a  An allocator object."},
{"lineNum":"  598","line":"       */"},
{"lineNum":"  599","line":"      explicit"},
{"lineNum":"  600","line":"      list(const allocator_type& __a) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  601","line":"      : _Base(_Node_alloc_type(__a)) { }"},
{"lineNum":"  602","line":""},
{"lineNum":"  603","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  604","line":"      /**"},
{"lineNum":"  605","line":"       *  @brief  Creates a %list with default constructed elements."},
{"lineNum":"  606","line":"       *  @param  __n  The number of elements to initially create."},
{"lineNum":"  607","line":"       *  @param  __a  An allocator object."},
{"lineNum":"  608","line":"       *"},
{"lineNum":"  609","line":"       *  This constructor fills the %list with @a __n default"},
{"lineNum":"  610","line":"       *  constructed elements."},
{"lineNum":"  611","line":"       */"},
{"lineNum":"  612","line":"      explicit"},
{"lineNum":"  613","line":"      list(size_type __n, const allocator_type& __a = allocator_type())"},
{"lineNum":"  614","line":"      : _Base(_Node_alloc_type(__a))"},
{"lineNum":"  615","line":"      { _M_default_initialize(__n); }"},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"      /**"},
{"lineNum":"  618","line":"       *  @brief  Creates a %list with copies of an exemplar element."},
{"lineNum":"  619","line":"       *  @param  __n  The number of elements to initially create."},
{"lineNum":"  620","line":"       *  @param  __value  An element to copy."},
{"lineNum":"  621","line":"       *  @param  __a  An allocator object."},
{"lineNum":"  622","line":"       *"},
{"lineNum":"  623","line":"       *  This constructor fills the %list with @a __n copies of @a __value."},
{"lineNum":"  624","line":"       */"},
{"lineNum":"  625","line":"      list(size_type __n, const value_type& __value,"},
{"lineNum":"  626","line":"\t   const allocator_type& __a = allocator_type())"},
{"lineNum":"  627","line":"      : _Base(_Node_alloc_type(__a))"},
{"lineNum":"  628","line":"      { _M_fill_initialize(__n, __value); }"},
{"lineNum":"  629","line":"#else"},
{"lineNum":"  630","line":"      /**"},
{"lineNum":"  631","line":"       *  @brief  Creates a %list with copies of an exemplar element."},
{"lineNum":"  632","line":"       *  @param  __n  The number of elements to initially create."},
{"lineNum":"  633","line":"       *  @param  __value  An element to copy."},
{"lineNum":"  634","line":"       *  @param  __a  An allocator object."},
{"lineNum":"  635","line":"       *"},
{"lineNum":"  636","line":"       *  This constructor fills the %list with @a __n copies of @a __value."},
{"lineNum":"  637","line":"       */"},
{"lineNum":"  638","line":"      explicit"},
{"lineNum":"  639","line":"      list(size_type __n, const value_type& __value = value_type(),"},
{"lineNum":"  640","line":"\t   const allocator_type& __a = allocator_type())"},
{"lineNum":"  641","line":"      : _Base(_Node_alloc_type(__a))"},
{"lineNum":"  642","line":"      { _M_fill_initialize(__n, __value); }"},
{"lineNum":"  643","line":"#endif"},
{"lineNum":"  644","line":""},
{"lineNum":"  645","line":"      /**"},
{"lineNum":"  646","line":"       *  @brief  %List copy constructor."},
{"lineNum":"  647","line":"       *  @param  __x  A %list of identical element and allocator types."},
{"lineNum":"  648","line":"       *"},
{"lineNum":"  649","line":"       *  The newly-created %list uses a copy of the allocation object used"},
{"lineNum":"  650","line":"       *  by @a __x (unless the allocator traits dictate a different object)."},
{"lineNum":"  651","line":"       */"},
{"lineNum":"  652","line":"      list(const list& __x)"},
{"lineNum":"  653","line":"      : _Base(_Node_alloc_traits::"},
{"lineNum":"  654","line":"\t      _S_select_on_copy(__x._M_get_Node_allocator()))"},
{"lineNum":"  655","line":"      { _M_initialize_dispatch(__x.begin(), __x.end(), __false_type()); }"},
{"lineNum":"  656","line":""},
{"lineNum":"  657","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  658","line":"      /**"},
{"lineNum":"  659","line":"       *  @brief  %List move constructor."},
{"lineNum":"  660","line":"       *  @param  __x  A %list of identical element and allocator types."},
{"lineNum":"  661","line":"       *"},
{"lineNum":"  662","line":"       *  The newly-created %list contains the exact contents of @a __x."},
{"lineNum":"  663","line":"       *  The contents of @a __x are a valid, but unspecified %list."},
{"lineNum":"  664","line":"       */"},
{"lineNum":"  665","line":"      list(list&& __x) noexcept"},
{"lineNum":"  666","line":"      : _Base(std::move(__x)) { }"},
{"lineNum":"  667","line":""},
{"lineNum":"  668","line":"      /**"},
{"lineNum":"  669","line":"       *  @brief  Builds a %list from an initializer_list"},
{"lineNum":"  670","line":"       *  @param  __l  An initializer_list of value_type."},
{"lineNum":"  671","line":"       *  @param  __a  An allocator object."},
{"lineNum":"  672","line":"       *"},
{"lineNum":"  673","line":"       *  Create a %list consisting of copies of the elements in the"},
{"lineNum":"  674","line":"       *  initializer_list @a __l.  This is linear in __l.size()."},
{"lineNum":"  675","line":"       */"},
{"lineNum":"  676","line":"      list(initializer_list<value_type> __l,"},
{"lineNum":"  677","line":"\t   const allocator_type& __a = allocator_type())"},
{"lineNum":"  678","line":"      : _Base(_Node_alloc_type(__a))"},
{"lineNum":"  679","line":"      { _M_initialize_dispatch(__l.begin(), __l.end(), __false_type()); }"},
{"lineNum":"  680","line":""},
{"lineNum":"  681","line":"      list(const list& __x, const allocator_type& __a)"},
{"lineNum":"  682","line":"      : _Base(_Node_alloc_type(__a))"},
{"lineNum":"  683","line":"      { _M_initialize_dispatch(__x.begin(), __x.end(), __false_type()); }"},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"      list(list&& __x, const allocator_type& __a)"},
{"lineNum":"  686","line":"      noexcept(_Node_alloc_traits::_S_always_equal())"},
{"lineNum":"  687","line":"      : _Base(std::move(__x), _Node_alloc_type(__a))"},
{"lineNum":"  688","line":"      {"},
{"lineNum":"  689","line":"\t// If __x is not empty it means its allocator is not equal to __a,"},
{"lineNum":"  690","line":"\t// so we need to move from each element individually."},
{"lineNum":"  691","line":"\tinsert(begin(), std::__make_move_if_noexcept_iterator(__x.begin()),"},
{"lineNum":"  692","line":"\t\t\tstd::__make_move_if_noexcept_iterator(__x.end()));"},
{"lineNum":"  693","line":"      }"},
{"lineNum":"  694","line":"#endif"},
{"lineNum":"  695","line":""},
{"lineNum":"  696","line":"      /**"},
{"lineNum":"  697","line":"       *  @brief  Builds a %list from a range."},
{"lineNum":"  698","line":"       *  @param  __first  An input iterator."},
{"lineNum":"  699","line":"       *  @param  __last  An input iterator."},
{"lineNum":"  700","line":"       *  @param  __a  An allocator object."},
{"lineNum":"  701","line":"       *"},
{"lineNum":"  702","line":"       *  Create a %list consisting of copies of the elements from"},
{"lineNum":"  703","line":"       *  [@a __first,@a __last).  This is linear in N (where N is"},
{"lineNum":"  704","line":"       *  distance(@a __first,@a __last))."},
{"lineNum":"  705","line":"       */"},
{"lineNum":"  706","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  707","line":"      template<typename _InputIterator,"},
{"lineNum":"  708","line":"\t       typename = std::_RequireInputIter<_InputIterator>>"},
{"lineNum":"  709","line":"\tlist(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  710","line":"\t     const allocator_type& __a = allocator_type())"},
{"lineNum":"  711","line":"\t: _Base(_Node_alloc_type(__a))"},
{"lineNum":"  712","line":"\t{ _M_initialize_dispatch(__first, __last, __false_type()); }"},
{"lineNum":"  713","line":"#else"},
{"lineNum":"  714","line":"      template<typename _InputIterator>"},
{"lineNum":"  715","line":"\tlist(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  716","line":"\t     const allocator_type& __a = allocator_type())"},
{"lineNum":"  717","line":"\t: _Base(_Node_alloc_type(__a))"},
{"lineNum":"  718","line":"\t{"},
{"lineNum":"  719","line":"\t  // Check whether it\'s an integral type.  If so, it\'s not an iterator."},
{"lineNum":"  720","line":"\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;"},
{"lineNum":"  721","line":"\t  _M_initialize_dispatch(__first, __last, _Integral());"},
{"lineNum":"  722","line":"\t}"},
{"lineNum":"  723","line":"#endif"},
{"lineNum":"  724","line":""},
{"lineNum":"  725","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  726","line":"      /**"},
{"lineNum":"  727","line":"       *  No explicit dtor needed as the _Base dtor takes care of"},
{"lineNum":"  728","line":"       *  things.  The _Base dtor only erases the elements, and note"},
{"lineNum":"  729","line":"       *  that if the elements themselves are pointers, the pointed-to"},
{"lineNum":"  730","line":"       *  memory is not touched in any way.  Managing the pointer is"},
{"lineNum":"  731","line":"       *  the user\'s responsibility."},
{"lineNum":"  732","line":"       */"},
{"lineNum":"  733","line":"      ~list() = default;","class":"linePartCov","hits":"2","order":"1566","possible_hits":"3",},
{"lineNum":"  734","line":"#endif"},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":"      /**"},
{"lineNum":"  737","line":"       *  @brief  %List assignment operator."},
{"lineNum":"  738","line":"       *  @param  __x  A %list of identical element and allocator types."},
{"lineNum":"  739","line":"       *"},
{"lineNum":"  740","line":"       *  All the elements of @a __x are copied."},
{"lineNum":"  741","line":"       *"},
{"lineNum":"  742","line":"       *  Whether the allocator is copied depends on the allocator traits."},
{"lineNum":"  743","line":"       */"},
{"lineNum":"  744","line":"      list&"},
{"lineNum":"  745","line":"      operator=(const list& __x);"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  748","line":"      /**"},
{"lineNum":"  749","line":"       *  @brief  %List move assignment operator."},
{"lineNum":"  750","line":"       *  @param  __x  A %list of identical element and allocator types."},
{"lineNum":"  751","line":"       *"},
{"lineNum":"  752","line":"       *  The contents of @a __x are moved into this %list (without copying)."},
{"lineNum":"  753","line":"       *"},
{"lineNum":"  754","line":"       *  Afterwards @a __x is a valid, but unspecified %list"},
{"lineNum":"  755","line":"       *"},
{"lineNum":"  756","line":"       *  Whether the allocator is moved depends on the allocator traits."},
{"lineNum":"  757","line":"       */"},
{"lineNum":"  758","line":"      list&"},
{"lineNum":"  759","line":"      operator=(list&& __x)"},
{"lineNum":"  760","line":"      noexcept(_Node_alloc_traits::_S_nothrow_move())"},
{"lineNum":"  761","line":"      {"},
{"lineNum":"  762","line":"\tconstexpr bool __move_storage ="},
{"lineNum":"  763","line":"\t  _Node_alloc_traits::_S_propagate_on_move_assign()"},
{"lineNum":"  764","line":"\t  || _Node_alloc_traits::_S_always_equal();"},
{"lineNum":"  765","line":"\t_M_move_assign(std::move(__x), __bool_constant<__move_storage>());"},
{"lineNum":"  766","line":"\treturn *this;"},
{"lineNum":"  767","line":"      }"},
{"lineNum":"  768","line":""},
{"lineNum":"  769","line":"      /**"},
{"lineNum":"  770","line":"       *  @brief  %List initializer list assignment operator."},
{"lineNum":"  771","line":"       *  @param  __l  An initializer_list of value_type."},
{"lineNum":"  772","line":"       *"},
{"lineNum":"  773","line":"       *  Replace the contents of the %list with copies of the elements"},
{"lineNum":"  774","line":"       *  in the initializer_list @a __l.  This is linear in l.size()."},
{"lineNum":"  775","line":"       */"},
{"lineNum":"  776","line":"      list&"},
{"lineNum":"  777","line":"      operator=(initializer_list<value_type> __l)"},
{"lineNum":"  778","line":"      {"},
{"lineNum":"  779","line":"\tthis->assign(__l.begin(), __l.end());"},
{"lineNum":"  780","line":"\treturn *this;"},
{"lineNum":"  781","line":"      }"},
{"lineNum":"  782","line":"#endif"},
{"lineNum":"  783","line":""},
{"lineNum":"  784","line":"      /**"},
{"lineNum":"  785","line":"       *  @brief  Assigns a given value to a %list."},
{"lineNum":"  786","line":"       *  @param  __n  Number of elements to be assigned."},
{"lineNum":"  787","line":"       *  @param  __val  Value to be assigned."},
{"lineNum":"  788","line":"       *"},
{"lineNum":"  789","line":"       *  This function fills a %list with @a __n copies of the given"},
{"lineNum":"  790","line":"       *  value.  Note that the assignment completely changes the %list"},
{"lineNum":"  791","line":"       *  and that the resulting %list\'s size is the same as the number"},
{"lineNum":"  792","line":"       *  of elements assigned."},
{"lineNum":"  793","line":"       */"},
{"lineNum":"  794","line":"      void"},
{"lineNum":"  795","line":"      assign(size_type __n, const value_type& __val)"},
{"lineNum":"  796","line":"      { _M_fill_assign(__n, __val); }"},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"      /**"},
{"lineNum":"  799","line":"       *  @brief  Assigns a range to a %list."},
{"lineNum":"  800","line":"       *  @param  __first  An input iterator."},
{"lineNum":"  801","line":"       *  @param  __last   An input iterator."},
{"lineNum":"  802","line":"       *"},
{"lineNum":"  803","line":"       *  This function fills a %list with copies of the elements in the"},
{"lineNum":"  804","line":"       *  range [@a __first,@a __last)."},
{"lineNum":"  805","line":"       *"},
{"lineNum":"  806","line":"       *  Note that the assignment completely changes the %list and"},
{"lineNum":"  807","line":"       *  that the resulting %list\'s size is the same as the number of"},
{"lineNum":"  808","line":"       *  elements assigned."},
{"lineNum":"  809","line":"       */"},
{"lineNum":"  810","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  811","line":"      template<typename _InputIterator,"},
{"lineNum":"  812","line":"\t       typename = std::_RequireInputIter<_InputIterator>>"},
{"lineNum":"  813","line":"\tvoid"},
{"lineNum":"  814","line":"\tassign(_InputIterator __first, _InputIterator __last)"},
{"lineNum":"  815","line":"\t{ _M_assign_dispatch(__first, __last, __false_type()); }"},
{"lineNum":"  816","line":"#else"},
{"lineNum":"  817","line":"      template<typename _InputIterator>"},
{"lineNum":"  818","line":"\tvoid"},
{"lineNum":"  819","line":"\tassign(_InputIterator __first, _InputIterator __last)"},
{"lineNum":"  820","line":"\t{"},
{"lineNum":"  821","line":"\t  // Check whether it\'s an integral type.  If so, it\'s not an iterator."},
{"lineNum":"  822","line":"\t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;"},
{"lineNum":"  823","line":"\t  _M_assign_dispatch(__first, __last, _Integral());"},
{"lineNum":"  824","line":"\t}"},
{"lineNum":"  825","line":"#endif"},
{"lineNum":"  826","line":""},
{"lineNum":"  827","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  828","line":"      /**"},
{"lineNum":"  829","line":"       *  @brief  Assigns an initializer_list to a %list."},
{"lineNum":"  830","line":"       *  @param  __l  An initializer_list of value_type."},
{"lineNum":"  831","line":"       *"},
{"lineNum":"  832","line":"       *  Replace the contents of the %list with copies of the elements"},
{"lineNum":"  833","line":"       *  in the initializer_list @a __l.  This is linear in __l.size()."},
{"lineNum":"  834","line":"       */"},
{"lineNum":"  835","line":"      void"},
{"lineNum":"  836","line":"      assign(initializer_list<value_type> __l)"},
{"lineNum":"  837","line":"      { this->_M_assign_dispatch(__l.begin(), __l.end(), __false_type()); }"},
{"lineNum":"  838","line":"#endif"},
{"lineNum":"  839","line":""},
{"lineNum":"  840","line":"      /// Get a copy of the memory allocation object."},
{"lineNum":"  841","line":"      allocator_type"},
{"lineNum":"  842","line":"      get_allocator() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  843","line":"      { return allocator_type(_Base::_M_get_Node_allocator()); }"},
{"lineNum":"  844","line":""},
{"lineNum":"  845","line":"      // iterators"},
{"lineNum":"  846","line":"      /**"},
{"lineNum":"  847","line":"       *  Returns a read/write iterator that points to the first element in the"},
{"lineNum":"  848","line":"       *  %list.  Iteration is done in ordinary element order."},
{"lineNum":"  849","line":"       */"},
{"lineNum":"  850","line":"      iterator"},
{"lineNum":"  851","line":"      begin() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"2","order":"1062","possible_hits":"2",},
{"lineNum":"  852","line":"      { return iterator(this->_M_impl._M_node._M_next); }","class":"linePartCov","hits":"1","order":"1063","possible_hits":"2",},
{"lineNum":"  853","line":""},
{"lineNum":"  854","line":"      /**"},
{"lineNum":"  855","line":"       *  Returns a read-only (constant) iterator that points to the"},
{"lineNum":"  856","line":"       *  first element in the %list.  Iteration is done in ordinary"},
{"lineNum":"  857","line":"       *  element order."},
{"lineNum":"  858","line":"       */"},
{"lineNum":"  859","line":"      const_iterator"},
{"lineNum":"  860","line":"      begin() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  861","line":"      { return const_iterator(this->_M_impl._M_node._M_next); }"},
{"lineNum":"  862","line":""},
{"lineNum":"  863","line":"      /**"},
{"lineNum":"  864","line":"       *  Returns a read/write iterator that points one past the last"},
{"lineNum":"  865","line":"       *  element in the %list.  Iteration is done in ordinary element"},
{"lineNum":"  866","line":"       *  order."},
{"lineNum":"  867","line":"       */"},
{"lineNum":"  868","line":"      iterator"},
{"lineNum":"  869","line":"      end() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"2","order":"1098","possible_hits":"2",},
{"lineNum":"  870","line":"      { return iterator(&this->_M_impl._M_node); }","class":"linePartCov","hits":"1","order":"1099","possible_hits":"2",},
{"lineNum":"  871","line":""},
{"lineNum":"  872","line":"      /**"},
{"lineNum":"  873","line":"       *  Returns a read-only (constant) iterator that points one past"},
{"lineNum":"  874","line":"       *  the last element in the %list.  Iteration is done in ordinary"},
{"lineNum":"  875","line":"       *  element order."},
{"lineNum":"  876","line":"       */"},
{"lineNum":"  877","line":"      const_iterator"},
{"lineNum":"  878","line":"      end() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  879","line":"      { return const_iterator(&this->_M_impl._M_node); }"},
{"lineNum":"  880","line":""},
{"lineNum":"  881","line":"      /**"},
{"lineNum":"  882","line":"       *  Returns a read/write reverse iterator that points to the last"},
{"lineNum":"  883","line":"       *  element in the %list.  Iteration is done in reverse element"},
{"lineNum":"  884","line":"       *  order."},
{"lineNum":"  885","line":"       */"},
{"lineNum":"  886","line":"      reverse_iterator"},
{"lineNum":"  887","line":"      rbegin() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  888","line":"      { return reverse_iterator(end()); }"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"      /**"},
{"lineNum":"  891","line":"       *  Returns a read-only (constant) reverse iterator that points to"},
{"lineNum":"  892","line":"       *  the last element in the %list.  Iteration is done in reverse"},
{"lineNum":"  893","line":"       *  element order."},
{"lineNum":"  894","line":"       */"},
{"lineNum":"  895","line":"      const_reverse_iterator"},
{"lineNum":"  896","line":"      rbegin() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  897","line":"      { return const_reverse_iterator(end()); }"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"      /**"},
{"lineNum":"  900","line":"       *  Returns a read/write reverse iterator that points to one"},
{"lineNum":"  901","line":"       *  before the first element in the %list.  Iteration is done in"},
{"lineNum":"  902","line":"       *  reverse element order."},
{"lineNum":"  903","line":"       */"},
{"lineNum":"  904","line":"      reverse_iterator"},
{"lineNum":"  905","line":"      rend() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  906","line":"      { return reverse_iterator(begin()); }"},
{"lineNum":"  907","line":""},
{"lineNum":"  908","line":"      /**"},
{"lineNum":"  909","line":"       *  Returns a read-only (constant) reverse iterator that points to one"},
{"lineNum":"  910","line":"       *  before the first element in the %list.  Iteration is done in reverse"},
{"lineNum":"  911","line":"       *  element order."},
{"lineNum":"  912","line":"       */"},
{"lineNum":"  913","line":"      const_reverse_iterator"},
{"lineNum":"  914","line":"      rend() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  915","line":"      { return const_reverse_iterator(begin()); }"},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  918","line":"      /**"},
{"lineNum":"  919","line":"       *  Returns a read-only (constant) iterator that points to the"},
{"lineNum":"  920","line":"       *  first element in the %list.  Iteration is done in ordinary"},
{"lineNum":"  921","line":"       *  element order."},
{"lineNum":"  922","line":"       */"},
{"lineNum":"  923","line":"      const_iterator"},
{"lineNum":"  924","line":"      cbegin() const noexcept"},
{"lineNum":"  925","line":"      { return const_iterator(this->_M_impl._M_node._M_next); }"},
{"lineNum":"  926","line":""},
{"lineNum":"  927","line":"      /**"},
{"lineNum":"  928","line":"       *  Returns a read-only (constant) iterator that points one past"},
{"lineNum":"  929","line":"       *  the last element in the %list.  Iteration is done in ordinary"},
{"lineNum":"  930","line":"       *  element order."},
{"lineNum":"  931","line":"       */"},
{"lineNum":"  932","line":"      const_iterator"},
{"lineNum":"  933","line":"      cend() const noexcept"},
{"lineNum":"  934","line":"      { return const_iterator(&this->_M_impl._M_node); }"},
{"lineNum":"  935","line":""},
{"lineNum":"  936","line":"      /**"},
{"lineNum":"  937","line":"       *  Returns a read-only (constant) reverse iterator that points to"},
{"lineNum":"  938","line":"       *  the last element in the %list.  Iteration is done in reverse"},
{"lineNum":"  939","line":"       *  element order."},
{"lineNum":"  940","line":"       */"},
{"lineNum":"  941","line":"      const_reverse_iterator"},
{"lineNum":"  942","line":"      crbegin() const noexcept"},
{"lineNum":"  943","line":"      { return const_reverse_iterator(end()); }"},
{"lineNum":"  944","line":""},
{"lineNum":"  945","line":"      /**"},
{"lineNum":"  946","line":"       *  Returns a read-only (constant) reverse iterator that points to one"},
{"lineNum":"  947","line":"       *  before the first element in the %list.  Iteration is done in reverse"},
{"lineNum":"  948","line":"       *  element order."},
{"lineNum":"  949","line":"       */"},
{"lineNum":"  950","line":"      const_reverse_iterator"},
{"lineNum":"  951","line":"      crend() const noexcept"},
{"lineNum":"  952","line":"      { return const_reverse_iterator(begin()); }"},
{"lineNum":"  953","line":"#endif"},
{"lineNum":"  954","line":""},
{"lineNum":"  955","line":"      // [23.2.2.2] capacity"},
{"lineNum":"  956","line":"      /**"},
{"lineNum":"  957","line":"       *  Returns true if the %list is empty.  (Thus begin() would equal"},
{"lineNum":"  958","line":"       *  end().)"},
{"lineNum":"  959","line":"       */"},
{"lineNum":"  960","line":"      bool"},
{"lineNum":"  961","line":"      empty() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  962","line":"      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }"},
{"lineNum":"  963","line":""},
{"lineNum":"  964","line":"      /**  Returns the number of elements in the %list.  */"},
{"lineNum":"  965","line":"      size_type"},
{"lineNum":"  966","line":"      size() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  967","line":"      { return this->_M_node_count(); }"},
{"lineNum":"  968","line":""},
{"lineNum":"  969","line":"      /**  Returns the size() of the largest possible %list.  */"},
{"lineNum":"  970","line":"      size_type"},
{"lineNum":"  971","line":"      max_size() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  972","line":"      { return _Node_alloc_traits::max_size(_M_get_Node_allocator()); }"},
{"lineNum":"  973","line":""},
{"lineNum":"  974","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  975","line":"      /**"},
{"lineNum":"  976","line":"       *  @brief Resizes the %list to the specified number of elements."},
{"lineNum":"  977","line":"       *  @param __new_size Number of elements the %list should contain."},
{"lineNum":"  978","line":"       *"},
{"lineNum":"  979","line":"       *  This function will %resize the %list to the specified number"},
{"lineNum":"  980","line":"       *  of elements.  If the number is smaller than the %list\'s"},
{"lineNum":"  981","line":"       *  current size the %list is truncated, otherwise default"},
{"lineNum":"  982","line":"       *  constructed elements are appended."},
{"lineNum":"  983","line":"       */"},
{"lineNum":"  984","line":"      void"},
{"lineNum":"  985","line":"      resize(size_type __new_size);"},
{"lineNum":"  986","line":""},
{"lineNum":"  987","line":"      /**"},
{"lineNum":"  988","line":"       *  @brief Resizes the %list to the specified number of elements."},
{"lineNum":"  989","line":"       *  @param __new_size Number of elements the %list should contain."},
{"lineNum":"  990","line":"       *  @param __x Data with which new elements should be populated."},
{"lineNum":"  991","line":"       *"},
{"lineNum":"  992","line":"       *  This function will %resize the %list to the specified number"},
{"lineNum":"  993","line":"       *  of elements.  If the number is smaller than the %list\'s"},
{"lineNum":"  994","line":"       *  current size the %list is truncated, otherwise the %list is"},
{"lineNum":"  995","line":"       *  extended and new elements are populated with given data."},
{"lineNum":"  996","line":"       */"},
{"lineNum":"  997","line":"      void"},
{"lineNum":"  998","line":"      resize(size_type __new_size, const value_type& __x);"},
{"lineNum":"  999","line":"#else"},
{"lineNum":" 1000","line":"      /**"},
{"lineNum":" 1001","line":"       *  @brief Resizes the %list to the specified number of elements."},
{"lineNum":" 1002","line":"       *  @param __new_size Number of elements the %list should contain."},
{"lineNum":" 1003","line":"       *  @param __x Data with which new elements should be populated."},
{"lineNum":" 1004","line":"       *"},
{"lineNum":" 1005","line":"       *  This function will %resize the %list to the specified number"},
{"lineNum":" 1006","line":"       *  of elements.  If the number is smaller than the %list\'s"},
{"lineNum":" 1007","line":"       *  current size the %list is truncated, otherwise the %list is"},
{"lineNum":" 1008","line":"       *  extended and new elements are populated with given data."},
{"lineNum":" 1009","line":"       */"},
{"lineNum":" 1010","line":"      void"},
{"lineNum":" 1011","line":"      resize(size_type __new_size, value_type __x = value_type());"},
{"lineNum":" 1012","line":"#endif"},
{"lineNum":" 1013","line":""},
{"lineNum":" 1014","line":"      // element access"},
{"lineNum":" 1015","line":"      /**"},
{"lineNum":" 1016","line":"       *  Returns a read/write reference to the data at the first"},
{"lineNum":" 1017","line":"       *  element of the %list."},
{"lineNum":" 1018","line":"       */"},
{"lineNum":" 1019","line":"      reference"},
{"lineNum":" 1020","line":"      front() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1021","line":"      { return *begin(); }"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"      /**"},
{"lineNum":" 1024","line":"       *  Returns a read-only (constant) reference to the data at the first"},
{"lineNum":" 1025","line":"       *  element of the %list."},
{"lineNum":" 1026","line":"       */"},
{"lineNum":" 1027","line":"      const_reference"},
{"lineNum":" 1028","line":"      front() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1029","line":"      { return *begin(); }"},
{"lineNum":" 1030","line":""},
{"lineNum":" 1031","line":"      /**"},
{"lineNum":" 1032","line":"       *  Returns a read/write reference to the data at the last element"},
{"lineNum":" 1033","line":"       *  of the %list."},
{"lineNum":" 1034","line":"       */"},
{"lineNum":" 1035","line":"      reference"},
{"lineNum":" 1036","line":"      back() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1037","line":"      {"},
{"lineNum":" 1038","line":"\titerator __tmp = end();"},
{"lineNum":" 1039","line":"\t--__tmp;"},
{"lineNum":" 1040","line":"\treturn *__tmp;"},
{"lineNum":" 1041","line":"      }"},
{"lineNum":" 1042","line":""},
{"lineNum":" 1043","line":"      /**"},
{"lineNum":" 1044","line":"       *  Returns a read-only (constant) reference to the data at the last"},
{"lineNum":" 1045","line":"       *  element of the %list."},
{"lineNum":" 1046","line":"       */"},
{"lineNum":" 1047","line":"      const_reference"},
{"lineNum":" 1048","line":"      back() const _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1049","line":"      {"},
{"lineNum":" 1050","line":"\tconst_iterator __tmp = end();"},
{"lineNum":" 1051","line":"\t--__tmp;"},
{"lineNum":" 1052","line":"\treturn *__tmp;"},
{"lineNum":" 1053","line":"      }"},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"      // [23.2.2.3] modifiers"},
{"lineNum":" 1056","line":"      /**"},
{"lineNum":" 1057","line":"       *  @brief  Add data to the front of the %list."},
{"lineNum":" 1058","line":"       *  @param  __x  Data to be added."},
{"lineNum":" 1059","line":"       *"},
{"lineNum":" 1060","line":"       *  This is a typical stack operation.  The function creates an"},
{"lineNum":" 1061","line":"       *  element at the front of the %list and assigns the given data"},
{"lineNum":" 1062","line":"       *  to it.  Due to the nature of a %list this operation can be"},
{"lineNum":" 1063","line":"       *  done in constant time, and does not invalidate iterators and"},
{"lineNum":" 1064","line":"       *  references."},
{"lineNum":" 1065","line":"       */"},
{"lineNum":" 1066","line":"      void"},
{"lineNum":" 1067","line":"      push_front(const value_type& __x)","class":"lineCov","hits":"1","order":"1060","possible_hits":"1",},
{"lineNum":" 1068","line":"      { this->_M_insert(begin(), __x); }","class":"linePartCov","hits":"1","order":"1061","possible_hits":"2",},
{"lineNum":" 1069","line":""},
{"lineNum":" 1070","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1071","line":"      void"},
{"lineNum":" 1072","line":"      push_front(value_type&& __x)"},
{"lineNum":" 1073","line":"      { this->_M_insert(begin(), std::move(__x)); }"},
{"lineNum":" 1074","line":""},
{"lineNum":" 1075","line":"      template<typename... _Args>"},
{"lineNum":" 1076","line":"#if __cplusplus > 201402L"},
{"lineNum":" 1077","line":"\treference"},
{"lineNum":" 1078","line":"#else"},
{"lineNum":" 1079","line":"\tvoid"},
{"lineNum":" 1080","line":"#endif"},
{"lineNum":" 1081","line":"\templace_front(_Args&&... __args)"},
{"lineNum":" 1082","line":"\t{"},
{"lineNum":" 1083","line":"\t  this->_M_insert(begin(), std::forward<_Args>(__args)...);"},
{"lineNum":" 1084","line":"#if __cplusplus > 201402L"},
{"lineNum":" 1085","line":"\t  return front();"},
{"lineNum":" 1086","line":"#endif"},
{"lineNum":" 1087","line":"\t}"},
{"lineNum":" 1088","line":"#endif"},
{"lineNum":" 1089","line":""},
{"lineNum":" 1090","line":"      /**"},
{"lineNum":" 1091","line":"       *  @brief  Removes first element."},
{"lineNum":" 1092","line":"       *"},
{"lineNum":" 1093","line":"       *  This is a typical stack operation.  It shrinks the %list by"},
{"lineNum":" 1094","line":"       *  one.  Due to the nature of a %list this operation can be done"},
{"lineNum":" 1095","line":"       *  in constant time, and only invalidates iterators/references to"},
{"lineNum":" 1096","line":"       *  the element being removed."},
{"lineNum":" 1097","line":"       *"},
{"lineNum":" 1098","line":"       *  Note that no data is returned, and if the first element\'s data"},
{"lineNum":" 1099","line":"       *  is needed, it should be retrieved before pop_front() is"},
{"lineNum":" 1100","line":"       *  called."},
{"lineNum":" 1101","line":"       */"},
{"lineNum":" 1102","line":"      void"},
{"lineNum":" 1103","line":"      pop_front() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1104","line":"      { this->_M_erase(begin()); }"},
{"lineNum":" 1105","line":""},
{"lineNum":" 1106","line":"      /**"},
{"lineNum":" 1107","line":"       *  @brief  Add data to the end of the %list."},
{"lineNum":" 1108","line":"       *  @param  __x  Data to be added."},
{"lineNum":" 1109","line":"       *"},
{"lineNum":" 1110","line":"       *  This is a typical stack operation.  The function creates an"},
{"lineNum":" 1111","line":"       *  element at the end of the %list and assigns the given data to"},
{"lineNum":" 1112","line":"       *  it.  Due to the nature of a %list this operation can be done"},
{"lineNum":" 1113","line":"       *  in constant time, and does not invalidate iterators and"},
{"lineNum":" 1114","line":"       *  references."},
{"lineNum":" 1115","line":"       */"},
{"lineNum":" 1116","line":"      void"},
{"lineNum":" 1117","line":"      push_back(const value_type& __x)"},
{"lineNum":" 1118","line":"      { this->_M_insert(end(), __x); }"},
{"lineNum":" 1119","line":""},
{"lineNum":" 1120","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1121","line":"      void"},
{"lineNum":" 1122","line":"      push_back(value_type&& __x)"},
{"lineNum":" 1123","line":"      { this->_M_insert(end(), std::move(__x)); }"},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"      template<typename... _Args>"},
{"lineNum":" 1126","line":"#if __cplusplus > 201402L"},
{"lineNum":" 1127","line":"\treference"},
{"lineNum":" 1128","line":"#else"},
{"lineNum":" 1129","line":"\tvoid"},
{"lineNum":" 1130","line":"#endif"},
{"lineNum":" 1131","line":"\templace_back(_Args&&... __args)"},
{"lineNum":" 1132","line":"\t{"},
{"lineNum":" 1133","line":"\t  this->_M_insert(end(), std::forward<_Args>(__args)...);"},
{"lineNum":" 1134","line":"#if __cplusplus > 201402L"},
{"lineNum":" 1135","line":"\treturn back();"},
{"lineNum":" 1136","line":"#endif"},
{"lineNum":" 1137","line":"\t}"},
{"lineNum":" 1138","line":"#endif"},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":"      /**"},
{"lineNum":" 1141","line":"       *  @brief  Removes last element."},
{"lineNum":" 1142","line":"       *"},
{"lineNum":" 1143","line":"       *  This is a typical stack operation.  It shrinks the %list by"},
{"lineNum":" 1144","line":"       *  one.  Due to the nature of a %list this operation can be done"},
{"lineNum":" 1145","line":"       *  in constant time, and only invalidates iterators/references to"},
{"lineNum":" 1146","line":"       *  the element being removed."},
{"lineNum":" 1147","line":"       *"},
{"lineNum":" 1148","line":"       *  Note that no data is returned, and if the last element\'s data"},
{"lineNum":" 1149","line":"       *  is needed, it should be retrieved before pop_back() is called."},
{"lineNum":" 1150","line":"       */"},
{"lineNum":" 1151","line":"      void"},
{"lineNum":" 1152","line":"      pop_back() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1153","line":"      { this->_M_erase(iterator(this->_M_impl._M_node._M_prev)); }"},
{"lineNum":" 1154","line":""},
{"lineNum":" 1155","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1156","line":"      /**"},
{"lineNum":" 1157","line":"       *  @brief  Constructs object in %list before specified iterator."},
{"lineNum":" 1158","line":"       *  @param  __position  A const_iterator into the %list."},
{"lineNum":" 1159","line":"       *  @param  __args  Arguments."},
{"lineNum":" 1160","line":"       *  @return  An iterator that points to the inserted data."},
{"lineNum":" 1161","line":"       *"},
{"lineNum":" 1162","line":"       *  This function will insert an object of type T constructed"},
{"lineNum":" 1163","line":"       *  with T(std::forward<Args>(args)...) before the specified"},
{"lineNum":" 1164","line":"       *  location.  Due to the nature of a %list this operation can"},
{"lineNum":" 1165","line":"       *  be done in constant time, and does not invalidate iterators"},
{"lineNum":" 1166","line":"       *  and references."},
{"lineNum":" 1167","line":"       */"},
{"lineNum":" 1168","line":"      template<typename... _Args>"},
{"lineNum":" 1169","line":"\titerator"},
{"lineNum":" 1170","line":"\templace(const_iterator __position, _Args&&... __args);"},
{"lineNum":" 1171","line":""},
{"lineNum":" 1172","line":"      /**"},
{"lineNum":" 1173","line":"       *  @brief  Inserts given value into %list before specified iterator."},
{"lineNum":" 1174","line":"       *  @param  __position  A const_iterator into the %list."},
{"lineNum":" 1175","line":"       *  @param  __x  Data to be inserted."},
{"lineNum":" 1176","line":"       *  @return  An iterator that points to the inserted data."},
{"lineNum":" 1177","line":"       *"},
{"lineNum":" 1178","line":"       *  This function will insert a copy of the given value before"},
{"lineNum":" 1179","line":"       *  the specified location.  Due to the nature of a %list this"},
{"lineNum":" 1180","line":"       *  operation can be done in constant time, and does not"},
{"lineNum":" 1181","line":"       *  invalidate iterators and references."},
{"lineNum":" 1182","line":"       */"},
{"lineNum":" 1183","line":"      iterator"},
{"lineNum":" 1184","line":"      insert(const_iterator __position, const value_type& __x);"},
{"lineNum":" 1185","line":"#else"},
{"lineNum":" 1186","line":"      /**"},
{"lineNum":" 1187","line":"       *  @brief  Inserts given value into %list before specified iterator."},
{"lineNum":" 1188","line":"       *  @param  __position  An iterator into the %list."},
{"lineNum":" 1189","line":"       *  @param  __x  Data to be inserted."},
{"lineNum":" 1190","line":"       *  @return  An iterator that points to the inserted data."},
{"lineNum":" 1191","line":"       *"},
{"lineNum":" 1192","line":"       *  This function will insert a copy of the given value before"},
{"lineNum":" 1193","line":"       *  the specified location.  Due to the nature of a %list this"},
{"lineNum":" 1194","line":"       *  operation can be done in constant time, and does not"},
{"lineNum":" 1195","line":"       *  invalidate iterators and references."},
{"lineNum":" 1196","line":"       */"},
{"lineNum":" 1197","line":"      iterator"},
{"lineNum":" 1198","line":"      insert(iterator __position, const value_type& __x);"},
{"lineNum":" 1199","line":"#endif"},
{"lineNum":" 1200","line":""},
{"lineNum":" 1201","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1202","line":"      /**"},
{"lineNum":" 1203","line":"       *  @brief  Inserts given rvalue into %list before specified iterator."},
{"lineNum":" 1204","line":"       *  @param  __position  A const_iterator into the %list."},
{"lineNum":" 1205","line":"       *  @param  __x  Data to be inserted."},
{"lineNum":" 1206","line":"       *  @return  An iterator that points to the inserted data."},
{"lineNum":" 1207","line":"       *"},
{"lineNum":" 1208","line":"       *  This function will insert a copy of the given rvalue before"},
{"lineNum":" 1209","line":"       *  the specified location.  Due to the nature of a %list this"},
{"lineNum":" 1210","line":"       *  operation can be done in constant time, and does not"},
{"lineNum":" 1211","line":"       *  invalidate iterators and references."},
{"lineNum":" 1212","line":"\t*/"},
{"lineNum":" 1213","line":"      iterator"},
{"lineNum":" 1214","line":"      insert(const_iterator __position, value_type&& __x)"},
{"lineNum":" 1215","line":"      { return emplace(__position, std::move(__x)); }"},
{"lineNum":" 1216","line":""},
{"lineNum":" 1217","line":"      /**"},
{"lineNum":" 1218","line":"       *  @brief  Inserts the contents of an initializer_list into %list"},
{"lineNum":" 1219","line":"       *          before specified const_iterator."},
{"lineNum":" 1220","line":"       *  @param  __p  A const_iterator into the %list."},
{"lineNum":" 1221","line":"       *  @param  __l  An initializer_list of value_type."},
{"lineNum":" 1222","line":"       *  @return  An iterator pointing to the first element inserted"},
{"lineNum":" 1223","line":"       *           (or __position)."},
{"lineNum":" 1224","line":"       *"},
{"lineNum":" 1225","line":"       *  This function will insert copies of the data in the"},
{"lineNum":" 1226","line":"       *  initializer_list @a l into the %list before the location"},
{"lineNum":" 1227","line":"       *  specified by @a p."},
{"lineNum":" 1228","line":"       *"},
{"lineNum":" 1229","line":"       *  This operation is linear in the number of elements inserted and"},
{"lineNum":" 1230","line":"       *  does not invalidate iterators and references."},
{"lineNum":" 1231","line":"       */"},
{"lineNum":" 1232","line":"      iterator"},
{"lineNum":" 1233","line":"      insert(const_iterator __p, initializer_list<value_type> __l)"},
{"lineNum":" 1234","line":"      { return this->insert(__p, __l.begin(), __l.end()); }"},
{"lineNum":" 1235","line":"#endif"},
{"lineNum":" 1236","line":""},
{"lineNum":" 1237","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1238","line":"      /**"},
{"lineNum":" 1239","line":"       *  @brief  Inserts a number of copies of given data into the %list."},
{"lineNum":" 1240","line":"       *  @param  __position  A const_iterator into the %list."},
{"lineNum":" 1241","line":"       *  @param  __n  Number of elements to be inserted."},
{"lineNum":" 1242","line":"       *  @param  __x  Data to be inserted."},
{"lineNum":" 1243","line":"       *  @return  An iterator pointing to the first element inserted"},
{"lineNum":" 1244","line":"       *           (or __position)."},
{"lineNum":" 1245","line":"       *"},
{"lineNum":" 1246","line":"       *  This function will insert a specified number of copies of the"},
{"lineNum":" 1247","line":"       *  given data before the location specified by @a position."},
{"lineNum":" 1248","line":"       *"},
{"lineNum":" 1249","line":"       *  This operation is linear in the number of elements inserted and"},
{"lineNum":" 1250","line":"       *  does not invalidate iterators and references."},
{"lineNum":" 1251","line":"       */"},
{"lineNum":" 1252","line":"      iterator"},
{"lineNum":" 1253","line":"      insert(const_iterator __position, size_type __n, const value_type& __x);"},
{"lineNum":" 1254","line":"#else"},
{"lineNum":" 1255","line":"      /**"},
{"lineNum":" 1256","line":"       *  @brief  Inserts a number of copies of given data into the %list."},
{"lineNum":" 1257","line":"       *  @param  __position  An iterator into the %list."},
{"lineNum":" 1258","line":"       *  @param  __n  Number of elements to be inserted."},
{"lineNum":" 1259","line":"       *  @param  __x  Data to be inserted."},
{"lineNum":" 1260","line":"       *"},
{"lineNum":" 1261","line":"       *  This function will insert a specified number of copies of the"},
{"lineNum":" 1262","line":"       *  given data before the location specified by @a position."},
{"lineNum":" 1263","line":"       *"},
{"lineNum":" 1264","line":"       *  This operation is linear in the number of elements inserted and"},
{"lineNum":" 1265","line":"       *  does not invalidate iterators and references."},
{"lineNum":" 1266","line":"       */"},
{"lineNum":" 1267","line":"      void"},
{"lineNum":" 1268","line":"      insert(iterator __position, size_type __n, const value_type& __x)"},
{"lineNum":" 1269","line":"      {"},
{"lineNum":" 1270","line":"\tlist __tmp(__n, __x, get_allocator());"},
{"lineNum":" 1271","line":"\tsplice(__position, __tmp);"},
{"lineNum":" 1272","line":"      }"},
{"lineNum":" 1273","line":"#endif"},
{"lineNum":" 1274","line":""},
{"lineNum":" 1275","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1276","line":"      /**"},
{"lineNum":" 1277","line":"       *  @brief  Inserts a range into the %list."},
{"lineNum":" 1278","line":"       *  @param  __position  A const_iterator into the %list."},
{"lineNum":" 1279","line":"       *  @param  __first  An input iterator."},
{"lineNum":" 1280","line":"       *  @param  __last   An input iterator."},
{"lineNum":" 1281","line":"       *  @return  An iterator pointing to the first element inserted"},
{"lineNum":" 1282","line":"       *           (or __position)."},
{"lineNum":" 1283","line":"       *"},
{"lineNum":" 1284","line":"       *  This function will insert copies of the data in the range [@a"},
{"lineNum":" 1285","line":"       *  first,@a last) into the %list before the location specified by"},
{"lineNum":" 1286","line":"       *  @a position."},
{"lineNum":" 1287","line":"       *"},
{"lineNum":" 1288","line":"       *  This operation is linear in the number of elements inserted and"},
{"lineNum":" 1289","line":"       *  does not invalidate iterators and references."},
{"lineNum":" 1290","line":"       */"},
{"lineNum":" 1291","line":"      template<typename _InputIterator,"},
{"lineNum":" 1292","line":"\t       typename = std::_RequireInputIter<_InputIterator>>"},
{"lineNum":" 1293","line":"\titerator"},
{"lineNum":" 1294","line":"\tinsert(const_iterator __position, _InputIterator __first,"},
{"lineNum":" 1295","line":"\t       _InputIterator __last);"},
{"lineNum":" 1296","line":"#else"},
{"lineNum":" 1297","line":"      /**"},
{"lineNum":" 1298","line":"       *  @brief  Inserts a range into the %list."},
{"lineNum":" 1299","line":"       *  @param  __position  An iterator into the %list."},
{"lineNum":" 1300","line":"       *  @param  __first  An input iterator."},
{"lineNum":" 1301","line":"       *  @param  __last   An input iterator."},
{"lineNum":" 1302","line":"       *"},
{"lineNum":" 1303","line":"       *  This function will insert copies of the data in the range [@a"},
{"lineNum":" 1304","line":"       *  first,@a last) into the %list before the location specified by"},
{"lineNum":" 1305","line":"       *  @a position."},
{"lineNum":" 1306","line":"       *"},
{"lineNum":" 1307","line":"       *  This operation is linear in the number of elements inserted and"},
{"lineNum":" 1308","line":"       *  does not invalidate iterators and references."},
{"lineNum":" 1309","line":"       */"},
{"lineNum":" 1310","line":"      template<typename _InputIterator>"},
{"lineNum":" 1311","line":"\tvoid"},
{"lineNum":" 1312","line":"\tinsert(iterator __position, _InputIterator __first,"},
{"lineNum":" 1313","line":"\t       _InputIterator __last)"},
{"lineNum":" 1314","line":"\t{"},
{"lineNum":" 1315","line":"\t  list __tmp(__first, __last, get_allocator());"},
{"lineNum":" 1316","line":"\t  splice(__position, __tmp);"},
{"lineNum":" 1317","line":"\t}"},
{"lineNum":" 1318","line":"#endif"},
{"lineNum":" 1319","line":""},
{"lineNum":" 1320","line":"      /**"},
{"lineNum":" 1321","line":"       *  @brief  Remove element at given position."},
{"lineNum":" 1322","line":"       *  @param  __position  Iterator pointing to element to be erased."},
{"lineNum":" 1323","line":"       *  @return  An iterator pointing to the next element (or end())."},
{"lineNum":" 1324","line":"       *"},
{"lineNum":" 1325","line":"       *  This function will erase the element at the given position and thus"},
{"lineNum":" 1326","line":"       *  shorten the %list by one."},
{"lineNum":" 1327","line":"       *"},
{"lineNum":" 1328","line":"       *  Due to the nature of a %list this operation can be done in"},
{"lineNum":" 1329","line":"       *  constant time, and only invalidates iterators/references to"},
{"lineNum":" 1330","line":"       *  the element being removed.  The user is also cautioned that"},
{"lineNum":" 1331","line":"       *  this function only erases the element, and that if the element"},
{"lineNum":" 1332","line":"       *  is itself a pointer, the pointed-to memory is not touched in"},
{"lineNum":" 1333","line":"       *  any way.  Managing the pointer is the user\'s responsibility."},
{"lineNum":" 1334","line":"       */"},
{"lineNum":" 1335","line":"      iterator"},
{"lineNum":" 1336","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1337","line":"      erase(const_iterator __position) noexcept;"},
{"lineNum":" 1338","line":"#else"},
{"lineNum":" 1339","line":"      erase(iterator __position);"},
{"lineNum":" 1340","line":"#endif"},
{"lineNum":" 1341","line":""},
{"lineNum":" 1342","line":"      /**"},
{"lineNum":" 1343","line":"       *  @brief  Remove a range of elements."},
{"lineNum":" 1344","line":"       *  @param  __first  Iterator pointing to the first element to be erased."},
{"lineNum":" 1345","line":"       *  @param  __last  Iterator pointing to one past the last element to be"},
{"lineNum":" 1346","line":"       *                erased."},
{"lineNum":" 1347","line":"       *  @return  An iterator pointing to the element pointed to by @a last"},
{"lineNum":" 1348","line":"       *           prior to erasing (or end())."},
{"lineNum":" 1349","line":"       *"},
{"lineNum":" 1350","line":"       *  This function will erase the elements in the range @a"},
{"lineNum":" 1351","line":"       *  [first,last) and shorten the %list accordingly."},
{"lineNum":" 1352","line":"       *"},
{"lineNum":" 1353","line":"       *  This operation is linear time in the size of the range and only"},
{"lineNum":" 1354","line":"       *  invalidates iterators/references to the element being removed."},
{"lineNum":" 1355","line":"       *  The user is also cautioned that this function only erases the"},
{"lineNum":" 1356","line":"       *  elements, and that if the elements themselves are pointers, the"},
{"lineNum":" 1357","line":"       *  pointed-to memory is not touched in any way.  Managing the pointer"},
{"lineNum":" 1358","line":"       *  is the user\'s responsibility."},
{"lineNum":" 1359","line":"       */"},
{"lineNum":" 1360","line":"      iterator"},
{"lineNum":" 1361","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1362","line":"      erase(const_iterator __first, const_iterator __last) noexcept"},
{"lineNum":" 1363","line":"#else"},
{"lineNum":" 1364","line":"      erase(iterator __first, iterator __last)"},
{"lineNum":" 1365","line":"#endif"},
{"lineNum":" 1366","line":"      {"},
{"lineNum":" 1367","line":"\twhile (__first != __last)"},
{"lineNum":" 1368","line":"\t  __first = erase(__first);"},
{"lineNum":" 1369","line":"\treturn __last._M_const_cast();"},
{"lineNum":" 1370","line":"      }"},
{"lineNum":" 1371","line":""},
{"lineNum":" 1372","line":"      /**"},
{"lineNum":" 1373","line":"       *  @brief  Swaps data with another %list."},
{"lineNum":" 1374","line":"       *  @param  __x  A %list of the same element and allocator types."},
{"lineNum":" 1375","line":"       *"},
{"lineNum":" 1376","line":"       *  This exchanges the elements between two lists in constant"},
{"lineNum":" 1377","line":"       *  time.  Note that the global std::swap() function is"},
{"lineNum":" 1378","line":"       *  specialized such that std::swap(l1,l2) will feed to this"},
{"lineNum":" 1379","line":"       *  function."},
{"lineNum":" 1380","line":"       *"},
{"lineNum":" 1381","line":"       *  Whether the allocators are swapped depends on the allocator traits."},
{"lineNum":" 1382","line":"       */"},
{"lineNum":" 1383","line":"      void"},
{"lineNum":" 1384","line":"      swap(list& __x) _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1385","line":"      {"},
{"lineNum":" 1386","line":"\t__detail::_List_node_base::swap(this->_M_impl._M_node,"},
{"lineNum":" 1387","line":"\t\t\t\t\t__x._M_impl._M_node);"},
{"lineNum":" 1388","line":""},
{"lineNum":" 1389","line":"\tsize_t __xsize = __x._M_get_size();"},
{"lineNum":" 1390","line":"\t__x._M_set_size(this->_M_get_size());"},
{"lineNum":" 1391","line":"\tthis->_M_set_size(__xsize);"},
{"lineNum":" 1392","line":""},
{"lineNum":" 1393","line":"\t_Node_alloc_traits::_S_on_swap(this->_M_get_Node_allocator(),"},
{"lineNum":" 1394","line":"\t\t\t\t       __x._M_get_Node_allocator());"},
{"lineNum":" 1395","line":"      }"},
{"lineNum":" 1396","line":""},
{"lineNum":" 1397","line":"      /**"},
{"lineNum":" 1398","line":"       *  Erases all the elements.  Note that this function only erases"},
{"lineNum":" 1399","line":"       *  the elements, and that if the elements themselves are"},
{"lineNum":" 1400","line":"       *  pointers, the pointed-to memory is not touched in any way."},
{"lineNum":" 1401","line":"       *  Managing the pointer is the user\'s responsibility."},
{"lineNum":" 1402","line":"       */"},
{"lineNum":" 1403","line":"      void"},
{"lineNum":" 1404","line":"      clear() _GLIBCXX_NOEXCEPT","class":"lineCov","hits":"1","order":"1160","possible_hits":"1",},
{"lineNum":" 1405","line":"      {"},
{"lineNum":" 1406","line":"\t_Base::_M_clear();","class":"lineCov","hits":"1","order":"1161","possible_hits":"1",},
{"lineNum":" 1407","line":"\t_Base::_M_init();","class":"lineCov","hits":"1","order":"1210","possible_hits":"1",},
{"lineNum":" 1408","line":"      }","class":"linePartCov","hits":"1","order":"1211","possible_hits":"2",},
{"lineNum":" 1409","line":""},
{"lineNum":" 1410","line":"      // [23.2.2.4] list operations"},
{"lineNum":" 1411","line":"      /**"},
{"lineNum":" 1412","line":"       *  @brief  Insert contents of another %list."},
{"lineNum":" 1413","line":"       *  @param  __position  Iterator referencing the element to insert before."},
{"lineNum":" 1414","line":"       *  @param  __x  Source list."},
{"lineNum":" 1415","line":"       *"},
{"lineNum":" 1416","line":"       *  The elements of @a __x are inserted in constant time in front of"},
{"lineNum":" 1417","line":"       *  the element referenced by @a __position.  @a __x becomes an empty"},
{"lineNum":" 1418","line":"       *  list."},
{"lineNum":" 1419","line":"       *"},
{"lineNum":" 1420","line":"       *  Requires this != @a __x."},
{"lineNum":" 1421","line":"       */"},
{"lineNum":" 1422","line":"      void"},
{"lineNum":" 1423","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1424","line":"      splice(const_iterator __position, list&& __x) noexcept"},
{"lineNum":" 1425","line":"#else"},
{"lineNum":" 1426","line":"      splice(iterator __position, list& __x)"},
{"lineNum":" 1427","line":"#endif"},
{"lineNum":" 1428","line":"      {"},
{"lineNum":" 1429","line":"\tif (!__x.empty())"},
{"lineNum":" 1430","line":"\t  {"},
{"lineNum":" 1431","line":"\t    _M_check_equal_allocators(__x);"},
{"lineNum":" 1432","line":""},
{"lineNum":" 1433","line":"\t    this->_M_transfer(__position._M_const_cast(),"},
{"lineNum":" 1434","line":"\t\t\t      __x.begin(), __x.end());"},
{"lineNum":" 1435","line":""},
{"lineNum":" 1436","line":"\t    this->_M_inc_size(__x._M_get_size());"},
{"lineNum":" 1437","line":"\t    __x._M_set_size(0);"},
{"lineNum":" 1438","line":"\t  }"},
{"lineNum":" 1439","line":"      }"},
{"lineNum":" 1440","line":""},
{"lineNum":" 1441","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1442","line":"      void"},
{"lineNum":" 1443","line":"      splice(const_iterator __position, list& __x) noexcept"},
{"lineNum":" 1444","line":"      { splice(__position, std::move(__x)); }"},
{"lineNum":" 1445","line":"#endif"},
{"lineNum":" 1446","line":""},
{"lineNum":" 1447","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1448","line":"      /**"},
{"lineNum":" 1449","line":"       *  @brief  Insert element from another %list."},
{"lineNum":" 1450","line":"       *  @param  __position  Const_iterator referencing the element to"},
{"lineNum":" 1451","line":"       *                      insert before."},
{"lineNum":" 1452","line":"       *  @param  __x  Source list."},
{"lineNum":" 1453","line":"       *  @param  __i  Const_iterator referencing the element to move."},
{"lineNum":" 1454","line":"       *"},
{"lineNum":" 1455","line":"       *  Removes the element in list @a __x referenced by @a __i and"},
{"lineNum":" 1456","line":"       *  inserts it into the current list before @a __position."},
{"lineNum":" 1457","line":"       */"},
{"lineNum":" 1458","line":"      void"},
{"lineNum":" 1459","line":"      splice(const_iterator __position, list&& __x, const_iterator __i) noexcept"},
{"lineNum":" 1460","line":"#else"},
{"lineNum":" 1461","line":"      /**"},
{"lineNum":" 1462","line":"       *  @brief  Insert element from another %list."},
{"lineNum":" 1463","line":"       *  @param  __position  Iterator referencing the element to insert before."},
{"lineNum":" 1464","line":"       *  @param  __x  Source list."},
{"lineNum":" 1465","line":"       *  @param  __i  Iterator referencing the element to move."},
{"lineNum":" 1466","line":"       *"},
{"lineNum":" 1467","line":"       *  Removes the element in list @a __x referenced by @a __i and"},
{"lineNum":" 1468","line":"       *  inserts it into the current list before @a __position."},
{"lineNum":" 1469","line":"       */"},
{"lineNum":" 1470","line":"      void"},
{"lineNum":" 1471","line":"      splice(iterator __position, list& __x, iterator __i)"},
{"lineNum":" 1472","line":"#endif"},
{"lineNum":" 1473","line":"      {"},
{"lineNum":" 1474","line":"\titerator __j = __i._M_const_cast();"},
{"lineNum":" 1475","line":"\t++__j;"},
{"lineNum":" 1476","line":"\tif (__position == __i || __position == __j)"},
{"lineNum":" 1477","line":"\t  return;"},
{"lineNum":" 1478","line":""},
{"lineNum":" 1479","line":"\tif (this != std::__addressof(__x))"},
{"lineNum":" 1480","line":"\t  _M_check_equal_allocators(__x);"},
{"lineNum":" 1481","line":""},
{"lineNum":" 1482","line":"\tthis->_M_transfer(__position._M_const_cast(),"},
{"lineNum":" 1483","line":"\t\t\t  __i._M_const_cast(), __j);"},
{"lineNum":" 1484","line":""},
{"lineNum":" 1485","line":"\tthis->_M_inc_size(1);"},
{"lineNum":" 1486","line":"\t__x._M_dec_size(1);"},
{"lineNum":" 1487","line":"      }"},
{"lineNum":" 1488","line":""},
{"lineNum":" 1489","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1490","line":"      /**"},
{"lineNum":" 1491","line":"       *  @brief  Insert element from another %list."},
{"lineNum":" 1492","line":"       *  @param  __position  Const_iterator referencing the element to"},
{"lineNum":" 1493","line":"       *                      insert before."},
{"lineNum":" 1494","line":"       *  @param  __x  Source list."},
{"lineNum":" 1495","line":"       *  @param  __i  Const_iterator referencing the element to move."},
{"lineNum":" 1496","line":"       *"},
{"lineNum":" 1497","line":"       *  Removes the element in list @a __x referenced by @a __i and"},
{"lineNum":" 1498","line":"       *  inserts it into the current list before @a __position."},
{"lineNum":" 1499","line":"       */"},
{"lineNum":" 1500","line":"      void"},
{"lineNum":" 1501","line":"      splice(const_iterator __position, list& __x, const_iterator __i) noexcept"},
{"lineNum":" 1502","line":"      { splice(__position, std::move(__x), __i); }"},
{"lineNum":" 1503","line":"#endif"},
{"lineNum":" 1504","line":""},
{"lineNum":" 1505","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1506","line":"      /**"},
{"lineNum":" 1507","line":"       *  @brief  Insert range from another %list."},
{"lineNum":" 1508","line":"       *  @param  __position  Const_iterator referencing the element to"},
{"lineNum":" 1509","line":"       *                      insert before."},
{"lineNum":" 1510","line":"       *  @param  __x  Source list."},
{"lineNum":" 1511","line":"       *  @param  __first  Const_iterator referencing the start of range in x."},
{"lineNum":" 1512","line":"       *  @param  __last  Const_iterator referencing the end of range in x."},
{"lineNum":" 1513","line":"       *"},
{"lineNum":" 1514","line":"       *  Removes elements in the range [__first,__last) and inserts them"},
{"lineNum":" 1515","line":"       *  before @a __position in constant time."},
{"lineNum":" 1516","line":"       *"},
{"lineNum":" 1517","line":"       *  Undefined if @a __position is in [__first,__last)."},
{"lineNum":" 1518","line":"       */"},
{"lineNum":" 1519","line":"      void"},
{"lineNum":" 1520","line":"      splice(const_iterator __position, list&& __x, const_iterator __first,"},
{"lineNum":" 1521","line":"\t     const_iterator __last) noexcept"},
{"lineNum":" 1522","line":"#else"},
{"lineNum":" 1523","line":"      /**"},
{"lineNum":" 1524","line":"       *  @brief  Insert range from another %list."},
{"lineNum":" 1525","line":"       *  @param  __position  Iterator referencing the element to insert before."},
{"lineNum":" 1526","line":"       *  @param  __x  Source list."},
{"lineNum":" 1527","line":"       *  @param  __first  Iterator referencing the start of range in x."},
{"lineNum":" 1528","line":"       *  @param  __last  Iterator referencing the end of range in x."},
{"lineNum":" 1529","line":"       *"},
{"lineNum":" 1530","line":"       *  Removes elements in the range [__first,__last) and inserts them"},
{"lineNum":" 1531","line":"       *  before @a __position in constant time."},
{"lineNum":" 1532","line":"       *"},
{"lineNum":" 1533","line":"       *  Undefined if @a __position is in [__first,__last)."},
{"lineNum":" 1534","line":"       */"},
{"lineNum":" 1535","line":"      void"},
{"lineNum":" 1536","line":"      splice(iterator __position, list& __x, iterator __first,"},
{"lineNum":" 1537","line":"\t     iterator __last)"},
{"lineNum":" 1538","line":"#endif"},
{"lineNum":" 1539","line":"      {"},
{"lineNum":" 1540","line":"\tif (__first != __last)"},
{"lineNum":" 1541","line":"\t  {"},
{"lineNum":" 1542","line":"\t    if (this != std::__addressof(__x))"},
{"lineNum":" 1543","line":"\t      _M_check_equal_allocators(__x);"},
{"lineNum":" 1544","line":""},
{"lineNum":" 1545","line":"\t    size_t __n = this->_M_distance(__first._M_node, __last._M_node);"},
{"lineNum":" 1546","line":"\t    this->_M_inc_size(__n);"},
{"lineNum":" 1547","line":"\t    __x._M_dec_size(__n);"},
{"lineNum":" 1548","line":""},
{"lineNum":" 1549","line":"\t    this->_M_transfer(__position._M_const_cast(),"},
{"lineNum":" 1550","line":"\t\t\t      __first._M_const_cast(),"},
{"lineNum":" 1551","line":"\t\t\t      __last._M_const_cast());"},
{"lineNum":" 1552","line":"\t  }"},
{"lineNum":" 1553","line":"      }"},
{"lineNum":" 1554","line":""},
{"lineNum":" 1555","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1556","line":"      /**"},
{"lineNum":" 1557","line":"       *  @brief  Insert range from another %list."},
{"lineNum":" 1558","line":"       *  @param  __position  Const_iterator referencing the element to"},
{"lineNum":" 1559","line":"       *                      insert before."},
{"lineNum":" 1560","line":"       *  @param  __x  Source list."},
{"lineNum":" 1561","line":"       *  @param  __first  Const_iterator referencing the start of range in x."},
{"lineNum":" 1562","line":"       *  @param  __last  Const_iterator referencing the end of range in x."},
{"lineNum":" 1563","line":"       *"},
{"lineNum":" 1564","line":"       *  Removes elements in the range [__first,__last) and inserts them"},
{"lineNum":" 1565","line":"       *  before @a __position in constant time."},
{"lineNum":" 1566","line":"       *"},
{"lineNum":" 1567","line":"       *  Undefined if @a __position is in [__first,__last)."},
{"lineNum":" 1568","line":"       */"},
{"lineNum":" 1569","line":"      void"},
{"lineNum":" 1570","line":"      splice(const_iterator __position, list& __x, const_iterator __first,"},
{"lineNum":" 1571","line":"\t     const_iterator __last) noexcept"},
{"lineNum":" 1572","line":"      { splice(__position, std::move(__x), __first, __last); }"},
{"lineNum":" 1573","line":"#endif"},
{"lineNum":" 1574","line":""},
{"lineNum":" 1575","line":"      /**"},
{"lineNum":" 1576","line":"       *  @brief  Remove all elements equal to value."},
{"lineNum":" 1577","line":"       *  @param  __value  The value to remove."},
{"lineNum":" 1578","line":"       *"},
{"lineNum":" 1579","line":"       *  Removes every element in the list equal to @a value."},
{"lineNum":" 1580","line":"       *  Remaining elements stay in list order.  Note that this"},
{"lineNum":" 1581","line":"       *  function only erases the elements, and that if the elements"},
{"lineNum":" 1582","line":"       *  themselves are pointers, the pointed-to memory is not"},
{"lineNum":" 1583","line":"       *  touched in any way.  Managing the pointer is the user\'s"},
{"lineNum":" 1584","line":"       *  responsibility."},
{"lineNum":" 1585","line":"       */"},
{"lineNum":" 1586","line":"      void"},
{"lineNum":" 1587","line":"      remove(const _Tp& __value);"},
{"lineNum":" 1588","line":""},
{"lineNum":" 1589","line":"      /**"},
{"lineNum":" 1590","line":"       *  @brief  Remove all elements satisfying a predicate."},
{"lineNum":" 1591","line":"       *  @tparam  _Predicate  Unary predicate function or object."},
{"lineNum":" 1592","line":"       *"},
{"lineNum":" 1593","line":"       *  Removes every element in the list for which the predicate"},
{"lineNum":" 1594","line":"       *  returns true.  Remaining elements stay in list order.  Note"},
{"lineNum":" 1595","line":"       *  that this function only erases the elements, and that if the"},
{"lineNum":" 1596","line":"       *  elements themselves are pointers, the pointed-to memory is"},
{"lineNum":" 1597","line":"       *  not touched in any way.  Managing the pointer is the user\'s"},
{"lineNum":" 1598","line":"       *  responsibility."},
{"lineNum":" 1599","line":"       */"},
{"lineNum":" 1600","line":"      template<typename _Predicate>"},
{"lineNum":" 1601","line":"\tvoid"},
{"lineNum":" 1602","line":"\tremove_if(_Predicate);"},
{"lineNum":" 1603","line":""},
{"lineNum":" 1604","line":"      /**"},
{"lineNum":" 1605","line":"       *  @brief  Remove consecutive duplicate elements."},
{"lineNum":" 1606","line":"       *"},
{"lineNum":" 1607","line":"       *  For each consecutive set of elements with the same value,"},
{"lineNum":" 1608","line":"       *  remove all but the first one.  Remaining elements stay in"},
{"lineNum":" 1609","line":"       *  list order.  Note that this function only erases the"},
{"lineNum":" 1610","line":"       *  elements, and that if the elements themselves are pointers,"},
{"lineNum":" 1611","line":"       *  the pointed-to memory is not touched in any way.  Managing"},
{"lineNum":" 1612","line":"       *  the pointer is the user\'s responsibility."},
{"lineNum":" 1613","line":"       */"},
{"lineNum":" 1614","line":"      void"},
{"lineNum":" 1615","line":"      unique();"},
{"lineNum":" 1616","line":""},
{"lineNum":" 1617","line":"      /**"},
{"lineNum":" 1618","line":"       *  @brief  Remove consecutive elements satisfying a predicate."},
{"lineNum":" 1619","line":"       *  @tparam _BinaryPredicate  Binary predicate function or object."},
{"lineNum":" 1620","line":"       *"},
{"lineNum":" 1621","line":"       *  For each consecutive set of elements [first,last) that"},
{"lineNum":" 1622","line":"       *  satisfy predicate(first,i) where i is an iterator in"},
{"lineNum":" 1623","line":"       *  [first,last), remove all but the first one.  Remaining"},
{"lineNum":" 1624","line":"       *  elements stay in list order.  Note that this function only"},
{"lineNum":" 1625","line":"       *  erases the elements, and that if the elements themselves are"},
{"lineNum":" 1626","line":"       *  pointers, the pointed-to memory is not touched in any way."},
{"lineNum":" 1627","line":"       *  Managing the pointer is the user\'s responsibility."},
{"lineNum":" 1628","line":"       */"},
{"lineNum":" 1629","line":"      template<typename _BinaryPredicate>"},
{"lineNum":" 1630","line":"\tvoid"},
{"lineNum":" 1631","line":"\tunique(_BinaryPredicate);"},
{"lineNum":" 1632","line":""},
{"lineNum":" 1633","line":"      /**"},
{"lineNum":" 1634","line":"       *  @brief  Merge sorted lists."},
{"lineNum":" 1635","line":"       *  @param  __x  Sorted list to merge."},
{"lineNum":" 1636","line":"       *"},
{"lineNum":" 1637","line":"       *  Assumes that both @a __x and this list are sorted according to"},
{"lineNum":" 1638","line":"       *  operator<().  Merges elements of @a __x into this list in"},
{"lineNum":" 1639","line":"       *  sorted order, leaving @a __x empty when complete.  Elements in"},
{"lineNum":" 1640","line":"       *  this list precede elements in @a __x that are equal."},
{"lineNum":" 1641","line":"       */"},
{"lineNum":" 1642","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1643","line":"      void"},
{"lineNum":" 1644","line":"      merge(list&& __x);"},
{"lineNum":" 1645","line":""},
{"lineNum":" 1646","line":"      void"},
{"lineNum":" 1647","line":"      merge(list& __x)"},
{"lineNum":" 1648","line":"      { merge(std::move(__x)); }"},
{"lineNum":" 1649","line":"#else"},
{"lineNum":" 1650","line":"      void"},
{"lineNum":" 1651","line":"      merge(list& __x);"},
{"lineNum":" 1652","line":"#endif"},
{"lineNum":" 1653","line":""},
{"lineNum":" 1654","line":"      /**"},
{"lineNum":" 1655","line":"       *  @brief  Merge sorted lists according to comparison function."},
{"lineNum":" 1656","line":"       *  @tparam _StrictWeakOrdering Comparison function defining"},
{"lineNum":" 1657","line":"       *  sort order."},
{"lineNum":" 1658","line":"       *  @param  __x  Sorted list to merge."},
{"lineNum":" 1659","line":"       *  @param  __comp  Comparison functor."},
{"lineNum":" 1660","line":"       *"},
{"lineNum":" 1661","line":"       *  Assumes that both @a __x and this list are sorted according to"},
{"lineNum":" 1662","line":"       *  StrictWeakOrdering.  Merges elements of @a __x into this list"},
{"lineNum":" 1663","line":"       *  in sorted order, leaving @a __x empty when complete.  Elements"},
{"lineNum":" 1664","line":"       *  in this list precede elements in @a __x that are equivalent"},
{"lineNum":" 1665","line":"       *  according to StrictWeakOrdering()."},
{"lineNum":" 1666","line":"       */"},
{"lineNum":" 1667","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1668","line":"      template<typename _StrictWeakOrdering>"},
{"lineNum":" 1669","line":"\tvoid"},
{"lineNum":" 1670","line":"\tmerge(list&& __x, _StrictWeakOrdering __comp);"},
{"lineNum":" 1671","line":""},
{"lineNum":" 1672","line":"      template<typename _StrictWeakOrdering>"},
{"lineNum":" 1673","line":"\tvoid"},
{"lineNum":" 1674","line":"\tmerge(list& __x, _StrictWeakOrdering __comp)"},
{"lineNum":" 1675","line":"\t{ merge(std::move(__x), __comp); }"},
{"lineNum":" 1676","line":"#else"},
{"lineNum":" 1677","line":"      template<typename _StrictWeakOrdering>"},
{"lineNum":" 1678","line":"\tvoid"},
{"lineNum":" 1679","line":"\tmerge(list& __x, _StrictWeakOrdering __comp);"},
{"lineNum":" 1680","line":"#endif"},
{"lineNum":" 1681","line":""},
{"lineNum":" 1682","line":"      /**"},
{"lineNum":" 1683","line":"       *  @brief  Reverse the elements in list."},
{"lineNum":" 1684","line":"       *"},
{"lineNum":" 1685","line":"       *  Reverse the order of elements in the list in linear time."},
{"lineNum":" 1686","line":"       */"},
{"lineNum":" 1687","line":"      void"},
{"lineNum":" 1688","line":"      reverse() _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1689","line":"      { this->_M_impl._M_node._M_reverse(); }"},
{"lineNum":" 1690","line":""},
{"lineNum":" 1691","line":"      /**"},
{"lineNum":" 1692","line":"       *  @brief  Sort the elements."},
{"lineNum":" 1693","line":"       *"},
{"lineNum":" 1694","line":"       *  Sorts the elements of this list in NlogN time.  Equivalent"},
{"lineNum":" 1695","line":"       *  elements remain in list order."},
{"lineNum":" 1696","line":"       */"},
{"lineNum":" 1697","line":"      void"},
{"lineNum":" 1698","line":"      sort();"},
{"lineNum":" 1699","line":""},
{"lineNum":" 1700","line":"      /**"},
{"lineNum":" 1701","line":"       *  @brief  Sort the elements according to comparison function."},
{"lineNum":" 1702","line":"       *"},
{"lineNum":" 1703","line":"       *  Sorts the elements of this list in NlogN time.  Equivalent"},
{"lineNum":" 1704","line":"       *  elements remain in list order."},
{"lineNum":" 1705","line":"       */"},
{"lineNum":" 1706","line":"      template<typename _StrictWeakOrdering>"},
{"lineNum":" 1707","line":"\tvoid"},
{"lineNum":" 1708","line":"\tsort(_StrictWeakOrdering);"},
{"lineNum":" 1709","line":""},
{"lineNum":" 1710","line":"    protected:"},
{"lineNum":" 1711","line":"      // Internal constructor functions follow."},
{"lineNum":" 1712","line":""},
{"lineNum":" 1713","line":"      // Called by the range constructor to implement [23.1.1]/9"},
{"lineNum":" 1714","line":""},
{"lineNum":" 1715","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":" 1716","line":"      // 438. Ambiguity in the \"do the right thing\" clause"},
{"lineNum":" 1717","line":"      template<typename _Integer>"},
{"lineNum":" 1718","line":"\tvoid"},
{"lineNum":" 1719","line":"\t_M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)"},
{"lineNum":" 1720","line":"\t{ _M_fill_initialize(static_cast<size_type>(__n), __x); }"},
{"lineNum":" 1721","line":""},
{"lineNum":" 1722","line":"      // Called by the range constructor to implement [23.1.1]/9"},
{"lineNum":" 1723","line":"      template<typename _InputIterator>"},
{"lineNum":" 1724","line":"\tvoid"},
{"lineNum":" 1725","line":"\t_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 1726","line":"\t\t\t       __false_type)"},
{"lineNum":" 1727","line":"\t{"},
{"lineNum":" 1728","line":"\t  for (; __first != __last; ++__first)"},
{"lineNum":" 1729","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1730","line":"\t    emplace_back(*__first);"},
{"lineNum":" 1731","line":"#else"},
{"lineNum":" 1732","line":"\t    push_back(*__first);"},
{"lineNum":" 1733","line":"#endif"},
{"lineNum":" 1734","line":"\t}"},
{"lineNum":" 1735","line":""},
{"lineNum":" 1736","line":"      // Called by list(n,v,a), and the range constructor when it turns out"},
{"lineNum":" 1737","line":"      // to be the same thing."},
{"lineNum":" 1738","line":"      void"},
{"lineNum":" 1739","line":"      _M_fill_initialize(size_type __n, const value_type& __x)"},
{"lineNum":" 1740","line":"      {"},
{"lineNum":" 1741","line":"\tfor (; __n; --__n)"},
{"lineNum":" 1742","line":"\t  push_back(__x);"},
{"lineNum":" 1743","line":"      }"},
{"lineNum":" 1744","line":""},
{"lineNum":" 1745","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1746","line":"      // Called by list(n)."},
{"lineNum":" 1747","line":"      void"},
{"lineNum":" 1748","line":"      _M_default_initialize(size_type __n)"},
{"lineNum":" 1749","line":"      {"},
{"lineNum":" 1750","line":"\tfor (; __n; --__n)"},
{"lineNum":" 1751","line":"\t  emplace_back();"},
{"lineNum":" 1752","line":"      }"},
{"lineNum":" 1753","line":""},
{"lineNum":" 1754","line":"      // Called by resize(sz)."},
{"lineNum":" 1755","line":"      void"},
{"lineNum":" 1756","line":"      _M_default_append(size_type __n);"},
{"lineNum":" 1757","line":"#endif"},
{"lineNum":" 1758","line":""},
{"lineNum":" 1759","line":"      // Internal assign functions follow."},
{"lineNum":" 1760","line":""},
{"lineNum":" 1761","line":"      // Called by the range assign to implement [23.1.1]/9"},
{"lineNum":" 1762","line":""},
{"lineNum":" 1763","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":" 1764","line":"      // 438. Ambiguity in the \"do the right thing\" clause"},
{"lineNum":" 1765","line":"      template<typename _Integer>"},
{"lineNum":" 1766","line":"\tvoid"},
{"lineNum":" 1767","line":"\t_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)"},
{"lineNum":" 1768","line":"\t{ _M_fill_assign(__n, __val); }"},
{"lineNum":" 1769","line":""},
{"lineNum":" 1770","line":"      // Called by the range assign to implement [23.1.1]/9"},
{"lineNum":" 1771","line":"      template<typename _InputIterator>"},
{"lineNum":" 1772","line":"\tvoid"},
{"lineNum":" 1773","line":"\t_M_assign_dispatch(_InputIterator __first, _InputIterator __last,"},
{"lineNum":" 1774","line":"\t\t\t   __false_type);"},
{"lineNum":" 1775","line":""},
{"lineNum":" 1776","line":"      // Called by assign(n,t), and the range assign when it turns out"},
{"lineNum":" 1777","line":"      // to be the same thing."},
{"lineNum":" 1778","line":"      void"},
{"lineNum":" 1779","line":"      _M_fill_assign(size_type __n, const value_type& __val);"},
{"lineNum":" 1780","line":""},
{"lineNum":" 1781","line":""},
{"lineNum":" 1782","line":"      // Moves the elements from [first,last) before position."},
{"lineNum":" 1783","line":"      void"},
{"lineNum":" 1784","line":"      _M_transfer(iterator __position, iterator __first, iterator __last)"},
{"lineNum":" 1785","line":"      { __position._M_node->_M_transfer(__first._M_node, __last._M_node); }"},
{"lineNum":" 1786","line":""},
{"lineNum":" 1787","line":"      // Inserts new element at position given and with value given."},
{"lineNum":" 1788","line":"#if __cplusplus < 201103L"},
{"lineNum":" 1789","line":"      void"},
{"lineNum":" 1790","line":"      _M_insert(iterator __position, const value_type& __x)"},
{"lineNum":" 1791","line":"      {"},
{"lineNum":" 1792","line":"\t_Node* __tmp = _M_create_node(__x);"},
{"lineNum":" 1793","line":"\t__tmp->_M_hook(__position._M_node);"},
{"lineNum":" 1794","line":"\tthis->_M_inc_size(1);"},
{"lineNum":" 1795","line":"      }"},
{"lineNum":" 1796","line":"#else"},
{"lineNum":" 1797","line":"     template<typename... _Args>"},
{"lineNum":" 1798","line":"       void"},
{"lineNum":" 1799","line":"       _M_insert(iterator __position, _Args&&... __args)","class":"lineCov","hits":"1","order":"1066","possible_hits":"1",},
{"lineNum":" 1800","line":"       {"},
{"lineNum":" 1801","line":"\t _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);","class":"lineCov","hits":"1","order":"1067","possible_hits":"1",},
{"lineNum":" 1802","line":"\t __tmp->_M_hook(__position._M_node);","class":"lineCov","hits":"1","order":"1092","possible_hits":"1",},
{"lineNum":" 1803","line":"\t this->_M_inc_size(1);","class":"lineCov","hits":"1","order":"1093","possible_hits":"1",},
{"lineNum":" 1804","line":"       }","class":"linePartCov","hits":"1","order":"1095","possible_hits":"2",},
{"lineNum":" 1805","line":"#endif"},
{"lineNum":" 1806","line":""},
{"lineNum":" 1807","line":"      // Erases element at position given."},
{"lineNum":" 1808","line":"      void"},
{"lineNum":" 1809","line":"      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1810","line":"      {"},
{"lineNum":" 1811","line":"\tthis->_M_dec_size(1);"},
{"lineNum":" 1812","line":"\t__position._M_node->_M_unhook();"},
{"lineNum":" 1813","line":"\t_Node* __n = static_cast<_Node*>(__position._M_node);"},
{"lineNum":" 1814","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1815","line":"\t_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());"},
{"lineNum":" 1816","line":"#else"},
{"lineNum":" 1817","line":"\t_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());"},
{"lineNum":" 1818","line":"#endif"},
{"lineNum":" 1819","line":""},
{"lineNum":" 1820","line":"\t_M_put_node(__n);"},
{"lineNum":" 1821","line":"      }"},
{"lineNum":" 1822","line":""},
{"lineNum":" 1823","line":"      // To implement the splice (and merge) bits of N1599."},
{"lineNum":" 1824","line":"      void"},
{"lineNum":" 1825","line":"      _M_check_equal_allocators(list& __x) _GLIBCXX_NOEXCEPT"},
{"lineNum":" 1826","line":"      {"},
{"lineNum":" 1827","line":"\tif (std::__alloc_neq<typename _Base::_Node_alloc_type>::"},
{"lineNum":" 1828","line":"\t    _S_do_it(_M_get_Node_allocator(), __x._M_get_Node_allocator()))"},
{"lineNum":" 1829","line":"\t  __builtin_abort();"},
{"lineNum":" 1830","line":"      }"},
{"lineNum":" 1831","line":""},
{"lineNum":" 1832","line":"      // Used to implement resize."},
{"lineNum":" 1833","line":"      const_iterator"},
{"lineNum":" 1834","line":"      _M_resize_pos(size_type& __new_size) const;"},
{"lineNum":" 1835","line":""},
{"lineNum":" 1836","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1837","line":"      void"},
{"lineNum":" 1838","line":"      _M_move_assign(list&& __x, true_type) noexcept"},
{"lineNum":" 1839","line":"      {"},
{"lineNum":" 1840","line":"\tthis->_M_clear();"},
{"lineNum":" 1841","line":"\tif (__x.empty())"},
{"lineNum":" 1842","line":"\t  this->_M_init();"},
{"lineNum":" 1843","line":"\telse"},
{"lineNum":" 1844","line":"\t  {"},
{"lineNum":" 1845","line":"\t    this->_M_impl._M_node._M_next = __x._M_impl._M_node._M_next;"},
{"lineNum":" 1846","line":"\t    this->_M_impl._M_node._M_next->_M_prev = &this->_M_impl._M_node;"},
{"lineNum":" 1847","line":"\t    this->_M_impl._M_node._M_prev = __x._M_impl._M_node._M_prev;"},
{"lineNum":" 1848","line":"\t    this->_M_impl._M_node._M_prev->_M_next = &this->_M_impl._M_node;"},
{"lineNum":" 1849","line":"\t    this->_M_set_size(__x._M_get_size());"},
{"lineNum":" 1850","line":"\t    __x._M_init();"},
{"lineNum":" 1851","line":"\t  }"},
{"lineNum":" 1852","line":"\tstd::__alloc_on_move(this->_M_get_Node_allocator(),"},
{"lineNum":" 1853","line":"\t\t\t     __x._M_get_Node_allocator());"},
{"lineNum":" 1854","line":"      }"},
{"lineNum":" 1855","line":""},
{"lineNum":" 1856","line":"      void"},
{"lineNum":" 1857","line":"      _M_move_assign(list&& __x, false_type)"},
{"lineNum":" 1858","line":"      {"},
{"lineNum":" 1859","line":"\tif (__x._M_get_Node_allocator() == this->_M_get_Node_allocator())"},
{"lineNum":" 1860","line":"\t  _M_move_assign(std::move(__x), true_type{});"},
{"lineNum":" 1861","line":"\telse"},
{"lineNum":" 1862","line":"\t  // The rvalue\'s allocator cannot be moved, or is not equal,"},
{"lineNum":" 1863","line":"\t  // so we need to individually move each element."},
{"lineNum":" 1864","line":"\t  _M_assign_dispatch(std::__make_move_if_noexcept_iterator(__x.begin()),"},
{"lineNum":" 1865","line":"\t\t\t     std::__make_move_if_noexcept_iterator(__x.end()),"},
{"lineNum":" 1866","line":"\t\t\t     __false_type{});"},
{"lineNum":" 1867","line":"      }"},
{"lineNum":" 1868","line":"#endif"},
{"lineNum":" 1869","line":"    };"},
{"lineNum":" 1870","line":"_GLIBCXX_END_NAMESPACE_CXX11"},
{"lineNum":" 1871","line":""},
{"lineNum":" 1872","line":"  /**"},
{"lineNum":" 1873","line":"   *  @brief  List equality comparison."},
{"lineNum":" 1874","line":"   *  @param  __x  A %list."},
{"lineNum":" 1875","line":"   *  @param  __y  A %list of the same type as @a __x."},
{"lineNum":" 1876","line":"   *  @return  True iff the size and elements of the lists are equal."},
{"lineNum":" 1877","line":"   *"},
{"lineNum":" 1878","line":"   *  This is an equivalence relation.  It is linear in the size of"},
{"lineNum":" 1879","line":"   *  the lists.  Lists are considered equivalent if their sizes are"},
{"lineNum":" 1880","line":"   *  equal, and if corresponding elements compare equal."},
{"lineNum":" 1881","line":"  */"},
{"lineNum":" 1882","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":" 1883","line":"    inline bool"},
{"lineNum":" 1884","line":"    operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)"},
{"lineNum":" 1885","line":"    {"},
{"lineNum":" 1886","line":"#if _GLIBCXX_USE_CXX11_ABI"},
{"lineNum":" 1887","line":"      if (__x.size() != __y.size())"},
{"lineNum":" 1888","line":"\treturn false;"},
{"lineNum":" 1889","line":"#endif"},
{"lineNum":" 1890","line":""},
{"lineNum":" 1891","line":"      typedef typename list<_Tp, _Alloc>::const_iterator const_iterator;"},
{"lineNum":" 1892","line":"      const_iterator __end1 = __x.end();"},
{"lineNum":" 1893","line":"      const_iterator __end2 = __y.end();"},
{"lineNum":" 1894","line":""},
{"lineNum":" 1895","line":"      const_iterator __i1 = __x.begin();"},
{"lineNum":" 1896","line":"      const_iterator __i2 = __y.begin();"},
{"lineNum":" 1897","line":"      while (__i1 != __end1 && __i2 != __end2 && *__i1 == *__i2)"},
{"lineNum":" 1898","line":"\t{"},
{"lineNum":" 1899","line":"\t  ++__i1;"},
{"lineNum":" 1900","line":"\t  ++__i2;"},
{"lineNum":" 1901","line":"\t}"},
{"lineNum":" 1902","line":"      return __i1 == __end1 && __i2 == __end2;"},
{"lineNum":" 1903","line":"    }"},
{"lineNum":" 1904","line":""},
{"lineNum":" 1905","line":"  /**"},
{"lineNum":" 1906","line":"   *  @brief  List ordering relation."},
{"lineNum":" 1907","line":"   *  @param  __x  A %list."},
{"lineNum":" 1908","line":"   *  @param  __y  A %list of the same type as @a __x."},
{"lineNum":" 1909","line":"   *  @return  True iff @a __x is lexicographically less than @a __y."},
{"lineNum":" 1910","line":"   *"},
{"lineNum":" 1911","line":"   *  This is a total ordering relation.  It is linear in the size of the"},
{"lineNum":" 1912","line":"   *  lists.  The elements must be comparable with @c <."},
{"lineNum":" 1913","line":"   *"},
{"lineNum":" 1914","line":"   *  See std::lexicographical_compare() for how the determination is made."},
{"lineNum":" 1915","line":"  */"},
{"lineNum":" 1916","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":" 1917","line":"    inline bool"},
{"lineNum":" 1918","line":"    operator<(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)"},
{"lineNum":" 1919","line":"    { return std::lexicographical_compare(__x.begin(), __x.end(),"},
{"lineNum":" 1920","line":"\t\t\t\t\t  __y.begin(), __y.end()); }"},
{"lineNum":" 1921","line":""},
{"lineNum":" 1922","line":"  /// Based on operator=="},
{"lineNum":" 1923","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":" 1924","line":"    inline bool"},
{"lineNum":" 1925","line":"    operator!=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)"},
{"lineNum":" 1926","line":"    { return !(__x == __y); }"},
{"lineNum":" 1927","line":""},
{"lineNum":" 1928","line":"  /// Based on operator<"},
{"lineNum":" 1929","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":" 1930","line":"    inline bool"},
{"lineNum":" 1931","line":"    operator>(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)"},
{"lineNum":" 1932","line":"    { return __y < __x; }"},
{"lineNum":" 1933","line":""},
{"lineNum":" 1934","line":"  /// Based on operator<"},
{"lineNum":" 1935","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":" 1936","line":"    inline bool"},
{"lineNum":" 1937","line":"    operator<=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)"},
{"lineNum":" 1938","line":"    { return !(__y < __x); }"},
{"lineNum":" 1939","line":""},
{"lineNum":" 1940","line":"  /// Based on operator<"},
{"lineNum":" 1941","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":" 1942","line":"    inline bool"},
{"lineNum":" 1943","line":"    operator>=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)"},
{"lineNum":" 1944","line":"    { return !(__x < __y); }"},
{"lineNum":" 1945","line":""},
{"lineNum":" 1946","line":"  /// See std::list::swap()."},
{"lineNum":" 1947","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":" 1948","line":"    inline void"},
{"lineNum":" 1949","line":"    swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)"},
{"lineNum":" 1950","line":"    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))"},
{"lineNum":" 1951","line":"    { __x.swap(__y); }"},
{"lineNum":" 1952","line":""},
{"lineNum":" 1953","line":"_GLIBCXX_END_NAMESPACE_CONTAINER"},
{"lineNum":" 1954","line":""},
{"lineNum":" 1955","line":"#if _GLIBCXX_USE_CXX11_ABI"},
{"lineNum":" 1956","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":" 1957","line":""},
{"lineNum":" 1958","line":"  // Detect when distance is used to compute the size of the whole list."},
{"lineNum":" 1959","line":"  template<typename _Tp>"},
{"lineNum":" 1960","line":"    inline ptrdiff_t"},
{"lineNum":" 1961","line":"    __distance(_GLIBCXX_STD_C::_List_iterator<_Tp> __first,"},
{"lineNum":" 1962","line":"\t       _GLIBCXX_STD_C::_List_iterator<_Tp> __last,"},
{"lineNum":" 1963","line":"\t       input_iterator_tag __tag)"},
{"lineNum":" 1964","line":"    {"},
{"lineNum":" 1965","line":"      typedef _GLIBCXX_STD_C::_List_const_iterator<_Tp> _CIter;"},
{"lineNum":" 1966","line":"      return std::__distance(_CIter(__first), _CIter(__last), __tag);"},
{"lineNum":" 1967","line":"    }"},
{"lineNum":" 1968","line":""},
{"lineNum":" 1969","line":"  template<typename _Tp>"},
{"lineNum":" 1970","line":"    inline ptrdiff_t"},
{"lineNum":" 1971","line":"    __distance(_GLIBCXX_STD_C::_List_const_iterator<_Tp> __first,"},
{"lineNum":" 1972","line":"\t       _GLIBCXX_STD_C::_List_const_iterator<_Tp> __last,"},
{"lineNum":" 1973","line":"\t       input_iterator_tag)"},
{"lineNum":" 1974","line":"    {"},
{"lineNum":" 1975","line":"      typedef _GLIBCXX_STD_C::_List_node<size_t> _Sentinel;"},
{"lineNum":" 1976","line":"      _GLIBCXX_STD_C::_List_const_iterator<_Tp> __beyond = __last;"},
{"lineNum":" 1977","line":"      ++__beyond;"},
{"lineNum":" 1978","line":"      bool __whole = __first == __beyond;"},
{"lineNum":" 1979","line":"      if (__builtin_constant_p (__whole) && __whole)"},
{"lineNum":" 1980","line":"\treturn *static_cast<const _Sentinel*>(__last._M_node)->_M_valptr();"},
{"lineNum":" 1981","line":""},
{"lineNum":" 1982","line":"      ptrdiff_t __n = 0;"},
{"lineNum":" 1983","line":"      while (__first != __last)"},
{"lineNum":" 1984","line":"\t{"},
{"lineNum":" 1985","line":"\t  ++__first;"},
{"lineNum":" 1986","line":"\t  ++__n;"},
{"lineNum":" 1987","line":"\t}"},
{"lineNum":" 1988","line":"      return __n;"},
{"lineNum":" 1989","line":"    }"},
{"lineNum":" 1990","line":""},
{"lineNum":" 1991","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":" 1992","line":"#endif"},
{"lineNum":" 1993","line":"} // namespace std"},
{"lineNum":" 1994","line":""},
{"lineNum":" 1995","line":"#endif /* _STL_LIST_H */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "mipl_parser", "date" : "2018-11-28 14:11:04", "instrumented" : 60, "covered" : 60,};
var merged_data = [];
