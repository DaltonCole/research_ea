var data = {lines:[
{"lineNum":"    1","line":"// Allocator that wraps operator new -*- C++ -*-"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 2001-2017 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This file is part of the GNU ISO C++ Library.  This library is free"},
{"lineNum":"    6","line":"// software; you can redistribute it and/or modify it under the"},
{"lineNum":"    7","line":"// terms of the GNU General Public License as published by the"},
{"lineNum":"    8","line":"// Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    9","line":"// any later version."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// This library is distributed in the hope that it will be useful,"},
{"lineNum":"   12","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   13","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   14","line":"// GNU General Public License for more details."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   17","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   18","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   21","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   22","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   23","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/** @file ext/new_allocator.h"},
{"lineNum":"   26","line":" *  This file is a GNU extension to the Standard C++ Library."},
{"lineNum":"   27","line":" */"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"#ifndef _NEW_ALLOCATOR_H"},
{"lineNum":"   30","line":"#define _NEW_ALLOCATOR_H 1"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"#include <bits/c++config.h>"},
{"lineNum":"   33","line":"#include <new>"},
{"lineNum":"   34","line":"#include <bits/functexcept.h>"},
{"lineNum":"   35","line":"#include <bits/move.h>"},
{"lineNum":"   36","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   37","line":"#include <type_traits>"},
{"lineNum":"   38","line":"#endif"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   41","line":"{"},
{"lineNum":"   42","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"  using std::size_t;"},
{"lineNum":"   45","line":"  using std::ptrdiff_t;"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"  /**"},
{"lineNum":"   48","line":"   *  @brief  An allocator that uses global new, as per [20.4]."},
{"lineNum":"   49","line":"   *  @ingroup allocators"},
{"lineNum":"   50","line":"   *"},
{"lineNum":"   51","line":"   *  This is precisely the allocator defined in the C++ Standard."},
{"lineNum":"   52","line":"   *    - all allocation calls operator new"},
{"lineNum":"   53","line":"   *    - all deallocation calls operator delete"},
{"lineNum":"   54","line":"   *"},
{"lineNum":"   55","line":"   *  @tparam  _Tp  Type of allocated object."},
{"lineNum":"   56","line":"   */"},
{"lineNum":"   57","line":"  template<typename _Tp>"},
{"lineNum":"   58","line":"    class new_allocator"},
{"lineNum":"   59","line":"    {"},
{"lineNum":"   60","line":"    public:"},
{"lineNum":"   61","line":"      typedef size_t     size_type;"},
{"lineNum":"   62","line":"      typedef ptrdiff_t  difference_type;"},
{"lineNum":"   63","line":"      typedef _Tp*       pointer;"},
{"lineNum":"   64","line":"      typedef const _Tp* const_pointer;"},
{"lineNum":"   65","line":"      typedef _Tp&       reference;"},
{"lineNum":"   66","line":"      typedef const _Tp& const_reference;"},
{"lineNum":"   67","line":"      typedef _Tp        value_type;"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"      template<typename _Tp1>"},
{"lineNum":"   70","line":"\tstruct rebind"},
{"lineNum":"   71","line":"\t{ typedef new_allocator<_Tp1> other; };"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   74","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"   75","line":"      // 2103. propagate_on_container_move_assignment"},
{"lineNum":"   76","line":"      typedef std::true_type propagate_on_container_move_assignment;"},
{"lineNum":"   77","line":"#endif"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"      new_allocator() _GLIBCXX_USE_NOEXCEPT { }","class":"linePartCov","hits":"8","order":"177","possible_hits":"12",},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }","class":"linePartCov","hits":"2","order":"773","possible_hits":"3",},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"      template<typename _Tp1>"},
{"lineNum":"   84","line":"\tnew_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }","class":"linePartCov","hits":"8","order":"256","possible_hits":"12",},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"      pointer"},
{"lineNum":"   89","line":"      address(reference __x) const _GLIBCXX_NOEXCEPT"},
{"lineNum":"   90","line":"      { return std::__addressof(__x); }"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"      const_pointer"},
{"lineNum":"   93","line":"      address(const_reference __x) const _GLIBCXX_NOEXCEPT"},
{"lineNum":"   94","line":"      { return std::__addressof(__x); }"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"      // NB: __n is permitted to be 0.  The C++ standard says nothing"},
{"lineNum":"   97","line":"      // about what the return value is when __n == 0."},
{"lineNum":"   98","line":"      pointer"},
{"lineNum":"   99","line":"      allocate(size_type __n, const void* = static_cast<const void*>(0))","class":"lineCov","hits":"4","order":"203","possible_hits":"4",},
{"lineNum":"  100","line":"      {"},
{"lineNum":"  101","line":"\tif (__n > this->max_size())","class":"lineCov","hits":"4","order":"204","possible_hits":"4",},
{"lineNum":"  102","line":"\t  std::__throw_bad_alloc();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"#if __cpp_aligned_new"},
{"lineNum":"  105","line":"\tif (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)"},
{"lineNum":"  106","line":"\t  {"},
{"lineNum":"  107","line":"\t    std::align_val_t __al = std::align_val_t(alignof(_Tp));"},
{"lineNum":"  108","line":"\t    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));"},
{"lineNum":"  109","line":"\t  }"},
{"lineNum":"  110","line":"#endif"},
{"lineNum":"  111","line":"\treturn static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));","class":"lineCov","hits":"4","order":"207","possible_hits":"4",},
{"lineNum":"  112","line":"      }","class":"linePartCov","hits":"4","order":"254","possible_hits":"8",},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"      // __p is not permitted to be a null pointer."},
{"lineNum":"  115","line":"      void"},
{"lineNum":"  116","line":"      deallocate(pointer __p, size_type)","class":"lineCov","hits":"4","order":"1105","possible_hits":"4",},
{"lineNum":"  117","line":"      {"},
{"lineNum":"  118","line":"#if __cpp_aligned_new"},
{"lineNum":"  119","line":"\tif (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)"},
{"lineNum":"  120","line":"\t  {"},
{"lineNum":"  121","line":"\t    ::operator delete(__p, std::align_val_t(alignof(_Tp)));"},
{"lineNum":"  122","line":"\t    return;"},
{"lineNum":"  123","line":"\t  }"},
{"lineNum":"  124","line":"#endif"},
{"lineNum":"  125","line":"\t::operator delete(__p);","class":"lineCov","hits":"4","order":"1106","possible_hits":"4",},
{"lineNum":"  126","line":"      }","class":"linePartCov","hits":"4","order":"1136","possible_hits":"8",},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"      size_type"},
{"lineNum":"  129","line":"      max_size() const _GLIBCXX_USE_NOEXCEPT","class":"lineCov","hits":"4","order":"205","possible_hits":"4",},
{"lineNum":"  130","line":"      { return size_t(-1) / sizeof(_Tp); }","class":"linePartCov","hits":"4","order":"206","possible_hits":"8",},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  133","line":"      template<typename _Up, typename... _Args>"},
{"lineNum":"  134","line":"\tvoid"},
{"lineNum":"  135","line":"\tconstruct(_Up* __p, _Args&&... __args)","class":"linePartCov","hits":"3","order":"764","possible_hits":"5",},
{"lineNum":"  136","line":"\t{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }","class":"linePartCov","hits":"3","order":"765","possible_hits":"5",},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"      template<typename _Up>"},
{"lineNum":"  139","line":"\tvoid"},
{"lineNum":"  140","line":"\tdestroy(_Up* __p) { __p->~_Up(); }","class":"linePartCov","hits":"6","order":"1099","possible_hits":"9",},
{"lineNum":"  141","line":"#else"},
{"lineNum":"  142","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  143","line":"      // 402. wrong new expression in [some_] allocator::construct"},
{"lineNum":"  144","line":"      void"},
{"lineNum":"  145","line":"      construct(pointer __p, const _Tp& __val)"},
{"lineNum":"  146","line":"      { ::new((void *)__p) _Tp(__val); }"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"      void"},
{"lineNum":"  149","line":"      destroy(pointer __p) { __p->~_Tp(); }"},
{"lineNum":"  150","line":"#endif"},
{"lineNum":"  151","line":"    };"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"  template<typename _Tp>"},
{"lineNum":"  154","line":"    inline bool"},
{"lineNum":"  155","line":"    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)"},
{"lineNum":"  156","line":"    { return true; }"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"  template<typename _Tp>"},
{"lineNum":"  159","line":"    inline bool"},
{"lineNum":"  160","line":"    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)"},
{"lineNum":"  161","line":"    { return false; }"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":"  164","line":"} // namespace"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "mipl_parser", "date" : "2018-11-28 14:11:04", "instrumented" : 16, "covered" : 15,};
var merged_data = [];
